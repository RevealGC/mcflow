[
    {
        "id": "67991373.45438c",
        "type": "tab",
        "label": "Dynamic Rules From Parameters Files",
        "disabled": true,
        "info": ""
    },
    {
        "id": "2e37e573b3c922d6",
        "type": "tab",
        "label": "Notifications",
        "disabled": false,
        "info": "# Will Send notifications.\n\nEnd point is a post in localhost:80/notification\n\nIts payload is comprised of:\n\nmsg.payload = {\n    data: [],\n    message: \"Submitting a job\",\n    sentFrom: \"QFlow\",\n    sentTo: \"Qbes\"\n}\n\nexports.params = {\n    forceTls: false,\n    params: {\n        DEBUG:    {\n            type: 'bool',\n            source: ['body', 'headers', 'query'],\n            required: false,\n            default: (v) => {\n                if (typeof v !== 'undefined' && v != '') return JSON.parse(v);\n                return false;\n            }\n        },\n        api_token: {\n            type: 'string',\n            source: ['body', 'headers', 'query'],\n            required: false\n        },\n        id:{\n            type: 'int',\n            required: false,\n            source: ['body', 'headers', 'query'],\n        },\n        data: {\n            type: 'json',\n            source: ['body'],\n            required: true,\n            default: []\n        },\n        message: {\n            type:'string',\n            source: ['body'],\n            required: true,\n            default: ''\n        },\n        sentFrom: {\n            type:'string',\n            source: ['body', 'params', 'query'],\n            required: true,\n            default: 'Qbes'\n        },\n\n        sentTo: {\n            type:'string',\n            source: ['body', 'params', 'query'],\n            required: true,\n            default: 'QFlow'\n        },\n        parent_id:{ \n            type: 'int',\n            source: ['params', 'query', 'body', 'headers'],\n            required: false,\n            default: 0\n        }\n\n    },\n    authContext: {\n        super: false,\n        server: false\n    }\n}",
        "env": []
    },
    {
        "id": "d103860e993c1512",
        "type": "tab",
        "label": "Validate RID",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d886a3864a88d832",
        "type": "tab",
        "label": "Processing Parameters",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ae7e9f579855357c",
        "type": "tab",
        "label": "Spad",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "908af5a748b37aba",
        "type": "tab",
        "label": "Rules",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c702b495.9cc2f8",
        "type": "tab",
        "label": "validate",
        "disabled": false,
        "info": ""
    },
    {
        "id": "7d4690e10f209584",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4821a41b2fd327fb",
        "type": "tab",
        "label": "Form 2",
        "disabled": false,
        "info": ""
    },
    {
        "id": "813a171cf0470b24",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ebc615704b7e2ae8",
        "type": "tab",
        "label": "Balance Module",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "01f5b46ca228a07e",
        "type": "tab",
        "label": "Set NONNORM",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b658ecf4c9aae708",
        "type": "tab",
        "label": "Modules Data Table",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5e1c7c0d7569a4cb",
        "type": "tab",
        "label": "Generate Module",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6f369789c773517d",
        "type": "tab",
        "label": "Modules Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a1c50a528dd6cf36",
        "type": "tab",
        "label": "Completeness Check",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f63af22e81ed47a8",
        "type": "tab",
        "label": "Derived Items",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "91e923b1d58a25de",
        "type": "tab",
        "label": "Post Edit",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d772b64609d590ad",
        "type": "tab",
        "label": "Main Estab",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7904b0afeb2b68c0",
        "type": "tab",
        "label": "Microservice (Jobs)",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "50e56d1290888d82",
        "type": "tab",
        "label": "Microservice (api)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5b93d75bf6b1464b",
        "type": "tab",
        "label": "Microservice (gauges&charts)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "762437ab597e66e7",
        "type": "tab",
        "label": "Balance Test",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6e9fd4ed1a3126bb",
        "type": "tab",
        "label": "Modules Flow w/o Imputation",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0952db06f674f8bc",
        "type": "tab",
        "label": "Logical Edits",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b2e59c2394f7c26c",
        "type": "tab",
        "label": "QFlow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6399b853963e761e",
        "type": "tab",
        "label": "Logical Edits",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d7d109e0d89be1c6",
        "type": "tab",
        "label": "Kafka MS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e1c94d5011366338",
        "type": "tab",
        "label": "Batch Mode 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cd5dca18afec6561",
        "type": "tab",
        "label": "Batch Mode 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c3f84f3ada80a59f",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "de517a9172230cbe",
        "type": "tab",
        "label": "AIES NAPCS PREP",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3248e82e44cba772",
        "type": "tab",
        "label": "Completeness",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "624a1e6caab6a819",
        "type": "tab",
        "label": "BR_STAT evaluation",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5e1a962405c84d2b",
        "type": "tab",
        "label": "Derive NAICS Code",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2245e192a734f1bb",
        "type": "tab",
        "label": "Best Admin Receipts",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0a014270e6816fdf",
        "type": "tab",
        "label": "Critical Error",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a51d10c50d9dbbe0",
        "type": "tab",
        "label": "NONNORM",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f06fc99b8cb78464",
        "type": "tab",
        "label": "RCPT_TOT_VAL",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0e31453ffacd3b3c",
        "type": "tab",
        "label": "EMP_MAR12_NUM",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0a690414bffb7c2e",
        "type": "tab",
        "label": "PAY_QTR1_VAL",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "10a17d9f63b31aef",
        "type": "tab",
        "label": "NONNORM: Init Set ACTVMIO & OPSTATS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0a29fbfc598a6eb6",
        "type": "tab",
        "label": "NONNORM: Router",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1ff0abce01e8a9b4",
        "type": "tab",
        "label": "NONNORM: Set OPSTATS & ACTVMIO",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "749f57d4ab869e77",
        "type": "tab",
        "label": "NONNORM: Set NONORM",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cc39e0013d1bbd14",
        "type": "tab",
        "label": "NONNORM: Set Basic to 0",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2214caf84b0847ec",
        "type": "tab",
        "label": "NONNORM: Special Season final",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bb181ffb5aeab92c",
        "type": "tab",
        "label": "mfg_payqtr1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "83d1ac7cb83077ea",
        "type": "tab",
        "label": "mfg_payann",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c2d60c8918a1622a",
        "type": "tab",
        "label": "mfg_empq1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fe75af5be53552a9",
        "type": "tab",
        "label": "NAPCS HDICAT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6ca99eb94adab0b6",
        "type": "tab",
        "label": "NAPCS NO DONOR",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5f0ae7529035d4ee",
        "type": "tab",
        "label": "NAPCS RECALCULATE BALANCE",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "601cd75dc2c42d32",
        "type": "tab",
        "label": "NAPCS BL Rounding",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "05f553d24173a3fe",
        "type": "tab",
        "label": "NAPCS Balance - Balancing",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "184cce6ee0df3c6f",
        "type": "tab",
        "label": "NAPCS Balance",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "05f39827e3106c22",
        "type": "tab",
        "label": "MIV: NonLIFORANDOMModule",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "306dda6a5dd83c4d",
        "type": "tab",
        "label": "MIV: EvaluateNoNLIFOValuationMethodModule",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ad669800801ee84f",
        "type": "tab",
        "label": "MIV: EvaluateDetailValuationMethods",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f75347023218039f",
        "type": "tab",
        "label": "MIV: EvaluateNoNLIFOValuationMethodsModule",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "944313b2df8d5d35",
        "type": "tab",
        "label": "MIV:  NONLIFOValuationMethodsModule",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f61aed28e038a8f6",
        "type": "tab",
        "label": "MIV: Evaluate LIFO Module",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3ace7cf3e57a1ba5",
        "type": "tab",
        "label": "MIV: EvaluateLIFOReverseModule",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "23d58ce1d9a3a4af",
        "type": "tab",
        "label": "MIV: LIFOValuationMethod",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "538d3e65e0f18773",
        "type": "tab",
        "label": "MIV: InventoriesBalance",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2eed7cf661bbf727",
        "type": "tab",
        "label": "KAU To Company Additivity Check",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9edb2d8ae946822f",
        "type": "tab",
        "label": "Unit Balance",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "236c2e1a5554a6f0",
        "type": "tab",
        "label": "Valid Zero",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "067b1d1ff9443ad3",
        "type": "tab",
        "label": "Valid Negative Value",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "69164b36a28c9eff",
        "type": "tab",
        "label": "NAPCS M GOCO",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4afed9425459216e",
        "type": "tab",
        "label": "PAY_ANN_VAL",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "475c4bbdee672833",
        "type": "tab",
        "label": "Geography",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8790b12c7efb6fa0",
        "type": "tab",
        "label": "Interactive Mode",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d416a739a235277c",
        "type": "tab",
        "label": "ElectricEnergyModule",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c54f3247808fdf7f",
        "type": "tab",
        "label": "Electric Energy Module Cont",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ed71400b88bb6305",
        "type": "tab",
        "label": "Derived Naics",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1c6c32346fee9416",
        "type": "tab",
        "label": "Electric Impute Module",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "112a2e5b60c3f3a8",
        "type": "tab",
        "label": "Classification",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b03832cc4c2422fd",
        "type": "tab",
        "label": "Load Referrals",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dad88d9a3132fed6",
        "type": "tab",
        "label": "Run Modules",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d85ecef9a21f8c9c",
        "type": "tab",
        "label": "NAPCS_PREP",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c5ce2d38887016b2",
        "type": "subflow",
        "name": "Apply rules by level type",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 20,
                "y": 220,
                "wires": [
                    {
                        "id": "a288d737bb052e78"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1580,
                "y": 220,
                "wires": [
                    {
                        "id": "e2519c448954167b",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1580,
                "y": 320,
                "wires": [
                    {
                        "id": "1ef95ce134a911b9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b99b7893add8c369",
        "type": "subflow",
        "name": "Subflow 1",
        "info": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "bcba475dfd370f23"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 60,
                "wires": [
                    {
                        "id": "bcba475dfd370f23",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "27fccef587c0b218",
        "type": "subflow",
        "name": "Subflow 2",
        "info": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "89b27031e68b3415"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 520,
                "y": 60,
                "wires": [
                    {
                        "id": "89b27031e68b3415",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "3fa869ffe40596e5",
        "type": "subflow",
        "name": "Subflow 3",
        "info": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "6ed3a94bca74bb19"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 160,
                "y": 30,
                "wires": [
                    {
                        "id": "6ed3a94bca74bb19",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "98b684914b5fce08",
        "type": "subflow",
        "name": "Subflow 4",
        "info": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "ac1127915ee1fd4b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 160,
                "y": 30,
                "wires": [
                    {
                        "id": "ac1127915ee1fd4b",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "2e55e3e8510e62d0",
        "type": "subflow",
        "name": "Subflow 5",
        "info": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "f40a55ca93f943db"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 440,
                "y": 40,
                "wires": [
                    {
                        "id": "f40a55ca93f943db",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "2ad5fa373c21d0a3",
        "type": "subflow",
        "name": "Subflow 6",
        "info": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "42dbbd9f093bf42e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 160,
                "y": 30,
                "wires": [
                    {
                        "id": "42dbbd9f093bf42e",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "67a3cd3b754e4fbd",
        "type": "subflow",
        "name": "Post Edit Status Field",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 460,
                "y": 140,
                "wires": [
                    {
                        "id": "0f9ffc3cef064808"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 840,
                "y": 140,
                "wires": [
                    {
                        "id": "0f9ffc3cef064808",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "045ba1012eb08b50",
        "type": "subflow",
        "name": "Subflow 8",
        "info": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "57bc9e5538773197"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "57bc9e5538773197",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "82cc831b154f3133",
        "type": "subflow",
        "name": "SUB FLOW Dynamic Rules from Parameter Files",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 140,
                "wires": [
                    {
                        "id": "6681b08b.4a688"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1320,
                "y": 240,
                "wires": [
                    {
                        "id": "fff3d06b988e5233",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "8d5b6ce343b26ccf",
        "type": "subflow",
        "name": "Logger Of all Events",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 240,
                "y": 240,
                "wires": [
                    {
                        "id": "fea303947b28f5ab"
                    },
                    {
                        "id": "5208228e9775e479"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c0092c0f75376452",
        "type": "subflow",
        "name": "Subflow 9",
        "info": "",
        "in": [],
        "out": []
    },
    {
        "id": "e4fb9739caef0397",
        "type": "subflow",
        "name": "Balance Module Subflow",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 660,
                "y": 60,
                "wires": [
                    {
                        "id": "df0f14404b9779f3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 980,
                "y": 60,
                "wires": [
                    {
                        "id": "df0f14404b9779f3",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "56c26ff961720232",
        "type": "subflow",
        "name": "Derive NAICS Subflow",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "bf3c163ded6ea7ce"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "03552ca229e3a7a0",
        "type": "subflow",
        "name": "Subflow 10",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 100,
                "wires": [
                    {
                        "id": "fc793926435fab57"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 100,
                "wires": [
                    {
                        "id": "fc793926435fab57",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 200,
            "y": 40,
            "wires": [
                {
                    "id": "0d6b190eb1914ef7",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "f4b783dd9228239a",
        "type": "subflow",
        "name": "Subflow 11",
        "info": "",
        "in": [],
        "out": []
    },
    {
        "id": "acd9862f30af144d",
        "type": "subflow",
        "name": "PV Subflow",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 180,
                "wires": [
                    {
                        "id": "934d95644c951dfc"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 180,
                "wires": [
                    {
                        "id": "934d95644c951dfc",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 200,
            "y": 40,
            "wires": [
                {
                    "id": "4c82868047e24054",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "ae0faa518ff234d5",
        "type": "subflow",
        "name": "Derived Items Subflow",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 160,
                "wires": [
                    {
                        "id": "a213ffa0737c4159"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 160,
                "wires": [
                    {
                        "id": "a213ffa0737c4159",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 180,
            "y": 40,
            "wires": [
                {
                    "id": "65577406809b25a9",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "473d6735cc46fccd",
        "type": "subflow",
        "name": "Logical Edits Subflow",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 280,
                "y": 60,
                "wires": [
                    {
                        "id": "c3c10ef4a75096f2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1140,
                "y": 60,
                "wires": [
                    {
                        "id": "1983b2e5645df49c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 180,
            "y": 60,
            "wires": [
                {
                    "id": "6ada43c172923c7a",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "fd9469a0efbb8a77",
        "type": "subflow",
        "name": "Balance Subflow",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 220,
                "wires": [
                    {
                        "id": "b434c43de5c1d938"
                    },
                    {
                        "id": "3de7d4b88b6bc5dc"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1980,
                "y": 180,
                "wires": [
                    {
                        "id": "e2d5eecae0459e01",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 1160,
            "y": 100,
            "wires": [
                {
                    "id": "92892d34775a5fc5",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "96f29b19e2260e65",
        "type": "subflow",
        "name": "Post Edit Subflow",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 160,
                "wires": [
                    {
                        "id": "9b8ef39b6cf7149e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 160,
                "wires": [
                    {
                        "id": "9b8ef39b6cf7149e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 220,
            "y": 40,
            "wires": [
                {
                    "id": "0ec224ff5d120eb7",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "bfe1ab19e0cbe2cf",
        "type": "subflow",
        "name": "Classification",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 640,
                "y": 60,
                "wires": [
                    {
                        "id": "0a9f67e1bc33b824"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 970,
                "y": 60,
                "wires": [
                    {
                        "id": "0a9f67e1bc33b824",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "0be109393cb5f28a",
        "type": "subflow",
        "name": "Lookup Cache Subflow",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 200,
                "y": 400,
                "wires": [
                    {
                        "id": "8c066284600dbc44"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1220,
                "y": 400,
                "wires": [
                    {
                        "id": "f5dbe24054de29ce",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "9e4e212b0811233d",
        "type": "subflow",
        "name": "Pre Db Write Back For Leased",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 340,
                "y": 220,
                "wires": [
                    {
                        "id": "e4588ba92d2276e3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 780,
                "y": 220,
                "wires": [
                    {
                        "id": "e4588ba92d2276e3",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "e28cd8ccfbe21b33",
        "type": "subflow",
        "name": "Fetch DB DATA",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 280,
                "y": 240,
                "wires": [
                    {
                        "id": "b768655d4c7a4024"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 880,
                "y": 240,
                "wires": [
                    {
                        "id": "a209d5855b2b60f9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "2c46d53f4cdbe93f",
        "type": "subflow",
        "name": "Subflow 12",
        "info": "",
        "in": [],
        "out": []
    },
    {
        "id": "998aa04bd1bb677d",
        "type": "subflow",
        "name": "Valid Zero",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 640,
                "y": 40,
                "wires": [
                    {
                        "id": "15222fbe79033cfa"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 880,
                "y": 40,
                "wires": [
                    {
                        "id": "15222fbe79033cfa",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c79b244779411ead",
        "type": "subflow",
        "name": "Valid Negative",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 580,
                "y": 40,
                "wires": [
                    {
                        "id": "dd9091221ca2c1cf"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 900,
                "y": 40,
                "wires": [
                    {
                        "id": "dd9091221ca2c1cf",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "89f071f1deb9a1b1",
        "type": "subflow",
        "name": "Completeness",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 820,
                "y": 280,
                "wires": [
                    {
                        "id": "44cfe99b5f9e273f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1120,
                "y": 280,
                "wires": [
                    {
                        "id": "44cfe99b5f9e273f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b576348e42469acf",
        "type": "subflow",
        "name": "M_GOCO",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 660,
                "y": 60,
                "wires": [
                    {
                        "id": "d1b1713300484045"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 960,
                "y": 60,
                "wires": [
                    {
                        "id": "d1b1713300484045",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "27c40a87c581e266",
        "type": "subflow",
        "name": "PAY_ANN_VAL",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 620,
                "y": 60,
                "wires": [
                    {
                        "id": "2de457b33efc9b3e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 880,
                "y": 60,
                "wires": [
                    {
                        "id": "2de457b33efc9b3e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "20d530cc0b193752",
        "type": "subflow",
        "name": "BR_STAT evaluation",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 500,
                "y": 320,
                "wires": [
                    {
                        "id": "31739108a9b57e14"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 720,
                "y": 320,
                "wires": [
                    {
                        "id": "31739108a9b57e14",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c54bc77310ce263a",
        "type": "subflow",
        "name": "Derive NAICS Code",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 240,
                "y": 120,
                "wires": [
                    {
                        "id": "1de39caabc61c808"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 540,
                "y": 120,
                "wires": [
                    {
                        "id": "1de39caabc61c808",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b22812dba408ab8f",
        "type": "subflow",
        "name": "Geography",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 560,
                "y": 60,
                "wires": [
                    {
                        "id": "310c654aa32dd481"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 900,
                "y": 60,
                "wires": [
                    {
                        "id": "310c654aa32dd481",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "aadaa91727c0d579",
        "type": "subflow",
        "name": "Best Admin Receipts",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 520,
                "y": 380,
                "wires": [
                    {
                        "id": "fb06bfc8575a00fd"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 820,
                "y": 380,
                "wires": [
                    {
                        "id": "fb06bfc8575a00fd",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "42be4655fd3a8c84",
        "type": "subflow",
        "name": "Critical Error",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 560,
                "y": 260,
                "wires": [
                    {
                        "id": "f2eeed6f42b8a31c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 820,
                "y": 260,
                "wires": [
                    {
                        "id": "f2eeed6f42b8a31c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "5eae5184a8f175fd",
        "type": "subflow",
        "name": "NONNORM",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 320,
                "y": 180,
                "wires": [
                    {
                        "id": "d97e7c0dec380b3d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 620,
                "y": 180,
                "wires": [
                    {
                        "id": "d97e7c0dec380b3d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "1159e6c8f76efda3",
        "type": "subflow",
        "name": "ElectricEnergyModule",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 620,
                "y": 60,
                "wires": [
                    {
                        "id": "9373014f1bd2d06a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 60,
                "wires": [
                    {
                        "id": "9373014f1bd2d06a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "aadd13b9b9077fc3",
        "type": "subflow",
        "name": "ElectricEnergyModuleCont",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 560,
                "y": 60,
                "wires": [
                    {
                        "id": "cc3b332a2e1dd3b1"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 60,
                "wires": [
                    {
                        "id": "cc3b332a2e1dd3b1",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "3ccae806a14cca8d",
        "type": "subflow",
        "name": "ElectricImputeModule",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 560,
                "y": 60,
                "wires": [
                    {
                        "id": "8a4a29f10142c232"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 60,
                "wires": [
                    {
                        "id": "8a4a29f10142c232",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "7c71f52633d8c794",
        "type": "subflow",
        "name": "RCPT_TOT_VAL",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 560,
                "y": 260,
                "wires": [
                    {
                        "id": "839fb510069fa734"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 820,
                "y": 260,
                "wires": [
                    {
                        "id": "839fb510069fa734",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "4781d07fda613850",
        "type": "subflow",
        "name": "EMP_MAR12_NUM",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 680,
                "y": 320,
                "wires": [
                    {
                        "id": "8ffe802b67aef5e3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 980,
                "y": 320,
                "wires": [
                    {
                        "id": "8ffe802b67aef5e3",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "253763f13152858b",
        "type": "subflow",
        "name": "PAY_QTR1_VAL",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 480,
                "y": 240,
                "wires": [
                    {
                        "id": "8b5375b4024c9c0b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 740,
                "y": 240,
                "wires": [
                    {
                        "id": "8b5375b4024c9c0b",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f07c9ae4084738fc",
        "type": "subflow",
        "name": "Derived Naics",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 640,
                "y": 60,
                "wires": [
                    {
                        "id": "b160a0ca86eee401"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 920,
                "y": 60,
                "wires": [
                    {
                        "id": "b160a0ca86eee401",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f9a2a2262f95bae3",
        "type": "subflow",
        "name": "NonNORM Init Set ACTVMIO & OPSTATS",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 580,
                "y": 160,
                "wires": [
                    {
                        "id": "2e5501e16398d095"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 960,
                "y": 160,
                "wires": [
                    {
                        "id": "2e5501e16398d095",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b93bf22bc3258992",
        "type": "subflow",
        "name": "NONNORM: Router",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 340,
                "y": 260,
                "wires": [
                    {
                        "id": "da9df6f3b05b96e6"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 640,
                "y": 260,
                "wires": [
                    {
                        "id": "da9df6f3b05b96e6",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "a661e33a6e4be4fe",
        "type": "subflow",
        "name": "Set OPSTATS & ACTVMIO",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 340,
                "y": 200,
                "wires": [
                    {
                        "id": "9511bc37f025a9ac"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 700,
                "y": 200,
                "wires": [
                    {
                        "id": "9511bc37f025a9ac",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "5251d9acce14d156",
        "type": "subflow",
        "name": "NONNORM: Set NONORM",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 540,
                "y": 240,
                "wires": [
                    {
                        "id": "1bb9ec440766bd2c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 820,
                "y": 240,
                "wires": [
                    {
                        "id": "1bb9ec440766bd2c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b8154c600987e319",
        "type": "subflow",
        "name": "NONNORM: Set Basic to 0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 480,
                "y": 260,
                "wires": [
                    {
                        "id": "46531482d43b4cae"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 760,
                "y": 260,
                "wires": [
                    {
                        "id": "46531482d43b4cae",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "e1f601e2c56dfda4",
        "type": "subflow",
        "name": "NONNORM: Special Season final",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 620,
                "y": 80,
                "wires": [
                    {
                        "id": "e2f7739eee5de74c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 80,
                "wires": [
                    {
                        "id": "e2f7739eee5de74c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "05d1a91987f08f14",
        "type": "subflow",
        "name": "mfg_payqtr1",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 560,
                "y": 120,
                "wires": [
                    {
                        "id": "c660fc494a2e76e6"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 820,
                "y": 120,
                "wires": [
                    {
                        "id": "c660fc494a2e76e6",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "48bdd199705157b9",
        "type": "subflow",
        "name": "mfg_payann",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 660,
                "y": 80,
                "wires": [
                    {
                        "id": "e2ac825ab490ae2d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 920,
                "y": 80,
                "wires": [
                    {
                        "id": "e2ac825ab490ae2d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "9f8b85fce167ad51",
        "type": "subflow",
        "name": "mfg_empq1",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 680,
                "y": 180,
                "wires": [
                    {
                        "id": "e1c3e5836e2b8eca"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 180,
                "wires": [
                    {
                        "id": "e1c3e5836e2b8eca",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b3b1701e035827dc",
        "type": "subflow",
        "name": "NAPCS HDICAT",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 580,
                "y": 280,
                "wires": [
                    {
                        "id": "f6885c586821c8cd"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 900,
                "y": 280,
                "wires": [
                    {
                        "id": "f6885c586821c8cd",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "4b2a066dec42e6f4",
        "type": "subflow",
        "name": "NAPCS NO DONOR",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 560,
                "y": 320,
                "wires": [
                    {
                        "id": "4569aee5c3cfae11"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 920,
                "y": 320,
                "wires": [
                    {
                        "id": "4569aee5c3cfae11",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "e77217f4bfc52a38",
        "type": "subflow",
        "name": "NAPCS RECALCULATE BALANCE",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 580,
                "y": 260,
                "wires": [
                    {
                        "id": "e07677c8e679affd"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 960,
                "y": 260,
                "wires": [
                    {
                        "id": "e07677c8e679affd",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "fbb1e70dfe5fe82f",
        "type": "subflow",
        "name": "NAPCS BL Rounding",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 640,
                "y": 200,
                "wires": [
                    {
                        "id": "b2afff84193f1485"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 980,
                "y": 200,
                "wires": [
                    {
                        "id": "b2afff84193f1485",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c706d1ca2706f3bf",
        "type": "subflow",
        "name": "NAPCS Balance - Balancing",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 720,
                "y": 100,
                "wires": [
                    {
                        "id": "1fe10b7b2609c70b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 960,
                "y": 100,
                "wires": [
                    {
                        "id": "1fe10b7b2609c70b",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d32a58c0544f501c",
        "type": "subflow",
        "name": "NAPCS Balance",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 620,
                "y": 140,
                "wires": [
                    {
                        "id": "401fdae063b57aa5"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 900,
                "y": 140,
                "wires": [
                    {
                        "id": "401fdae063b57aa5",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "6f23d11cf5bb4bde",
        "type": "subflow",
        "name": "MIV: NonLIFORANDOMModule",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 620,
                "y": 60,
                "wires": [
                    {
                        "id": "5c958e901a16d2a1"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1000,
                "y": 60,
                "wires": [
                    {
                        "id": "5c958e901a16d2a1",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "625b8c982fed66b7",
        "type": "subflow",
        "name": "MIV: EvaluateNoNLIFOValuationMethodModule",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 500,
                "y": 100,
                "wires": [
                    {
                        "id": "2bda237fe1cd2f49"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 980,
                "y": 100,
                "wires": [
                    {
                        "id": "2bda237fe1cd2f49",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "3e0275f580e2d77c",
        "type": "subflow",
        "name": "MIV: EvaluateDetailValuationMethods",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 620,
                "y": 100,
                "wires": [
                    {
                        "id": "7c98b0321d9624dd"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1040,
                "y": 100,
                "wires": [
                    {
                        "id": "7c98b0321d9624dd",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "0ab9d9d713d5103c",
        "type": "subflow",
        "name": "MIV: EvaluateNoNLIFOValuationMethodsModule",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 480,
                "y": 60,
                "wires": [
                    {
                        "id": "9f9833d11c2323e2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1000,
                "y": 60,
                "wires": [
                    {
                        "id": "9f9833d11c2323e2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "379e12b168b021d1",
        "type": "subflow",
        "name": "MIV:  NONLIFOValuationMethodsModule",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 500,
                "y": 60,
                "wires": [
                    {
                        "id": "bf9971d8a4012ed3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 960,
                "y": 60,
                "wires": [
                    {
                        "id": "bf9971d8a4012ed3",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c65f463988b11e12",
        "type": "subflow",
        "name": "MIV: Evaluate LIFO Module",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 580,
                "y": 80,
                "wires": [
                    {
                        "id": "b78377ba255063ad"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 960,
                "y": 80,
                "wires": [
                    {
                        "id": "b78377ba255063ad",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "17fe2bc799b77fa4",
        "type": "subflow",
        "name": "MIV: EvaluateLIFOReverseModule",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 460,
                "y": 60,
                "wires": [
                    {
                        "id": "2aefe1848ae82c98"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 920,
                "y": 60,
                "wires": [
                    {
                        "id": "2aefe1848ae82c98",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "7d33e2bb432d595f",
        "type": "subflow",
        "name": "MIV: LIFOValuationMethod",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 600,
                "y": 80,
                "wires": [
                    {
                        "id": "9a63a08fcc6c11c3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 960,
                "y": 80,
                "wires": [
                    {
                        "id": "9a63a08fcc6c11c3",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "75eae7f006cc0f8a",
        "type": "subflow",
        "name": "MIV: InventoriesBalance",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 600,
                "y": 60,
                "wires": [
                    {
                        "id": "29d71411aa13a380"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 60,
                "wires": [
                    {
                        "id": "29d71411aa13a380",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "24afab78ca973c73",
        "type": "subflow",
        "name": "KAU To Company Additivity Check",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 560,
                "y": 60,
                "wires": [
                    {
                        "id": "7dbfcdc951fc4a9f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 980,
                "y": 60,
                "wires": [
                    {
                        "id": "7dbfcdc951fc4a9f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "1a584bfe7f4a2458",
        "type": "subflow",
        "name": "Load Referrals",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 880,
                "y": 220,
                "wires": [
                    {
                        "id": "08eaf81ec10ed752"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1220,
                "y": 220,
                "wires": [
                    {
                        "id": "08eaf81ec10ed752",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "e7b7501b29427db9",
        "type": "subflow",
        "name": "NAPCS_PREP",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 580,
                "y": 300,
                "wires": [
                    {
                        "id": "d831e0513adcc48e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 900,
                "y": 300,
                "wires": [
                    {
                        "id": "d831e0513adcc48e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "7dc18555ca029842",
        "type": "group",
        "z": "d103860e993c1512",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f3903be4e24d8dca",
            "97d2bd49cb3742bc",
            "999bbdaf976e7feb",
            "d529da54696a9982",
            "d1e0f39ddacfeb20",
            "d015bbe8f3761f7f"
        ],
        "x": 54,
        "y": -1
    },
    {
        "id": "5a28e866a67c90ec",
        "type": "group",
        "z": "d103860e993c1512",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a52599d1e82370ad",
            "3773a11cc06cd9db",
            "f47d58da6a345fa9",
            "12d8ce370fc2153f",
            "6970f9e5cadfae30",
            "eee34fb243fcc025",
            "8764792a5250d529"
        ],
        "x": 14,
        "y": 279
    },
    {
        "id": "c0b83f35fdc02130",
        "type": "group",
        "z": "67991373.45438c",
        "name": "FACS FROM DB -Select Reporting IDs from DropDown",
        "style": {
            "label": true
        },
        "nodes": [
            "0cd9973f643e23da",
            "3b55370ad9fd31f5",
            "e76e13639b1f0475",
            "7ce52ec9ef003b44",
            "d394b61bcc4755e6"
        ],
        "x": 14,
        "y": 939
    },
    {
        "id": "ef50b77b253a7883",
        "type": "group",
        "z": "67991373.45438c",
        "name": "Rules Types",
        "style": {
            "label": true
        },
        "nodes": [
            "fb483894819a453e",
            "5f12a638967ad520",
            "199e84df3d73b845",
            "79f4bff451119fb7",
            "645a9d4772fcd00f",
            "739c4193fa8fce2c",
            "d587f5de3f4014c8"
        ],
        "x": 14,
        "y": 239
    },
    {
        "id": "62708d0bbe922798",
        "type": "group",
        "z": "67991373.45438c",
        "name": "FACTS: From File",
        "style": {
            "label": true
        },
        "nodes": [
            "97cb22c43553888b",
            "04f3b0fb456d2117",
            "100234cf93c195b8",
            "c047c871d9c0e70d",
            "c9c9ca415ab95910",
            "16550455147cd747",
            "211d46862546b6bf",
            "571a7beaed3ab093",
            "24856db77f81d8bb",
            "21a2308db46311bb",
            "58df41cd8e54a653"
        ],
        "x": 14,
        "y": 519
    },
    {
        "id": "19463268a6c67561",
        "type": "group",
        "z": "67991373.45438c",
        "name": "Rules: From Parameter Files",
        "style": {
            "label": true
        },
        "nodes": [
            "9a7a7971.dbc4b8",
            "1e5beed02674863a",
            "b5c53653a76681bf",
            "06db3e224b379422"
        ],
        "x": 14,
        "y": 99,
        "info": "# Rules from Parameter Files"
    },
    {
        "id": "4099bf03141f3710",
        "type": "group",
        "z": "dad88d9a3132fed6",
        "name": "Upload a file /simple. Change look of the form in the {html node",
        "style": {
            "label": true
        },
        "nodes": [
            "7c30fb48.99cd2c",
            "3153fbd3.203a64",
            "737e44d2.373a64",
            "7d8e179a.283e4",
            "25859a94.7d9976",
            "e1643981.20d7c8",
            "d7e5df8b.97a4e8",
            "0464e4eb98976890",
            "81e3239593f9f1d1",
            "2319e5574f035f21",
            "2e210837e211c8be",
            "20ef4922bea8d7fd",
            "89e7e315b3a8c30b",
            "ba5d5bdad0bc957e",
            "8434c6c16c1fbaaf",
            "399608507ce305d7",
            "24ae978c7feb5fc3",
            "b9b9acc35bdd0b75",
            "43545e3b96e7f60c",
            "d5aac8a297ee6dd2",
            "5d05b108e4e3f722",
            "28494dbc74f30091",
            "8272974b9a32a0ac",
            "270941def4b7c8b6",
            "65738b3d68734570",
            "fbcbf9510de0509c",
            "05b67576d444bda4",
            "039e4172b173ea18",
            "45b768d58693d73d",
            "854cd7a417cbbc6e",
            "6c8827ce7a4c83d8",
            "6386460ff91d3960",
            "6982bc340b585149",
            "d990e40c5e545d4e",
            "08daf4161eddc269",
            "733a9e511bb97033",
            "395ec4e45f0e2746",
            "dc2a2ca809797dbd",
            "a42aa429654aa772",
            "f14b49f36a5b83fc",
            "4a50e74e63590ec7",
            "81f5d75ffbcd549e",
            "b1540f3459d95049",
            "32b24311da4a3220",
            "cd8a05808eedb5f3",
            "ff27924ce01b7894",
            "3fd3586e01a6e2dc",
            "1597f28db268d317",
            "48c2bbd321b77688",
            "a0a9a69afb297619",
            "879c5a04e7f7b3ba",
            "601d06243349006e",
            "9924458ebb7935cd",
            "51d4f6e460537ff8",
            "8cc4aec631b9f7ab",
            "6e0891f1d9b0f50b",
            "405380585cc28809",
            "be79a45237eac5df",
            "961d21f9c9d6935d",
            "256113e429ce586b",
            "6e4d6926b48c4bfc",
            "6a7a578fbd272b1f",
            "ac696618fbdb5b2b",
            "ff930476a898868c",
            "17eb7e821e3b7ea0",
            "8ab5edfeddc79fdc",
            "9a0ffed7eefbb31e",
            "2197046546278bb4",
            "0f1620a9dfb42cf6",
            "f2d1653b5ba3e5d2",
            "03b4a30c8b73aaa1",
            "0695b3dc79291692",
            "903ab3bdc5e84545",
            "62a7ab56c461f544",
            "26d5116b6bd90d58",
            "eec857548bfbe6b5",
            "193adf68b854c196",
            "2fd70cb03d1b3cb7",
            "23ffb00caa077b23",
            "6b05d518e4c1bc47",
            "302cb8040ecade52",
            "2b5207ce5d20fc0a",
            "184f643c8c0c9483",
            "13026c6f9554fd48",
            "628a357ebf92b85e",
            "23110971cf0ed68c",
            "f96645ae14ef8fb7",
            "9ff082949b495698",
            "76ae33256827ae89",
            "f192e59528bfd677",
            "aecaf71d99c7d88b",
            "3a09eefeb46e3070",
            "9e0c70dcbb4236fd",
            "4009a991edd2db54",
            "3243d670e9d24a2d",
            "070b2c6eb42b2ee1",
            "1b801f920c932ed1",
            "f49fb32690ddbe1a",
            "bf91ad9e062838cc"
        ],
        "x": 14,
        "y": 699,
        "w": 2252,
        "h": 2982
    },
    {
        "id": "302cb8040ecade52",
        "type": "group",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "Initialize File Name and Global set moduleFacts",
        "style": {
            "label": true
        },
        "nodes": [
            "12c94ce38056fc20",
            "a47c991027033263"
        ],
        "x": 1194,
        "y": 859,
        "w": 432,
        "h": 82
    },
    {
        "id": "d1e0f39ddacfeb20",
        "type": "group",
        "z": "d103860e993c1512",
        "g": "7dc18555ca029842",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e5ca7c9975e3a6b5"
        ],
        "x": 474,
        "y": 99
    },
    {
        "id": "748ca46ea16faad4",
        "type": "junction",
        "z": "67991373.45438c",
        "x": 2161.7333374023438,
        "y": 1642.7333374023438,
        "wires": [
            []
        ]
    },
    {
        "id": "ea3e0b5d6b96f47a",
        "type": "digitaloak-postgresql-connection-manager",
        "d": true,
        "name": "PGAIES",
        "host": "aies-cloud-aurora-pg-dev-instance-1.cjflqg3bd6i9.us-gov-east-1.rds.amazonaws.com",
        "port": "5432",
        "database": "space_ite",
        "tls": "",
        "use_tls": false,
        "pool_max_clients": "10",
        "pool_client_max_idle": "10000",
        "client_query_timeout": "",
        "client_statement_timeout": "",
        "client_connection_timeout_millis": "",
        "is_client_enabled": "1"
    },
    {
        "id": "1f48566b.e8958a",
        "type": "ui_group",
        "d": true,
        "name": "2. Processed PreRules",
        "tab": "da612906.998368",
        "order": 9,
        "disp": true,
        "width": 24,
        "collapse": true,
        "className": ""
    },
    {
        "id": "fe5119d6c50995ed",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#6e6e6e",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#e3ffe8",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#6e6e6e",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#6e6e6e",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#949494",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#6e6e6e",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "QFlow",
            "hideToolbar": "true",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "none",
            "dateFormat": "MM/DD/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 6,
                "py": 6
            }
        }
    },
    {
        "id": "18e6e44c.b0561c",
        "type": "ui_group",
        "name": "Tables",
        "tab": "",
        "order": 8,
        "disp": true,
        "width": "6"
    },
    {
        "id": "24e6f02ee5d4fe37",
        "type": "ui_group",
        "name": "Workflows",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "13",
        "collapse": false,
        "className": ""
    },
    {
        "id": "aaf91b7e.c5ca7",
        "type": "ui_group",
        "name": "PreData",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d7c16b88.658fa8",
        "type": "ui_group",
        "name": "iframe",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "99274104.d1d6",
        "type": "ui_group",
        "name": "Weather",
        "tab": "",
        "order": 3,
        "disp": false,
        "width": "5",
        "collapse": false
    },
    {
        "id": "e7dc0c12a87bf783",
        "type": "ui_tab",
        "d": true,
        "name": "Rules",
        "icon": "dashboard",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "b42243a688b5a996",
        "type": "ui_group",
        "name": "Enter Workflows",
        "tab": "e7dc0c12a87bf783",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "fe9b4de4.dcd72",
        "type": "ui_group",
        "name": "Name list",
        "tab": "e7dc0c12a87bf783",
        "order": 1,
        "disp": true,
        "width": "15",
        "collapse": false
    },
    {
        "id": "da612906.998368",
        "type": "ui_tab",
        "d": true,
        "name": "Parameters",
        "icon": "home",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "440f78388bf9306a",
        "type": "ui_group",
        "name": "Rules for Workflows",
        "tab": "e7dc0c12a87bf783",
        "order": 3,
        "disp": true,
        "width": 30,
        "collapse": false,
        "className": ""
    },
    {
        "id": "5c07c02344a2bd3d",
        "type": "ui_group",
        "d": true,
        "name": "1. Parameters File",
        "tab": "da612906.998368",
        "order": 8,
        "disp": true,
        "width": 24,
        "collapse": true,
        "className": ""
    },
    {
        "id": "1f86b2145e7e556a",
        "type": "ui_group",
        "name": "Facts",
        "tab": "da612906.998368",
        "order": 5,
        "disp": true,
        "width": 16,
        "collapse": false,
        "className": ""
    },
    {
        "id": "18a5a593fcd64912",
        "type": "ui_group",
        "name": "Dynamic Rules from Parameters File",
        "tab": "da612906.998368",
        "order": 11,
        "disp": true,
        "width": 24,
        "collapse": true,
        "className": ""
    },
    {
        "id": "134f09c88dd005fc",
        "type": "ui_group",
        "name": "Assert Facts",
        "tab": "da612906.998368",
        "order": 12,
        "disp": true,
        "width": "24",
        "collapse": true,
        "className": ""
    },
    {
        "id": "160e81fb.f1c86e",
        "type": "ui_group",
        "name": "File Browser",
        "tab": "b63d1f91.68095",
        "order": 1,
        "disp": true,
        "width": "18",
        "collapse": false
    },
    {
        "id": "b63d1f91.68095",
        "type": "ui_tab",
        "d": true,
        "name": "Files",
        "icon": "dashboard",
        "order": 7,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c33a1024a72aa169",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "8b3784e33ba42593",
        "type": "ui_group",
        "name": "JSON2tree",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "4060ccd3b1b979fd",
        "type": "ui_group",
        "name": "Gauges",
        "tab": "da612906.998368",
        "order": 1,
        "disp": false,
        "width": "18",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d5b306fd70950040",
        "type": "ui_group",
        "name": "Rules",
        "tab": "da612906.998368",
        "order": 3,
        "disp": true,
        "width": 16,
        "collapse": false,
        "className": ""
    },
    {
        "id": "1d5401bf95a96f03",
        "type": "ui_group",
        "name": "JOBS",
        "tab": "da612906.998368",
        "order": 10,
        "disp": true,
        "width": "24",
        "collapse": true,
        "className": ""
    },
    {
        "id": "d68e7be3.88f088",
        "type": "ui_group",
        "name": "Forms Example",
        "tab": "67ff17e9.83751",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "54bca71e.4287f",
        "type": "ui_group",
        "name": "Form",
        "tab": "67ff17e9.83751",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "67ff17e9.83751",
        "type": "ui_tab",
        "d": true,
        "name": "Forms Example ",
        "icon": "home",
        "order": 10,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "785c383535b14b7d",
        "type": "ui_group",
        "z": "4821a41b2fd327fb",
        "name": "Dashboard Event Log",
        "tab": "67ff17e9.83751",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "fc893c6c.aaeff",
        "type": "ui_group",
        "name": "Leaderboard",
        "tab": "c79bed56.dc9bd",
        "order": 1,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c79bed56.dc9bd",
        "type": "ui_tab",
        "d": true,
        "name": "LeaderBoard",
        "icon": "dashboard",
        "order": 11,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "779fdd53a3120890",
        "type": "ui_group",
        "name": "Submit Job",
        "tab": "da612906.998368",
        "order": 7,
        "disp": true,
        "width": 16,
        "collapse": false,
        "className": ""
    },
    {
        "id": "6c5eaeae4cddb9b5",
        "type": "ui_group",
        "name": "Notifications",
        "tab": "da612906.998368",
        "order": 2,
        "disp": true,
        "width": "24",
        "collapse": true,
        "className": ""
    },
    {
        "id": "4c1a66c045af9fe9",
        "type": "ui_group",
        "name": "Dummy 11",
        "tab": "da612906.998368",
        "order": 6,
        "disp": false,
        "width": 24,
        "collapse": false,
        "className": ""
    },
    {
        "id": "90b2b640d0604f0c",
        "type": "ui_group",
        "name": "Dummy  12",
        "tab": "da612906.998368",
        "order": 4,
        "disp": true,
        "width": 24,
        "collapse": false,
        "className": ""
    },
    {
        "id": "5d2c762b30aa4565",
        "type": "ui_group",
        "name": "Group 13",
        "tab": "da612906.998368",
        "order": 13,
        "disp": true,
        "width": 6
    },
    {
        "id": "89738f37a85241c4",
        "type": "ui_group",
        "name": "Group 14",
        "tab": "da612906.998368",
        "order": 14,
        "disp": true,
        "width": 6
    },
    {
        "id": "6f46629ba1286c64",
        "type": "ui_tab",
        "d": true,
        "name": "Jobs",
        "icon": "fa-hand-o-right ",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "48c415689cc2322d",
        "type": "ui_group",
        "name": "Submit Jobs",
        "tab": "6f46629ba1286c64",
        "order": 1,
        "disp": true,
        "width": 23,
        "collapse": false,
        "className": ""
    },
    {
        "id": "feff05cd26e0da54",
        "type": "ui_spacer",
        "z": "67991373.45438c",
        "name": "spacer",
        "group": "440f78388bf9306a",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "34fc56d907f44e90",
        "type": "ui_spacer",
        "z": "67991373.45438c",
        "name": "spacer",
        "group": "440f78388bf9306a",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "f081928bfa9474f1",
        "type": "ui_spacer",
        "z": "67991373.45438c",
        "name": "spacer",
        "group": "440f78388bf9306a",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "8d5c276b9010e981",
        "type": "ui_spacer",
        "z": "67991373.45438c",
        "name": "spacer",
        "group": "440f78388bf9306a",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "5b0ed2ae974ff3e1",
        "type": "ui_spacer",
        "z": "67991373.45438c",
        "name": "spacer",
        "group": "440f78388bf9306a",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "8333ef5178609617",
        "type": "ui_spacer",
        "z": "67991373.45438c",
        "name": "spacer",
        "group": "440f78388bf9306a",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "2a87ea2fcd055deb",
        "type": "ui_spacer",
        "z": "2e37e573b3c922d6",
        "name": "spacer",
        "group": "48c415689cc2322d",
        "order": 3,
        "width": 3,
        "height": 1
    },
    {
        "id": "1a149df4230a25af",
        "type": "ui_spacer",
        "z": "dad88d9a3132fed6",
        "name": "spacer",
        "group": "b833e8c774d49527",
        "order": 3,
        "width": "12",
        "height": "1"
    },
    {
        "id": "a5b67787a0857995",
        "type": "ui_group",
        "name": "Test Modules",
        "tab": "bdf641dc7b5208f4",
        "order": 1,
        "disp": false,
        "width": "16",
        "collapse": false,
        "className": ""
    },
    {
        "id": "96ded9aa7c8ec809",
        "type": "ui_group",
        "name": "RunButton",
        "tab": "bdf641dc7b5208f4",
        "order": 2,
        "disp": false,
        "width": "16",
        "collapse": false,
        "className": ""
    },
    {
        "id": "bdf641dc7b5208f4",
        "type": "ui_tab",
        "name": "Test Modules",
        "icon": "low_priority",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1d1a43b7179c848f",
        "type": "ui_group",
        "name": "Modules Data",
        "tab": "bdf641dc7b5208f4",
        "order": 4,
        "disp": false,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "22fec4fdabbf9dd8",
        "type": "ui_group",
        "name": "Test Workflow",
        "tab": "bdf641dc7b5208f4",
        "order": 3,
        "disp": true,
        "width": "18",
        "collapse": true,
        "className": ""
    },
    {
        "id": "67fb647abfca8480",
        "type": "ui_tab",
        "d": true,
        "name": "Generate Module",
        "icon": "create",
        "order": 11,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a54754fb1b7c0694",
        "type": "ui_group",
        "name": "Generate Module",
        "tab": "67fb647abfca8480",
        "order": 1,
        "disp": true,
        "width": "16",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cda97de97a6ab5af",
        "type": "ui_spacer",
        "z": "5e1c7c0d7569a4cb",
        "name": "spacer",
        "group": "4060ccd3b1b979fd",
        "order": 5,
        "width": 2,
        "height": 1
    },
    {
        "id": "4056c92d3a414fd7",
        "type": "ui_spacer",
        "z": "5e1c7c0d7569a4cb",
        "name": "spacer",
        "group": "4060ccd3b1b979fd",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "833d7d828f8328c3",
        "type": "ui_spacer",
        "z": "5e1c7c0d7569a4cb",
        "name": "spacer",
        "group": "4060ccd3b1b979fd",
        "order": 7,
        "width": 2,
        "height": 1
    },
    {
        "id": "b71fc71692bc6998",
        "type": "ui_spacer",
        "z": "5e1c7c0d7569a4cb",
        "name": "spacer",
        "group": "4060ccd3b1b979fd",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "86991d3793824c70",
        "type": "ui_spacer",
        "z": "5e1c7c0d7569a4cb",
        "name": "spacer",
        "group": "1f48566b.e8958a",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "93c16abbd60e16e9",
        "type": "ui_spacer",
        "z": "5e1c7c0d7569a4cb",
        "name": "spacer",
        "group": "1f48566b.e8958a",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "4d2c5d1e634706f6",
        "type": "ui_spacer",
        "z": "5e1c7c0d7569a4cb",
        "name": "spacer",
        "group": "1f48566b.e8958a",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "6c8945e62b438f68",
        "type": "ui_spacer",
        "z": "5e1c7c0d7569a4cb",
        "name": "spacer",
        "group": "1f48566b.e8958a",
        "order": 6,
        "width": 7,
        "height": 1
    },
    {
        "id": "cd5d8f7c483cf0fc",
        "type": "ui_spacer",
        "z": "5e1c7c0d7569a4cb",
        "name": "spacer",
        "group": "1f48566b.e8958a",
        "order": 7,
        "width": 7,
        "height": 1
    },
    {
        "id": "ecb503ea12a48f34",
        "type": "ui_spacer",
        "z": "5e1c7c0d7569a4cb",
        "name": "spacer",
        "group": "1f48566b.e8958a",
        "order": 8,
        "width": 24,
        "height": 1
    },
    {
        "id": "cab7c0490b969b39",
        "type": "ui_spacer",
        "z": "5e1c7c0d7569a4cb",
        "name": "spacer",
        "group": "1f48566b.e8958a",
        "order": 10,
        "width": 1,
        "height": 1
    },
    {
        "id": "1ef59fc55a23dbad",
        "type": "ui_spacer",
        "z": "5e1c7c0d7569a4cb",
        "name": "spacer",
        "group": "1f48566b.e8958a",
        "order": 11,
        "width": 1,
        "height": 1
    },
    {
        "id": "99f0f80f5f6d3888",
        "type": "ui_spacer",
        "z": "5e1c7c0d7569a4cb",
        "name": "spacer",
        "group": "1f48566b.e8958a",
        "order": 12,
        "width": 1,
        "height": 1
    },
    {
        "id": "ea3da41992b12683",
        "type": "ui_spacer",
        "z": "5e1c7c0d7569a4cb",
        "name": "spacer",
        "group": "1f48566b.e8958a",
        "order": 13,
        "width": 1,
        "height": 1
    },
    {
        "id": "3a6a13848cf97e33",
        "type": "ui_spacer",
        "z": "5e1c7c0d7569a4cb",
        "name": "spacer",
        "group": "1f48566b.e8958a",
        "order": 14,
        "width": 1,
        "height": 1
    },
    {
        "id": "111523e01594e21a",
        "type": "ui_spacer",
        "z": "5e1c7c0d7569a4cb",
        "name": "spacer",
        "group": "1f48566b.e8958a",
        "order": 15,
        "width": 1,
        "height": 1
    },
    {
        "id": "79e8b37bd2f09079",
        "type": "ui_spacer",
        "z": "5e1c7c0d7569a4cb",
        "name": "spacer",
        "group": "1f48566b.e8958a",
        "order": 16,
        "width": 1,
        "height": 1
    },
    {
        "id": "7058dd9de41c265d",
        "type": "ui_spacer",
        "z": "5e1c7c0d7569a4cb",
        "name": "spacer",
        "group": "1f48566b.e8958a",
        "order": 17,
        "width": 1,
        "height": 1
    },
    {
        "id": "35ada157080b586f",
        "type": "ui_spacer",
        "z": "5e1c7c0d7569a4cb",
        "name": "spacer",
        "group": "1f48566b.e8958a",
        "order": 18,
        "width": 1,
        "height": 1
    },
    {
        "id": "21e596d96f158341",
        "type": "ui_spacer",
        "z": "5e1c7c0d7569a4cb",
        "name": "spacer",
        "group": "1d5401bf95a96f03",
        "order": 4,
        "width": 16,
        "height": 1
    },
    {
        "id": "55560d79181246b2",
        "type": "ui_spacer",
        "z": "5e1c7c0d7569a4cb",
        "name": "spacer",
        "group": "18a5a593fcd64912",
        "order": 3,
        "width": 19,
        "height": 1
    },
    {
        "id": "ef4f9868d6da5e21",
        "type": "ui_group",
        "name": "Group 3",
        "tab": "67fb647abfca8480",
        "order": 3,
        "disp": false,
        "width": "16",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1fd1ba27e7ae64a1",
        "type": "ui_spacer",
        "z": "5e1c7c0d7569a4cb",
        "name": "spacer",
        "group": "ef4f9868d6da5e21",
        "order": 1,
        "width": 16,
        "height": 1
    },
    {
        "id": "6146efe4fbffe50e",
        "type": "ui_spacer",
        "z": "5e1c7c0d7569a4cb",
        "name": "spacer",
        "group": "ef4f9868d6da5e21",
        "order": 3,
        "width": 16,
        "height": 1
    },
    {
        "id": "e73ad52bf519244c",
        "type": "ui_spacer",
        "z": "5e1c7c0d7569a4cb",
        "name": "spacer",
        "group": "ef4f9868d6da5e21",
        "order": 4,
        "width": 16,
        "height": 1
    },
    {
        "id": "ac5c58b8b6cfd606",
        "type": "ui_spacer",
        "z": "5e1c7c0d7569a4cb",
        "name": "spacer",
        "group": "ef4f9868d6da5e21",
        "order": 5,
        "width": 16,
        "height": 1
    },
    {
        "id": "53dfa9c43a688027",
        "type": "ui_spacer",
        "z": "5e1c7c0d7569a4cb",
        "name": "spacer",
        "group": "ef4f9868d6da5e21",
        "order": 6,
        "width": 16,
        "height": 1
    },
    {
        "id": "ff743e3024d7db10",
        "type": "ui_group",
        "name": "Group 3",
        "tab": "67fb647abfca8480",
        "order": 3,
        "disp": true,
        "width": 6
    },
    {
        "id": "da64493a5c1e0b09",
        "type": "ui_tab",
        "name": "Modules Flow",
        "icon": "dvr",
        "order": 12,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "6414e38571345793",
        "type": "ui_group",
        "name": "Modules Flow",
        "tab": "da64493a5c1e0b09",
        "order": 1,
        "disp": true,
        "width": "18",
        "collapse": false,
        "className": ""
    },
    {
        "id": "eb430edea69b48da",
        "type": "ui_group",
        "name": "JOBS",
        "tab": "07c042ece455f3bd",
        "order": 4,
        "disp": true,
        "width": "24",
        "collapse": true,
        "className": ""
    },
    {
        "id": "07c042ece455f3bd",
        "type": "ui_tab",
        "d": true,
        "name": "Microservice",
        "icon": "show_chart",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "01239f0e2e5d8173",
        "type": "Kafka Broker",
        "name": "Connect to kafka",
        "hosts": [
            {
                "host": "kafka",
                "port": 9092
            }
        ],
        "hostsEnvVar": "",
        "connectTimeout": "10000",
        "requestTimeout": "30000",
        "autoConnect": "true",
        "idleConnection": "5",
        "reconnectOnIdle": "true",
        "maxAsyncRequests": "10",
        "checkInterval": "10",
        "selfSign": true,
        "usetls": false,
        "useCredentials": false
    },
    {
        "id": "44b7aa4c.212894",
        "type": "Kafka Broker",
        "name": "Kafta",
        "hosts": [
            {
                "host": "127.0.0.1",
                "port": 9092
            }
        ],
        "hostsEnvVar": "",
        "connectTimeout": "10000",
        "requestTimeout": "30000",
        "autoConnect": "true",
        "idleConnection": "5",
        "reconnectOnIdle": "true",
        "maxAsyncRequests": "10",
        "checkInterval": "10",
        "selfSign": true,
        "usetls": false,
        "useCredentials": false
    },
    {
        "id": "a734a95fe6c7b3dc",
        "type": "kafka-broker",
        "name": "broker",
        "hosts": "kafka:9092",
        "selfsign": false,
        "usetls": false,
        "cacert": "",
        "clientcert": "",
        "privatekey": "",
        "passphrase": ""
    },
    {
        "id": "48f7a1eaae28d5a3",
        "type": "ui_group",
        "name": "factsAndRules",
        "tab": "07c042ece455f3bd",
        "order": 1,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "996eec6072a83356",
        "type": "ui_group",
        "name": "gotQBES",
        "tab": "07c042ece455f3bd",
        "order": 2,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "114d7a8d369bd580",
        "type": "ui_group",
        "name": "gotFLOW",
        "tab": "07c042ece455f3bd",
        "order": 3,
        "disp": false,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e9f83f755d518ecd",
        "type": "ui_group",
        "name": "Clear",
        "tab": "07c042ece455f3bd",
        "order": 5,
        "disp": false,
        "width": "1",
        "collapse": false,
        "className": ""
    },
    {
        "id": "363a5e14b79b0d91",
        "type": "ui_spacer",
        "z": "5b93d75bf6b1464b",
        "name": "spacer",
        "group": "6aa5bf7487c31263",
        "order": 1,
        "width": 3,
        "height": 1
    },
    {
        "id": "47cdc2e371d44f95",
        "type": "ui_spacer",
        "z": "5b93d75bf6b1464b",
        "name": "spacer",
        "group": "6aa5bf7487c31263",
        "order": 2,
        "width": 3,
        "height": 1
    },
    {
        "id": "1ccc2ab592ae4ac3",
        "type": "ui_spacer",
        "z": "5b93d75bf6b1464b",
        "name": "spacer",
        "group": "6aa5bf7487c31263",
        "order": 3,
        "width": 3,
        "height": 1
    },
    {
        "id": "e72f590098c84fb5",
        "type": "ui_spacer",
        "z": "5b93d75bf6b1464b",
        "name": "spacer",
        "group": "c33a1024a72aa169",
        "order": 1,
        "width": 1,
        "height": 1
    },
    {
        "id": "d25654593e23b264",
        "type": "digitaloak-postgresql-connection-manager",
        "d": true,
        "name": "postgres",
        "host": "aies-cloud-aurora-pg-dev-instance-1.cjflqg3bd6i9.us-gov-east-1.rds.amazonaws.com",
        "port": "5432",
        "database": "space_ite",
        "tls": "",
        "use_tls": false,
        "pool_max_clients": "10",
        "pool_client_max_idle": "10000",
        "client_query_timeout": "",
        "client_statement_timeout": "",
        "client_connection_timeout_millis": "",
        "is_client_enabled": "1"
    },
    {
        "id": "1662f824ae61bd7c",
        "type": "ui_tab",
        "d": true,
        "name": "Balance Test",
        "icon": "dashboard",
        "order": 11,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f1ba9b7b3ccb3021",
        "type": "ui_group",
        "name": "After QBES",
        "tab": "1662f824ae61bd7c",
        "order": 1,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "05ad88d05dd28ef3",
        "type": "ui_group",
        "name": "After Balance Module",
        "tab": "1662f824ae61bd7c",
        "order": 2,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "20ae1e52d1eef983",
        "type": "postgreSQLConfig",
        "name": "myuser@timescale:5432/iot",
        "host": "timescale",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "iot",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "myuser",
        "userFieldType": "str",
        "password": "???",
        "passwordFieldType": "str"
    },
    {
        "id": "481a641c4005d1c8",
        "type": "postgreSQLConfig",
        "name": "conn",
        "host": "aies-cloud-aurora-pg-dev-instance-1.cjflqg3bd6i9.us-gov-east-1.rds.amazonaws.com",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "space_ite",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "postgres",
        "userFieldType": "str",
        "password": "RootNew123!!",
        "passwordFieldType": "str"
    },
    {
        "id": "96a4a629f038cff3",
        "type": "tls-config",
        "z": "e28cd8ccfbe21b33",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "b7b0a64e307b71f5",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "9a0d32273f30aad5",
        "type": "comment",
        "z": "c5ce2d38887016b2",
        "name": "Apply level type rules",
        "info": "",
        "x": 200,
        "y": 80,
        "wires": []
    },
    {
        "id": "7fabfc204b7200d7",
        "type": "switch",
        "z": "c5ce2d38887016b2",
        "name": "Sort By Level Type",
        "property": "payload.facts.level_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "c",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "d",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "e",
                "vt": "str"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 570,
        "y": 320,
        "wires": [
            [
                "2ea82a98af688f5a"
            ],
            [
                "f533c299c2a137bd"
            ],
            [
                "8a476e37206a1b82"
            ],
            [
                "8a476e37206a1b82"
            ]
        ]
    },
    {
        "id": "2ea82a98af688f5a",
        "type": "function",
        "z": "c5ce2d38887016b2",
        "name": "Execute Company level rules",
        "func": "msg.query = `select id, name, description, active, type, rvs,    parsed_rule->>'event' as event ,parsed_rule->>'conditions' as conditions,  (parsed_rule)::TEXT parsed_rule, data   from aies.rules_repository where type like '%' `\nmsg.topic = 'facts'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 280,
        "wires": [
            [
                "769cdae6ee0fb68f"
            ]
        ]
    },
    {
        "id": "f533c299c2a137bd",
        "type": "function",
        "z": "c5ce2d38887016b2",
        "name": "Execute KAU/ESTAB RULES",
        "func": "msg.query = `select id, name, description, active, type, rvs,    parsed_rule->>'event' as event ,parsed_rule->>'conditions' as conditions,  (parsed_rule)::TEXT parsed_rule, data   from aies.rules_repository where type = 'KAU/ESTAB' `\nmsg.topic = 'facts'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 320,
        "wires": [
            [
                "769cdae6ee0fb68f"
            ]
        ]
    },
    {
        "id": "8a476e37206a1b82",
        "type": "function",
        "z": "c5ce2d38887016b2",
        "name": "Execute Estab Level Rules",
        "func": "msg.query = `select id, name, description, active, type, rvs,    parsed_rule->>'event' as event ,parsed_rule->>'conditions' as conditions,  (parsed_rule)::TEXT parsed_rule, data   from aies.rules_repository where type = 'estab' `\nmsg.topic='facts'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 360,
        "wires": [
            [
                "769cdae6ee0fb68f"
            ]
        ]
    },
    {
        "id": "769cdae6ee0fb68f",
        "type": "digitaloak-postgresql-query",
        "z": "c5ce2d38887016b2",
        "name": "PG-AIES: Get rules",
        "server": "ea3e0b5d6b96f47a",
        "inputs": 1,
        "outputs": 1,
        "x": 1130,
        "y": 320,
        "wires": [
            [
                "1ef95ce134a911b9"
            ]
        ]
    },
    {
        "id": "1ef95ce134a911b9",
        "type": "function",
        "z": "c5ce2d38887016b2",
        "name": "Get rules",
        "func": "msg.payload = msg.payload.rows\nmsg.topic = 'rules'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 320,
        "wires": [
            [
                "715ae02.ffcb82"
            ]
        ]
    },
    {
        "id": "e2519c448954167b",
        "type": "function",
        "z": "c5ce2d38887016b2",
        "name": "Qbes: Call Rule Editor",
        "func": "msg.factsArray = [msg.facts]\nmsg.payload = {factsArray: [msg.facts], facts: msg.facts, rules: msg.rules}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 220,
        "wires": [
            [
                "8c5e71d5a2a04ba2"
            ]
        ]
    },
    {
        "id": "715ae02.ffcb82",
        "type": "function",
        "z": "c5ce2d38887016b2",
        "name": "Merge Facts and Rules",
        "func": "context.data = context.data || new Object();\n\nswitch (msg.topic) {\n    case \"facts\":\n        context.data.facts = msg.payload.data[0].facts;\n        msg = null;\n        break;\n    case \"rules\":\n        context.data.rules = msg.payload;\n        msg = null;\n        break;\n    case \"task3\":\n        context.data.task3 = msg.payload;\n        msg = null;\n        break;\n        \n    default:\n        msg = null;\n    \tbreak;\n\n}\n\nif(context.data.rules != null && context.data.facts != null && context.data.task3 == null) {\n\tlet msg2 = new Object();\n    msg2 = context.data;\n    context.data=null;\n\treturn msg2;\n} else return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 220,
        "wires": [
            [
                "e2519c448954167b"
            ]
        ]
    },
    {
        "id": "a288d737bb052e78",
        "type": "function",
        "z": "c5ce2d38887016b2",
        "name": "Input Facts",
        "func": "// msg.payload.facts = msg.payload.data[0].facts\nmsg.topic = 'facts'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 220,
        "wires": [
            [
                "b98b1004c0382a3d"
            ]
        ]
    },
    {
        "id": "b98b1004c0382a3d",
        "type": "function",
        "z": "c5ce2d38887016b2",
        "name": "Split to get facts and rules",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 220,
        "wires": [
            [
                "715ae02.ffcb82",
                "7fabfc204b7200d7"
            ]
        ]
    },
    {
        "id": "8c5e71d5a2a04ba2",
        "type": "debug",
        "z": "c5ce2d38887016b2",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 120,
        "wires": []
    },
    {
        "id": "bcba475dfd370f23",
        "type": "function",
        "z": "b99b7893add8c369",
        "name": "5.0 Logical Check",
        "func": "msg.action = 'Logical Check'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "89b27031e68b3415",
        "type": "function",
        "z": "27fccef587c0b218",
        "name": "6.0 Ratio/Range Testing",
        "func": "msg.actions.ratioRangeTestingCompleted = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "6ed3a94bca74bb19",
        "type": "function",
        "z": "3fa869ffe40596e5",
        "name": "7.0 Post Ratio/Range",
        "func": "msg.actions.postRatioRangeCompleted = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "ac1127915ee1fd4b",
        "type": "function",
        "z": "98b684914b5fce08",
        "name": "8.0 Unit Balance",
        "func": "msg.actions.unitBalanceCompleted = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "f40a55ca93f943db",
        "type": "function",
        "z": "2e55e3e8510e62d0",
        "name": "9.0 Company Additivity Check",
        "func": "msg.actions.companyAdditivityCheckCompleted = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "42dbbd9f093bf42e",
        "type": "function",
        "z": "2ad5fa373c21d0a3",
        "name": "10.0 Derived Items",
        "func": "msg.actions.derivedItemsCompleted = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "0f9ffc3cef064808",
        "type": "function",
        "z": "67a3cd3b754e4fbd",
        "name": "11.0 Post Edit Status Fields",
        "func": "// msg.actions.postEditStatusFieldsCompleted = true\nlet record = msg.payload.csv[global.get(\"ptrModuleFacts\")];\n\nlet criticalFlags = record['criticalFlags'];\nlet TABSTAT;\nlet FAIL;\nif (criticalFlags) {\n    TABSTAT = \"FAIL\";\n    FAIL = 1;\n} \n\nmsg.payload.csv[global.get(\"ptrModuleFacts\")].ACTION = 'Post Edit Status Field'\nconsole.log({\n    msg: msg.payload.csv[global.get(\"ptrModuleFacts\")]\n})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "57bc9e5538773197",
        "type": "function",
        "z": "045ba1012eb08b50",
        "name": "3.0 All Units",
        "func": "msg.actions.allUnitsCompleted = true\nmsg.actions.determineStatusCompleted = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "6681b08b.4a688",
        "type": "file in",
        "z": "82cc831b154f3133",
        "name": "Read File",
        "filename": "payload",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 200,
        "y": 140,
        "wires": [
            [
                "e843fa29.885718"
            ]
        ]
    },
    {
        "id": "e843fa29.885718",
        "type": "csv",
        "z": "82cc831b154f3133",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\r\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 350,
        "y": 140,
        "wires": [
            [
                "99680b80968eef8c",
                "a2cbb8c5837a6f57"
            ]
        ]
    },
    {
        "id": "99680b80968eef8c",
        "type": "function",
        "z": "82cc831b154f3133",
        "name": "Convert Parameter File to Pre-Processed Rules",
        "func": "let preRules = []\n\nmsg.payload.map((r, k) => {\n\n\n// Build conditionstring cs\nlet cs  = r['CONDITION'] || 'PAY_ANN > 0'\n\nlet shortCondition = r['Short Condition'] || ''\n\ncs = (shortCondition == '') ? cs : shortCondition + ' and ' + cs\n\n\n\n\n    let actionStringRHS = ''\n    let action =[] // [{ 'FAILURE': true }]\n    let actionString = (r['ACTIONSTRING']).trim()\n\n    // actionString = (actionString.endsWith(\";\")) ? actionString.slice(0, -1) + \"\" : \"\"\n    \n\n\n  \n\n    let arr = actionString.split(\";\");\n\n    for (let i = 0; i < arr.length; i++) {\n        const equation = arr[i];\n        const [key, val] = equation.split(/(?<=^[^\\=]+)\\=/) //split(\"=\");\n\n\n        let c_key = key.replace(/[^\\x20-\\x7E]/g, \"\").trim()\n        let c_value = val.replace(\" eq \", \"=\").trim()\n\n        if (key)\n            action.push({ [c_key]: c_value });\n    }\n    \n   \n// GET DETAIL TOTALS:\nlet SUM_DET = ''\nlet SUM_DET_ARRAY = []\n\n\n\n\nfor(let j = 0 ; j < 14; ++j){\n    \n    let detVar = r['DETAIL ' + j] ? r['DETAIL ' + j] : ''\n   if(detVar !=='') SUM_DET_ARRAY.push(detVar) \n}\n\n\nif(SUM_DET_ARRAY.length > 0){\n    action.push({ [\"TOTAL\"]: r['TOTAL'] }) \nSUM_DET = SUM_DET_ARRAY.join(' + ')\naction.push({\"SUM_DET\":SUM_DET })\n\n\n}\n    let sector = r['SECTOR/TRADE'] ? r['SECTOR/TRADE'] : \"All\"\n    let validationType = \"Sector \"+sector\n\n\n\n //&& r['ACTIONSTRING'] != '' ? r['ACTIONSTRING'] :  [{'FAILURE': true}]\n    preRules.push({ \n    key: k+2, \n    ruleId: k+2,\n    type: k+2,\n    priority: r['PRIORITY'] || 5,\n    conditionstring:  cs ,\n    message: r['DESCRIPTION'], \n    action,\n    actionString: JSON.stringify(action),\n    validationType,\n    sector\n    })\n\n})\n\nmsg.preRules = preRules\nmsg.params = preRules\nmsg.payload = {paramFile: preRules}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 200,
        "wires": [
            [
                "5ab2c885ede5e880",
                "fff3d06b988e5233",
                "da484b090d083d49"
            ]
        ]
    },
    {
        "id": "5ab2c885ede5e880",
        "type": "function",
        "z": "82cc831b154f3133",
        "name": "Load the pre-rules table",
        "func": "msg.payload = msg.params\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 180,
        "wires": [
            [
                "4440c71e.f88f18"
            ]
        ]
    },
    {
        "id": "fff3d06b988e5233",
        "type": "http request",
        "z": "82cc831b154f3133",
        "name": "API call to Analyse Parameters Rules File",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost/rulesrepo/stringsToRules?DEBUG=true",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-JBID",
                "valueType": "other",
                "valueValue": "kapoo"
            },
            {
                "keyType": "other",
                "keyValue": "X-API-KEY",
                "valueType": "other",
                "valueValue": "x5nDCpvGTkvHniq8wJ9m"
            }
        ],
        "x": 1040,
        "y": 420,
        "wires": [
            [
                "8302074bca046e52",
                "a53fbc532450d88c",
                "c370fdc0adea4b18",
                "634a65c934af51b3",
                "62671df4cfe27264",
                "6c832fce46c1bafb",
                "a6cace27ff79a8fb"
            ]
        ]
    },
    {
        "id": "5cfa292979246c14",
        "type": "ui_table",
        "z": "82cc831b154f3133",
        "group": "5c07c02344a2bd3d",
        "name": "1.0 CSV Import Parameters File",
        "order": 1,
        "width": 24,
        "height": 5,
        "columns": [
            {
                "field": "key",
                "title": "Row",
                "width": "80",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "SECTOR/TRADE",
                "title": "SECTOR/TRADE",
                "width": "80",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "NAICS",
                "title": "NAICS",
                "width": "40%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Short Condition",
                "title": "Message",
                "width": "30%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "CONDITION",
                "title": "CONDITION",
                "width": "30%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "DESCRIPTION",
                "title": "DESCRIPTION",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "UNIT TYPE",
                "title": "UNIT TYPE",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "TOTAL",
                "title": "",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 990,
        "y": 80,
        "wires": []
    },
    {
        "id": "4440c71e.f88f18",
        "type": "ui_table",
        "z": "82cc831b154f3133",
        "group": "1f48566b.e8958a",
        "name": "2. Processed Pre-Rule",
        "order": 1,
        "width": 17,
        "height": 5,
        "columns": [
            {
                "field": "key",
                "title": "Row",
                "width": "80",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "conditionstring",
                "title": "Condition",
                "width": "40%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "message",
                "title": "Message",
                "width": "30%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "actionString",
                "title": "Action",
                "width": "30%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1300,
        "y": 180,
        "wires": []
    },
    {
        "id": "7deb55a4c358e093",
        "type": "ui_table",
        "z": "82cc831b154f3133",
        "group": "18a5a593fcd64912",
        "name": "3. Processed Rules",
        "order": 1,
        "width": 24,
        "height": 5,
        "columns": [
            {
                "field": "rule.event.ruleId",
                "title": "Row",
                "width": "80",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "conditionstring",
                "title": "Condition",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "actiontring",
                "title": "Action",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "output.success",
                "title": "Success",
                "width": "",
                "align": "left",
                "formatter": "tickCross",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "output.message",
                "title": "Error Message",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "output.value",
                "title": "Condition Value",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "JSON.stringify(output)",
                "title": "Output",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1710,
        "y": 500,
        "wires": []
    },
    {
        "id": "8302074bca046e52",
        "type": "change",
        "z": "82cc831b154f3133",
        "name": "Results from rules compilation",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.results",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1430,
        "y": 500,
        "wires": [
            [
                "7deb55a4c358e093"
            ]
        ]
    },
    {
        "id": "a53fbc532450d88c",
        "type": "change",
        "z": "82cc831b154f3133",
        "name": "Errors in condition from compilation",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.conditionError",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1440,
        "y": 560,
        "wires": [
            [
                "10cad444a2f23d2e"
            ]
        ]
    },
    {
        "id": "10cad444a2f23d2e",
        "type": "ui_table",
        "z": "82cc831b154f3133",
        "group": "18a5a593fcd64912",
        "name": "3.1. Condition Errors",
        "order": 4,
        "width": 24,
        "height": 3,
        "columns": [
            {
                "field": "ruleId",
                "title": "Row",
                "width": "80",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "message",
                "title": "Error Message",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "expression",
                "title": "Condition",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1720,
        "y": 560,
        "wires": []
    },
    {
        "id": "c370fdc0adea4b18",
        "type": "change",
        "z": "82cc831b154f3133",
        "name": "Facts Needed from compilation",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.factsNeededNameValue",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1430,
        "y": 620,
        "wires": [
            [
                "2451d69dcbe26c12"
            ]
        ]
    },
    {
        "id": "2451d69dcbe26c12",
        "type": "ui_table",
        "z": "82cc831b154f3133",
        "group": "18a5a593fcd64912",
        "name": "3.2. Facts Needed",
        "order": 5,
        "width": 24,
        "height": 2,
        "columns": [
            {
                "field": "name",
                "title": "Row",
                "width": "80",
                "align": "left",
                "formatter": "rownum",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "name",
                "title": "Name",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "value",
                "title": "Value",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1710,
        "y": 620,
        "wires": []
    },
    {
        "id": "a2cbb8c5837a6f57",
        "type": "function",
        "z": "82cc831b154f3133",
        "name": "Add Key to the csv rows",
        "func": "\n\nmsg.payload = msg.payload.map((p, k) => { return { ...p, ...{ key: k+2 } } })\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 80,
        "wires": [
            [
                "5cfa292979246c14"
            ]
        ]
    },
    {
        "id": "634a65c934af51b3",
        "type": "ui_gauge",
        "z": "82cc831b154f3133",
        "name": "Gauge for Errors",
        "group": "4060ccd3b1b979fd",
        "order": 2,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Errors",
        "label": "units",
        "format": "{{msg.payload.outputErrorCount}}",
        "min": 0,
        "max": "10",
        "colors": [
            "#a4110e",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 1440,
        "y": 280,
        "wires": []
    },
    {
        "id": "62671df4cfe27264",
        "type": "ui_gauge",
        "z": "82cc831b154f3133",
        "name": "Gauge for Rules",
        "group": "4060ccd3b1b979fd",
        "order": 1,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Rules",
        "label": "rules",
        "format": "{{msg.payload.results.length}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#3cb226",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 1440,
        "y": 340,
        "wires": []
    },
    {
        "id": "6c832fce46c1bafb",
        "type": "ui_gauge",
        "z": "82cc831b154f3133",
        "name": "Gauge for Params",
        "group": "4060ccd3b1b979fd",
        "order": 3,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Params",
        "label": "units",
        "format": "{{msg.payload.factsNeededNameValue.length}}",
        "min": 0,
        "max": "1000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 1430,
        "y": 400,
        "wires": []
    },
    {
        "id": "aea84a7e33de6f9b",
        "type": "function",
        "z": "82cc831b154f3133",
        "name": "Utility Functions",
        "func": "\n    // function to convert string of equations to JSON array\n    function stringToJSON (str){\n    \n\n        // function cleanupString(str) { return str.replace(/[^\\x20-\\x7E]/g, \"\").trim(); }\n    \n    let arr = str.split(\";\");\n    let json = [];\n    for (let i = 0; i < arr.length; i++) {\n        const equation = arr[i];\n        const [key, val] = equation.split(/(?<=^[^\\=]+)\\=/) //split(\"=\");\n\n        if (key)\n            json.push({ [cleanupString(key)]: cleanupString(val.replace(\" eq \", \"=\")) });\n    }\n    return json;\n}\n\nfunction cleanupString(str){ return str.replace(/[^\\x20-\\x7E]/g, \"\").trim(); }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "c7bbcb8e289cfe40",
        "type": "catch",
        "z": "82cc831b154f3133",
        "name": "Catch read file errors",
        "scope": null,
        "uncaught": false,
        "x": 220,
        "y": 520,
        "wires": [
            [
                "e5ae3f0c5950f841"
            ]
        ]
    },
    {
        "id": "260189c8c6ed366b",
        "type": "ui_toast",
        "z": "82cc831b154f3133",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 690,
        "y": 520,
        "wires": []
    },
    {
        "id": "e5ae3f0c5950f841",
        "type": "function",
        "z": "82cc831b154f3133",
        "name": "function 9",
        "func": "msg.payload = msg.error.message\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 600,
        "wires": [
            [
                "260189c8c6ed366b",
                "ba709063e175e036"
            ]
        ]
    },
    {
        "id": "ba709063e175e036",
        "type": "debug",
        "z": "82cc831b154f3133",
        "name": "debug 27",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 620,
        "wires": []
    },
    {
        "id": "da484b090d083d49",
        "type": "debug",
        "z": "82cc831b154f3133",
        "name": "debug 30",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 280,
        "wires": []
    },
    {
        "id": "a6cace27ff79a8fb",
        "type": "debug",
        "z": "82cc831b154f3133",
        "name": "debug 31",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1780,
        "y": 320,
        "wires": []
    },
    {
        "id": "17cb8d5c1c2dfc81",
        "type": "ui_template",
        "z": "8d5b6ce343b26ccf",
        "d": true,
        "group": "1d5401bf95a96f03",
        "name": "JOB Event Log ",
        "order": 2,
        "width": 24,
        "height": 5,
        "format": "<ul>\n    <li ng-repeat=\"x in msg.payload\">\n  \n        <font color=\"green\">{{x.topic}}</font>\n        <ul>\n            <li>{{x.payload}}</li>\n        </ul>\n    </li>\n</ul>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 980,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "5208228e9775e479",
        "type": "function",
        "z": "8d5b6ce343b26ccf",
        "name": "Save Events",
        "func": "// NK will set the submitted flow to null\n\n// flow.set(\"submitted\", null)\n// initialise the counter to 0 if it doesn't exist already\nvar dashboardLog = context.get('dashboardLog')|| [];\n\ndashboardLog.push(msg);\nif (dashboardLog.length > 20){\n    // Delete oldest message if > 20\n    dashboardLog.shift();\n    dashboardLog.length = 20;\n} \n\n\n// store the value back\ncontext.set('dashboardLog',dashboardLog);\n\n// make it part of the outgoing msg object\nmsg = {};\nmsg.payload = [...dashboardLog];\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 240,
        "wires": [
            [
                "20fe51011ee16859",
                "42849eb6f8ee9501"
            ]
        ]
    },
    {
        "id": "63eaa3d343dece84",
        "type": "ui_toast",
        "z": "8d5b6ce343b26ccf",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "QBES Output",
        "name": "",
        "x": 630,
        "y": 380,
        "wires": []
    },
    {
        "id": "fea303947b28f5ab",
        "type": "function",
        "z": "8d5b6ce343b26ccf",
        "name": "function 5",
        "func": "msg.payload = \"Job Completed at:\"+ new Date().toLocaleString()\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 380,
        "wires": [
            [
                "63eaa3d343dece84"
            ]
        ]
    },
    {
        "id": "3bd3c0ad26af3e70",
        "type": "ui_button",
        "z": "8d5b6ce343b26ccf",
        "name": "",
        "group": "1d5401bf95a96f03",
        "order": 3,
        "width": 8,
        "height": 1,
        "passthru": false,
        "label": "Reset Log",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-circle-o",
        "payload": "[]",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 390,
        "y": 180,
        "wires": [
            [
                "e5d60e2f52182631"
            ]
        ]
    },
    {
        "id": "e5d60e2f52182631",
        "type": "function",
        "z": "8d5b6ce343b26ccf",
        "name": "Clear context set dashboardLog to []",
        "func": "context.set('dashboardLog', []);\nmsg.payload = []\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 180,
        "wires": [
            [
                "17cb8d5c1c2dfc81",
                "20fe51011ee16859"
            ]
        ]
    },
    {
        "id": "20fe51011ee16859",
        "type": "ui_table",
        "z": "8d5b6ce343b26ccf",
        "group": "1d5401bf95a96f03",
        "name": "Output",
        "order": 1,
        "width": 24,
        "height": 7,
        "columns": [
            {
                "field": "rules.valid",
                "title": "#",
                "width": "",
                "align": "left",
                "formatter": "rownum",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "payload.wflid",
                "title": "WFID",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "payload.passed",
                "title": "Passed",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "payload.failed",
                "title": "Failed",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "payload.startTime",
                "title": "Start Time",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "payload.endTime",
                "title": "End Time",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 970,
        "y": 320,
        "wires": []
    },
    {
        "id": "42849eb6f8ee9501",
        "type": "debug",
        "z": "8d5b6ce343b26ccf",
        "name": "LOGGER OF ALL EVENTS",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 420,
        "wires": []
    },
    {
        "id": "df0f14404b9779f3",
        "type": "function",
        "z": "e4fb9739caef0397",
        "name": "Unit Balance Function",
        "func": "let record = msg.payload.csv[global.get(\"ptrModuleFacts\")];\n\nmsg.cache = global.get(\"lookupCache\").data.find(\n    item =>\n        item.module === \"balance\" &&\n        item.param === \"unit_balance\" &&\n        item.program === \"aies\" &&\n        item.unit_type === \"estab\"\n)?.json_values;\n\nfunction arrayRemove(arr, value) {\n    return arr.filter(function (ele) {\n        return ele != value;\n    });\n}\nfunction checkNaics(data, naics, rec_typ, rec_typop, rec_tax) {\n    let list = data['NAICS']\n    let unit = data['UNIT TYPE']\n    let typop = data['TYPOP']\n    let tax = data['TAXSTAT']\n    let rectyp = rec_typ\n    if (['20', '90', 20, 90].includes(rectyp)) {\n        rec_typ = 'ESTAB'\n    } else if (['30', 30].includes(rectyp)) {\n        rec_typ = 'KAU'\n    } else if ([10, '10'].includes(rectyp)) {\n        rec_typ = 'ENT'\n    }\n    if ([null, undefined, 'null', 'undefined'].includes(typop)) {\n        rec_typop = typop\n    }\n    if ([null, undefined, 'null', 'undefined'].includes(tax)) {\n        rec_tax = tax\n    }\n    // console.log(rec_tax, tax, rec_typop, typop)\n    if (rec_typ === unit && rec_tax === tax && rec_typop === typop) {\n        if ([\"ALL\", \"All\"].includes(list)) {\n            return (true);\n        } else {\n            list = list.replace(/ /g, \"\");\n            list = list.replace(/'/g, \"\");\n            var array = list.split(',')\n\n            if (array.find(r => naics.startsWith(r))) {\n                return (true);\n            } else {\n                return (false)\n            }\n        }\n    }\n}\n\nfunction sumRow(data) {\n    let sum = 0;\n    var keys = [];\n    for (var key in data) {\n        if (key.startsWith('DETAIL') && data[key] != null) {\n            let variable = data[key]\n            // console.log(variable)\n            if (!Number.isNaN(parseFloat(record[variable]))) {\n                sum = parseFloat(sum) + parseFloat(record[variable])\n            }\n            // else {\n            //     record[variable] = 0\n            // }\n            keys.push(variable)\n        }\n    }\n    return [sum, keys];\n}\n\nfunction raking(rectot, sum, keys, tol) {\n    if ((Math.abs(rectot - sum) / rectot) <= tol) {\n        keys.sort((a, b) => record[b] - record[a]);\n        let remainder = 0\n        let value = 'CAPEX_OTH_TOT_DVAL'\n        if (keys.includes(value)) {\n            keys = arrayRemove(keys, value)\n            rectot = rectot - record[value]\n            sum = sum - record[value]\n        }\n        for (let i = 0; i < keys.length; i++) {\n            let num1 = (rectot / sum) * parseFloat(record[keys[i]]) + remainder\n            let num2 = Math.round(num1)\n            remainder = num1 - num2\n            record[keys[i]] = num2\n        }\n    }\n}\n\nlet naics = record['NAICS_NUM']\nnaics = '' + naics\n\nconst RECORD_TYP_TXT = record['RECORD_TYP_TXT']\nlet TYPOP = record['TYPOP_WHSL_OLD_NUM']\nlet TAXSTAT = record['TAXSTAT']\n\nvar unitBalances = msg.cache['UNIT_BALANCE']\nunitBalances.sort((a, b) => (a.Priority != null ? a.Priority : Infinity) - (b.Priority != null ? b.Priority : Infinity))\n\nfor (let i in unitBalances) {\n    let unitBalance = unitBalances[i]\n    let priority = unitBalance.Priority\n    if (checkNaics(unitBalance, naics, RECORD_TYP_TXT, TYPOP, TAXSTAT)) {\n        let tot = unitBalance['TOTAL']\n        let rectot = 0\n        if ([100, '100'].includes(tot)) {\n            rectot = 100\n        } else {\n            if (!Number.isNaN(parseFloat(record[tot]))) {\n                rectot = parseFloat(record[tot])\n            }\n            // else {\n            //     record[tot] = 0\n            // }\n        }\n        let name_f = tot + '_F'\n        let [sum, keys] = sumRow(unitBalance)\n        sum = parseFloat(sum)\n        // let name = 'DET_' + tot\n        // record[name] = sum\n\n        // begin fail logic\n        if (rectot === sum && sum != 0) {\n            record['ACTION'] = 'Go To: Main Routing'\n            // global.set('action', 'Go To: Main Routing')\n        } else {\n            const tolerance = parseFloat(unitBalance['Tolerance'])\n            if (((sum > 0 && rectot <= 0) || (priority == 3)) && priority != 4) {\n                // } && (!(priority == 3 && tot == 'CAPEX_MACH_TOT_VAL'))) {\n                record[tot] = sum\n                if (record[name_f] && record[name_f].length >= 3) {\n                    record[name_f] = record[name_f].substring(0, 2) + 'L' + record[name_f].substring(3);\n                } else if (record[name_f] && record[name_f].length >= 2) {\n                    record[name_f] = record[name_f].substring(0, 2) + 'L';\n                } else if (record[name_f] && record[name_f].length >= 1) {\n                    record[name_f] = record[name_f].substring(0, 1) + ' L';\n                } else {\n                    record[name_f] = '  L';\n                }\n            } else if (sum == 0 && rectot > 0) {\n                // raking(rectot, sum, keys, tolerance)\n                for (let i = 0; i < keys.length; i++) {\n                    let det_f = keys[i] + '_F'\n                    if (record[det_f] && record[det_f].length >= 3) {\n                        record[det_f] = record[det_f].substring(0, 2) + 'X' + record[det_f].substring(3);\n                    } else if (record[det_f] && record[det_f].length >= 2) {\n                        record[det_f] = record[det_f].substring(0, 2) + 'X';\n                    } else if (record[det_f] && record[det_f].length >= 1) {\n                        record[det_f] = record[det_f].substring(0, 1) + ' X';\n                    } else {\n                        record[det_f] = '  X';\n                    }\n                }\n            } else if (sum > 0 && rectot > 0) {\n                // check range\n                if ((Math.abs(rectot - sum) / rectot) <= tolerance) {\n                    let flag_check1 = ''\n                    try {\n                        if (['P', 'C', 'A', 'S', 'O', 'E', 'F'].includes(record[name_f].substring(1, 2))) {\n                            flag_check1 = 'Yes'\n                        }\n                        if (!['P', 'C', 'A', 'S', 'O', 'E', 'F'].includes(record[name_f].substring(1, 2))) {\n                            flag_check1 = 'No'\n                        }\n                    } catch {\n                        console.log('flag column does not exist: ' + name_f)\n                    }\n                    let flag_check2 = ''\n                    for (let i = 0; i < keys.length; i++) {\n                        let det_f = keys[i] + '_F'\n                        try {\n                            if (['P', 'C', 'A', 'S', 'O', 'E', 'F'].includes(record[det_f].substring(1, 2))) {\n                                flag_check2 = 'Yes'\n                            }\n                            if (!['P', 'C', 'A', 'S', 'O', 'E', 'F'].includes(record[det_f].substring(1, 2))) {\n                                flag_check2 = 'No'\n                            }\n\n                        } catch {\n                            console.log('flag column does not exist: ' + det_f)\n                        }\n                    }\n                    if (flag_check2 == 'Yes' && priority != 4) {\n                        record[tot] = sum\n                        if (record[name_f] && record[name_f].length >= 3) {\n                            record[name_f] = record[name_f].substring(0, 2) + 'L' + record[name_f].substring(3);\n                        } else if (record[name_f] && record[name_f].length >= 2) {\n                            record[name_f] = record[name_f].substring(0, 2) + 'L';\n                        } else if (record[name_f] && record[name_f].length >= 1) {\n                            record[name_f] = record[name_f].substring(0, 1) + ' L';\n                        } else {\n                            record[name_f] = '  L';\n                        }\n                    } else {\n                        raking(rectot, sum, keys, tolerance)\n                        let value = 'CAPEX_OTH_TOT_DVAL'\n                        if (keys.includes(value)) {\n                            keys = arrayRemove(keys, value)\n                        }\n                        for (let i = 0; i < keys.length; i++) {\n                            let det_f = keys[i] + '_F'\n                            if (record[det_f] && record[det_f].length >= 3) {\n                                record[det_f] = record[det_f].substring(0, 2) + 'K' + record[det_f].substring(3);\n                            } else if (record[det_f] && record[det_f].length >= 2) {\n                                record[det_f] = record[det_f].substring(0, 2) + 'K';\n                            } else if (record[det_f] && record[det_f].length >= 1) {\n                                record[det_f] = record[det_f].substring(0, 1) + ' K';\n                            } else {\n                                record[det_f] = '  K';\n                            }\n                        }\n                    }\n                } else {\n                    // raking(rectot, sum, keys, tolerance)\n                    for (let i = 0; i < keys.length; i++) {\n                        let variable = keys[i]\n                        if (Number.isNaN(parseFloat(record[variable]))) {\n                            continue;\n                        }\n                        let det_f = keys[i] + '_F'\n                        if (record[det_f] && record[det_f].length >= 3) {\n                            record[det_f] = record[det_f].substring(0, 2) + 'X' + record[det_f].substring(3);\n                        } else if (record[det_f] && record[det_f].length >= 2) {\n                            record[det_f] = record[det_f].substring(0, 2) + 'X';\n                        } else if (record[det_f] && record[det_f].length >= 1) {\n                            record[det_f] = record[det_f].substring(0, 1) + ' X';\n                        } else {\n                            record[det_f] = '  X';\n                        }\n                    }\n                }\n            } else if (sum == 0 && rectot <= 0) {\n                if (record[name_f] && record[name_f].length >= 3) {\n                    record[name_f] = record[name_f].substring(0, 2) + 'X' + record[name_f].substring(3);\n                } else if (record[name_f] && record[name_f].length >= 2) {\n                    record[name_f] = record[name_f].substring(0, 2) + 'X';\n                } else if (record[name_f] && record[name_f].length >= 1) {\n                    record[name_f] = record[name_f].substring(0, 1) + ' X';\n                } else {\n                    record[name_f] = '  X';\n                }\n\n                for (let i = 0; i < keys.length; i++) {\n                    let det_f = keys[i] + '_F'\n                    if (record[det_f] && record[det_f].length >= 3) {\n                        record[det_f] = record[det_f].substring(0, 2) + 'X' + record[det_f].substring(3);\n                    } else if (record[det_f] && record[det_f].length >= 2) {\n                        record[det_f] = record[det_f].substring(0, 2) + 'X';\n                    } else if (record[det_f] && record[det_f].length >= 1) {\n                        record[det_f] = record[det_f].substring(0, 1) + ' X';\n                    } else {\n                        record[det_f] = '  X';\n                    }\n                }\n            } else {\n            }\n        }\n    }\n}\n\nrecord['ACTION'] = 'Go To: Main Routing'\n// global.set('action', 'Go To: Main Routing')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "bf3c163ded6ea7ce",
        "type": "function",
        "z": "56c26ff961720232",
        "name": "function 13",
        "func": "if (msg.payload.csv[0].RECORD_TYP === \"20\" || msg.payload.csv[0].RECORD_TYP === \"90\") {\n    if(msg.payload.csv[0].PROCESS_DIV_CODE = \"1\") {\n        msg.payload.csv[0].action = \"Go to: Derive MFG NAICS from NAPCS\"\n    } else {\n        msg.payload.csv[0].action = \"Go to: Classification\"\n    }\n} else {\n    msg.payload.csv[0].action = \"Go to: Classification\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            [
                "5012f87f52410a9d"
            ]
        ]
    },
    {
        "id": "5012f87f52410a9d",
        "type": "debug",
        "z": "56c26ff961720232",
        "name": "Derive NAICS output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 80,
        "wires": []
    },
    {
        "id": "fc793926435fab57",
        "type": "function",
        "z": "03552ca229e3a7a0",
        "name": "Unit balance",
        "func": "// node.status({ fill: \"green\", shape: \"dot\", text: \"processing\" });\n\n// // msg.payload.csv[0].module = \"_\"\n\n// // setTimeout(function () {\n//     node.status({ fill: \"gray\", shape: \"ring\", text: \"complete\" });\n// //     node.send(msg);\n// // }, 1000);\n\n// return msg;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "0d6b190eb1914ef7",
        "type": "status",
        "z": "03552ca229e3a7a0",
        "name": "",
        "scope": null,
        "x": 80,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "934d95644c951dfc",
        "type": "function",
        "z": "acd9862f30af144d",
        "name": "pv function",
        "func": "node.status({ fill: \"green\", shape: \"dot\", text: \"processing\" });\n\nmsg.payload.csv[0].module = \"PV\"\n\nsetTimeout(function () {\n    node.status({ fill: \"gray\", shape: \"ring\", text: \"complete\" });\n    node.send(msg);\n}, 1000);\n\n// return msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 180,
        "wires": [
            [
                "e8e5ce05e046c9d9"
            ]
        ]
    },
    {
        "id": "e8e5ce05e046c9d9",
        "type": "debug",
        "z": "acd9862f30af144d",
        "name": "debug pv",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 80,
        "wires": []
    },
    {
        "id": "4c82868047e24054",
        "type": "status",
        "z": "acd9862f30af144d",
        "name": "",
        "scope": null,
        "x": 80,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "a213ffa0737c4159",
        "type": "function",
        "z": "ae0faa518ff234d5",
        "name": "Derived Items function",
        "func": "let record_idx = global.get(\"ptrModuleFacts\");\nlet record = msg.payload.csv[record_idx];\nmsg.payload.csv[record_idx].TOPIC = 'Derived Items';\nif (\n    (String(record.RECORD_TYP_TXT) === \"20\" || String(record.RECORD_TYP_TXT) === \"90\")\n    &&\n    (String(record.REPORTING_TYP_ID) === \"SU\" || String(record.REPORTING_TYP_ID) === \"MU\")\n) {\n    if (String(record.NAICS_SECTOR_OLD_NUM) === \"31\") {\n        record.action = \"Go to: Derive MFG NAICS from NAPCS\"\n    } else {\n        record.action = \"Go to: Classification\"\n    }\n    return msg;\n}\nelse {\n    record.action = \"Go to: Classification\"\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "65577406809b25a9",
        "type": "status",
        "z": "ae0faa518ff234d5",
        "name": "",
        "scope": null,
        "x": 80,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "1983b2e5645df49c",
        "type": "function",
        "z": "473d6735cc46fccd",
        "name": "logical edits function",
        "func": "// node.status({ fill: \"green\", shape: \"dot\", text: \"processing\" });\n\n// const items = [\n//     {\n//         \"VARIABLE\": \"TYPOP_CODE_STAT  RCPT_COMSN_GSV_VAL RCPT_OWN_VAL \\nRCPT_TOT_VAL\",\n//         \"UNIT\": \"estab\",\n//         \"NAICS\": \"NAICS3='425'\",\n//         \"CONDITION \": \"TYPOP_CODE_STAT eq '4X' and RCPT_COMSN_GSV_VAL + RCPT_OWN_VAL ne RCPT_TOT_VAL\",\n//         \"ACTION\": \"set review flag\"\n//     },\n//     {\n//         \"VARIABLE\": \"TYPOP_CODE_STAT  RCPT_COMSN_GSV_VAL RCPT_COMSN_EARN_VAL RCPT_COMSN_AVG_RATE \",\n//         \"UNIT\": \"estab\",\n//         \"NAICS\": \"NAICS3='425'\",\n//         \"CONDITION \": \"TYPOP_CODE_STAT eq '4X' and RCPT_COMSN_GSV_VAL not in (0,.) and RCPT_COMSN_EARN_VAL in (0,.) and RCPT_COMSN_AVG_RATE not in (0,.)\",\n//         \"ACTION\": \"RCPT_COMSN_EARN_VAL = RCPT_COMSN_GSV_VAL * RCPT_COMSN_AVG_RATE\",\n//         \" DESCRIPTION\": \"if they reported a gross selling value from goods gold on commission, and an average commission rate, but didn't provide the amount of commissions (or set to 0), use GSV * average commission rate to derive commission\"\n//     },\n//     {\n//         \"VARIABLE\": \"TYPOP_CODE_STAT  RCPT_COMSN_GSV_VAL RCPT_COMSN_EARN_VAL RCPT_COMSN_AVG_RATE \",\n//         \"UNIT\": \"estab\",\n//         \"NAICS\": \"NAICS3='425'\",\n//         \"CONDITION \": \"TYPOP_CODE_STAT eq '4X' and RCPT_COMSN_GSV_VAL in (0,.) and RCPT_COMSN_EARN_VAL not in (0,.) and RCPT_COMSN_AVG_RATE not in (0,.)\",\n//         \"ACTION\": \"RCPT_COMSN_GSV_VAL = RCPT_COMSN_EARN_VAL \\/ RCPT_COMSN_AVG_RATE\",\n//         \" DESCRIPTION\": \"if they reported commissions and an average commission rate but no GSV, use the commission and commission rate to calculate GSV\"\n//     },\n//     {\n//         \"VARIABLE\": \"TYPOP_CODE_STAT\\nRCPT_OWN_VAL \\nRCPT_TOT_VAL RCPT_COMSN_GSV_VAL \\n RCPT_COMSN_EARN_VAL\",\n//         \"UNIT\": \"estab\",\n//         \"NAICS\": \"NAICS3='425'\",\n//         \"CONDITION \": \"TYPOP_CODE_STAT = '4X' and RCPT_OWN_VAL eq 0 and RCPT_COMSN_GSV_VAL ne RCPT_TOT_VAL and RCPT_COMSN_GSV_VAL < RCPT_TOT_VAL and RCPT_TOT_VAL eq sum(RCPT_COMSN_GSV_VAL, RCPT_COMSN_EARN_VAL)\",\n//         \"ACTION\": \"RCPT_TOT_VAL = RCPT_COMSN_GSV_VAL\",\n//         \" DESCRIPTION\": \"if no sales on own account (i.e., all commission-based) and GSV does not equal total sales (which, by definition can't happen, because GSV + OWN = total sales and if OWN = 0, then GSV = SALES) and SALES = the sum of GSV + COMMISSION, set sales to GSV because commissions should not be included in total sales\"\n//     },\n//     {\n//         \"VARIABLE\": \"TYPOP_CODE_STAT\\nRCPT_OWN_VAL \\nRCPT_TOT_VAL RCPT_COMSN_GSV_VAL \\n RCPT_COMSN_EARN_VAL\",\n//         \"UNIT\": \"estab\",\n//         \"NAICS\": \"NAICS3='425'\",\n//         \"CONDITION \": \"TYPOP_CODE_STAT = '4X' and RCPT_OWN_VAL eq 0 and RCPT_COMSN_GSV_VAL ne RCPT_TOT_VAL and RCPT_COMSN_GSV_VAL > RCPT_TOT_VAL and RCPT_TOT_VAL eq RCPT_COMSN_EARN_VAL\",\n//         \"ACTION\": \"RCPT_TOT_VAL = RCPT_COMSN_GSV_VAL\",\n//         \" DESCRIPTION\": \"if they reported sales as commissions, set sales = GSV\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_ECOMM_VAL\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"42', '44', '45'\",\n//         \"CONDITION \": \"RCPT_ECOMM_STAT eq 2 \",\n//         \"ACTION\": \"RCPT_ECOMM_VAL = 0\",\n//         \" DESCRIPTION\": \"if ecommerce status = 2 (no) then the value for e-commerce should be 0\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_ECOMM_VAL\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"42', '44', '45'\",\n//         \"CONDITION \": \"RCPT_ECOMM_VAL gt 0\",\n//         \"ACTION\": \"RCPT_ECOMM_STAT = 1\",\n//         \" DESCRIPTION\": \"if there's a reliable value for ecommerce, then the e-commerce status variable should be 1\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_MOTR_HAZRD_STAT\\nRCPT_MOTR_HAZRD_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3= '484 '\",\n//         \"CONDITION \": \"If  RCPT_MOTR_HAZRD_STAT =2 and RCPT_MOTR_HAZRD_PCT  = missing\",\n//         \"ACTION\": \" then RCPT_MOTR_HAZRD_PCT =0.\",\n//         \" DESCRIPTION\": \"IF the flag for hazardas materials is reported   and the NAICS is in 484 and the checkbox is a no and % - Hazardous Materials is equal to missing then set the % - Hazardous Materials to 0.\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_MOTR_HAZRD_STAT\\nRCPT_MOTR_HAZRD_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3= '484 '\",\n//         \"CONDITION \": \"If RCPT_MOTR_HAZRD_STAT = . and RCPT_MOTR_HAZRD_PCT  is >0 \",\n//         \"ACTION\": \"then RCPT_MOTR_HAZRD_STAT  =1\",\n//         \" DESCRIPTION\": \"IF the flag for hazardas materials is reported   and the NAICS is in 484 and the checkbox is a missing and % - Hazardous Materials is greater than zero then set the hazardous materials checkbox to yes.\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_MOTR_HAZRD_STAT\\nRCPT_MOTR_HAZRD_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3= '484 '\",\n//         \"CONDITION \": \"If  RCPT_MOTR_HAZRD_STAT = . or 1 and RCPT_MOTR_HAZRD_PCT  is =0 \",\n//         \"ACTION\": \"then RCPT_MOTR_HAZRD_STAT=2\",\n//         \" DESCRIPTION\": \"IF the flag for hazardas materials is reported  and the NAICS is in 484 and the checkbox is a missing or equal to yes  and % - Hazardous Materials is equal to zero then set the hazardous materials checkbox to no\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_MOTR_HAZRD_STAT\\nRCPT_MOTR_HAZRD_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3= '484 '\",\n//         \"CONDITION \": \"If RCPT_MOTR_HAZRD_STAT is 2 and RCPT_MOTR_HAZRD_PCT  is >0 \",\n//         \"ACTION\": \"then RCPT_MOTR_HAZRD_STAT= 1\",\n//         \" DESCRIPTION\": \"IF the flag for hazardas materials is reported   and the NAICS is in 484 and the checkbox is a  equal to no and % - Hazardous Materials is greater than zero then set the hazardous materials checkbox to yes\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_BILL_PAY_PCT\\nRCPT_BILL_OTHOP_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS6=‘561330’ \",\n//         \"CONDITION \": \"If  the sum of RCPT_BILL_PAY_PCT and RCPT_BILL_OTHOP_PCT =0 \",\n//         \"ACTION\": \"then RCPT_BILL_PAY_PCT and\\nRCPT_BILL_OTHOP_PCT =.\",\n//         \" DESCRIPTION\": \"If status is active and NAICS is 561330 and the sum of % of total gross billings x Payroll srvc and % - All other operating revenue equals zero then set them to missing\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_BUS_PCT\\nRCPT_LEISURE_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS6=‘561510’,’561599’,'561520'\",\n//         \"CONDITION \": \"If the sum of RCPT_BUS_PCT and RCPT_LEISURE_PCT =0 \",\n//         \"ACTION\": \"then RCPT_BUS_PCT and RCPT_LEISURE_PCT =.\",\n//         \" DESCRIPTION\": \"If status is active and NAICS is in 561510 or 561599 and the sum of % - Percent of Revenue from Business and % - Percent of Revenue from Leisure equals zero then set them to missing\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_NEWS_PRNT_PCT\\nRCPT_NEWS_ONLINE_PCT\\nRCPT_NEWS_OTH_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS5='51111' \",\n//         \"CONDITION \": \"If sum(RCPT_NEWS_PRNT_PCT,  RCPT_NEWS_ONLINE_PCT, and RCPT_NEWS_OTH_PCT) =0 \",\n//         \"ACTION\": \"then RCPT_NEWS_PRNT_PCT,  RCPT_NEWS_ONLINE_PCT, and RCPT_NEWS_OTH_PCT = .\",\n//         \" DESCRIPTION\": \"If the status is active and the NAICS is in '51111' and the sum of % Print subscriptions and sales,  % Internet subscriptions and sales and % Newspapers - Other media advertising equals zero, then set them to missing.\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_ADV_CLASS_PCT\\nRCPT_ADV_OTH_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS5='51111' \",\n//         \"CONDITION \": \"If the sum of RCPT_ADV_CLASS_PCT and RCPT_ADV_OTH_PCT =0 \",\n//         \"ACTION\": \"then RCPT_ADV_CLASS_PCT and RCPT_ADV_OTH_PCT =.\",\n//         \" DESCRIPTION\": \"If the status is active and the NAICS is in '51111' and the sum of % Print subscriptions and % Advertising Rev - Other Advertising equals zero, then set them to missing.\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_PER_PRNT_PCT\\nRCPT_PER_ONLINE_PCT\\nRCPT_PER_OTH_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS5='51112' \",\n//         \"CONDITION \": \"If sum(RCPT_PER_PRNT_PCT,  RCPT_PER_ONLINE_PCT, and RCPT_PER_OTH_PCT) =0 \",\n//         \"ACTION\": \"then RCPT_NEWS_PRNT_PCT,  RCPT_NEWS_ONLINE_PCT, and RCPT_NEWS_OTH_PCT =.\",\n//         \" DESCRIPTION\": \"If the status is active and the NAICS is in '51112' and the sum of % Print subscriptions and sales, % Internet subscriptions and sales, and % Other media advertising is equal to zero then set them to missing.\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_BOOK_PRNT_PCT\\nRCPT_BOOK_ONLINE_PCT\\nRCPT_BOOK_OTH_PCT\\n\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS5='51113' \",\n//         \"CONDITION \": \"If sum (RCPT_BOOK_PRNT_PCT,  RCPT_BOOK_ONLINE_PCT, and RCPT_BOOK_OTH_PCT) =0\",\n//         \"ACTION\": \"then RCPT_BOOK_PRNT_PCT,  RCPT_BOOK_ONLINE_PCT, and RCPT_BOOK_OTH_PCT =.\",\n//         \" DESCRIPTION\": \"If the status is active and the NAICS is in '51113' and the sum of % Books - Print,  % Books - Internet, and % Books - other media is equal to zero then set them to missing.\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_DIR_PRNT_PCT\\nRCPT_DIR_ONLINE_PCT\\nRCPT_DIR_OTH_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS5='51114' \",\n//         \"CONDITION \": \"If sum(RCPT_DIR_PRNT_PCT,  RCPT_DIR_ONLINE_PCT, and RCPT_DIR_OTH_PCT) =0 \",\n//         \"ACTION\": \"then RCPT_DIR_PRNT_PCT,  RCPT_DIR_ONLINE_PCT, and RCPT_DIR_OTH_PCT =.\",\n//         \" DESCRIPTION\": \"If the status is active and the NAICS is in '51114' and the sum of % Print subscriptions and sales, % Internet subscriptions and sales, and % Other media advertising is equal to zero then set them to missing.\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_SYSOFT_PERS_PCT\\nRCPT_SYSOFT_ENTR_PCT\\nRCPT_SYSOFT_MAIN_PCT\\nRCPT_SYSOFT_OTH_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS5='51121' \",\n//         \"CONDITION \": \"If sum(RCPT_SYSOFT_PERS_PCT, RCPT_SYSOFT_ENTR_PCT, RCPT_SYSOFT_MAIN_PCT, and RCPT_SYSOFT_OTH_PCT)=0 \",\n//         \"ACTION\": \"then RCPT_SYSOFT_PERS_PCT, RCPT_SYSOFT_ENTR_PCT, RCPT_SYSOFT_MAIN_PCT, and RCPT_SYSOFT_OTH_PCT =.\",\n//         \" DESCRIPTION\": \"If the status is active and the NAICS is in '51121' and the sum of % rev - Personal computer systems rev, % Enterprise-systems software revenue, % Mainframe computer-Systems software, and % of other systems software revenue is equal to zero then set them to missing.\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_APSOFT_PERS_PCT\\nRCPT_APSOFT_ENTR_PCT\\nRCPT_APSOFT_MAIN_PCT\\nRCPT_APSOFT_OTH_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS5='51121' \",\n//         \"CONDITION \": \"If the sum of RCPT_APSOFT_PERS_PCT, RCPT_APSOFT_ENTR_PCT, RCPT_APSOFT_MAIN_PCT, and RCPT_APSOFT_OTH_PCT =0 \",\n//         \"ACTION\": \"then  RCPT_APSOFT_PERS_PCT, RCPT_APSOFT_ENTR_PCT, RCPT_APSOFT_MAIN_PCT, and RCPT_APSOFT_OTH_PCT =.\",\n//         \" DESCRIPTION\": \"If the status is active and the NAICS is in '51121' and the sum of % rev - Personal computer systems rev, % Enterprise-systems software revenue, % Mainframe computer-Systems software, and % of other systems software revenue is equal to zero then set them to missing.\"\n//     },\n//     {\n//         \"VARIABLE\": \"INV_STAT\\nINV_CY_GOODS_TOT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3='511','512'\",\n//         \"CONDITION \": \"If and INV_STAT =2 and INV_CY_GOODS_TOT_DVAL = .\",\n//         \"ACTION\": \"then INV_CY_GOODS_TOT_DVAL =0\",\n//         \" DESCRIPTION\": \"If NAICS in 511 or 512 and the flag for Total inventories is reported    and the inventory checkbox is equal to no and the total inventories is missing then set the inventories equal to zero. \"\n//     },\n//     {\n//         \"VARIABLE\": \"INV_STAT\\nINV_CY_GOODS_TOT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3='511','512'\",\n//         \"CONDITION \": \"If Substr(RECORD_NAICS_NUM,1,3) in ('511','512')  and INV_STAT =. and INV_CY_GOODS_TOT is >0 \",\n//         \"ACTION\": \"then INV_STAT =1\",\n//         \" DESCRIPTION\": \"If NAICS in 511 or 512 and the flag for Total inventories is reported   and the inventory checkbox is missing and the total inventories is greater than zero, then set the inventories checkbox to yes. \"\n//     },\n//     {\n//         \"VARIABLE\": \"INV_STAT\\nINV_CY_GOODS_TOT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3='511','512'\",\n//         \"CONDITION \": \"If Substr(RECORD_NAICS_NUM,1,3) in ('511','512') and INV_STAT = . or = 1  and INV_CY_GOODS_TOT is =0 \",\n//         \"ACTION\": \"then INV_STAT = 2\",\n//         \" DESCRIPTION\": \"If NAICS in 511 or 512 and the flag for Total inventories is reported   the inventory checkbox is missing or equal to yes and the total inventories is equal to zero, then set the inventories checkbox to no.\"\n//     },\n//     {\n//         \"VARIABLE\": \"INV_STAT\\nINV_CY_GOODS_TOT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3='511','512'\",\n//         \"CONDITION \": \"If Substr(RECORD_NAICS_NUM,1,3) in ('511','512')  and INV_STAT = 2  and INV_CY_GOODS_TOT is > 0 \",\n//         \"ACTION\": \"then INV_STAT =1\",\n//         \" DESCRIPTION\": \"If NAICS in 511 or 512 and the flag for Total inventories is is reported   , and the inventory checkbox is equal to no and the total inventories is freater than zero, then set the inventories checkbox to yes.\"\n//     },\n//     {\n//         \"VARIABLE\": \"EXPS_EHR_STAT\\nEXPS_EHR_VAL\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS2='62' and NAICS3 \\n<> ('624') \",\n//         \"CONDITION \": \"If EXPS_EHR_VAL ne . and EXPS_EHR_STAT =( . or 2) and EXPS_EHR_VAL is >0 \",\n//         \"ACTION\": \"then EXPS_EHR_STAT= 1\",\n//         \" DESCRIPTION\": \"If the NAICS is in 62, but no in 624, and the flag for Electronic health record expenses is equal is reported   and the electronic health records checkbox is equal to no and the Electronic health records expenses is greater than zero, then set the electronic health records checkbox to yes.\"\n//     },\n//     {\n//         \"VARIABLE\": \"EXPS_EHR_STAT \\nEXPS_EHR_VAL\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS2='62' and NAICS3 \\n<> ('624') \",\n//         \"CONDITION \": \"If EXPS_EHR_VAL ne . and EXPS_EHR_STAT = (. or 1) and EXPS_EHR_VAL is =0\",\n//         \"ACTION\": \"then   EXPS_EHR_STAT = 2\",\n//         \" DESCRIPTION\": \"If the NAICS is in 62, but no in 624, and the flag for Electronic health record expenses is reported   and the electronic health records checkbox is equal to yes  and the Electronic health records expenses is equal to zero, then set the electronic health records checkbox to no.\"\n//     },\n//     {\n//         \"VARIABLE\": \"EXPS_EHR_STAT \\nEXPS_EHR_VAL\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS2='62' and NAICS3 \\n<> '624'\",\n//         \"CONDITION \": \"If EXPS_EHR_STAT  ne . and EXPS_EHR_STAT =  2  and EXPS_EHR_VAL is =.\",\n//         \"ACTION\": \"then EXPS_EHR_VAL is = 0\",\n//         \" DESCRIPTION\": \"If the NAICS is in 62, but no in 624, and the flag for Electronic health record expenses is reported   and the electronic health records checkbox is equal to no  and the Electronic health records expenses is missing, then set the electronic health records to zero.\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_ECOMM_ES_VAL\\n RCPT_ECOMM_WEB_STAT  RCPT_ECOMM_THRD_STAT  RCPT_ECOMM_OTH_STAT  \",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS2='22','48','49,'51','52','53','54','55','56,'61','62','71','72,'81'\",\n//         \"CONDITION \": \"If RCPT_ECOMM_ES_VAL ne . and RCPT_ECOMM_WEB_STAT  = (. or 1) and RCPT_ECOMM_THRD_STAT =( . or 1) and RCPT_ECOMM_OTH_STAT = (. or 1 )and  RCPT_ECOMM_ES_VAL =0 \",\n//         \"ACTION\": \"then RCPT_ECOMM_WEB_STAT  = 2 RCPT_ECOMM_THRD_STAT = 2 RCPT_ECOMM_OTH_STAT  = 2\",\n//         \" DESCRIPTION\": \"If the e-commerce flag is reported   or the e-commerce percent flag is reported   and Electronic revenue- company website is missing or yes,  Electronic revenue- third party website is missing or yes, Electronic revenue- electronic system, and e-commerce is zero and the e-commerce percent equals zero then set - company website is missing or yes,  Electronic revenue- third party website is missing or yes, Electronic revenue- electronic system to no.\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_ECOMM_ES_VAL\\n RCPT_ECOMM_WEB_STAT  RCPT_ECOMM_THRD_STAT  RCPT_ECOMM_OTH_STAT  \",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS2='22','48','49,'51','52','53','54','55','56,'61','62','71','72,'81'\",\n//         \"CONDITION \": \"If RCPT_ECOMM_WEB_STAT = 2, RCPT_ECOMM_THRD_STAT  = 2, and RCPT_ECOMM_OTH_STAT  = 2 and RCPT_ECOMM_ES_VAL = . \",\n//         \"ACTION\": \"then RCPT_ECOMM_ES_VAL =0.\",\n//         \" DESCRIPTION\": \"If the Electronic revenue- company website flag is reported   and the Electronic revenue- third party website is reported   , Electronic revenue- electronic system, and is reported   and Electronic revenue- company website,  Electronic revenue- third party website, Electronic revenue- electronic system all are set to no and e-commerce is missing and ecommerce percent is missing or zero then set e-commerce to zero.\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_ECOMM_ES_VAL\\n RCPT_ECOMM_WEB_STAT  RCPT_ECOMM_THRD_STAT  RCPT_ECOMM_OTH_STAT  \",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS2='22','48','49,'51','52','53','54','55','56,'61','62','71','72,'81'\",\n//         \"CONDITION \": \"If RCPT_ECOMM_ES_VAL = . and RCPT_ECOMM_WEB_STAT  = . and RCPT_ECOMM_THRD_STAT = . and RCPT_ECOMM_OTH_STAT = . and  RCPT_ECOMM_ES_VAL  is >0 \",\n//         \"ACTION\": \"then RCPT_ECOMM_WEB_STAT  =1\",\n//         \" DESCRIPTION\": \"If e-commerce flag is reported   or e-commerce percent is reported   and Electronic revenue- company website,  Electronic revenue- third party website, Electronic revenue- electronic system all are missing and e-commerce is greater than zero or percent e-commerce is greater than zero then set Electronic revenue- company website to yes. \"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_ECOMM_ES_VAL\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS2='22','48','49,'51','52','53','54','55','56,'61','62','71','72,'81'\",\n//         \"CONDITION \": \"If RCPT_ECOMM_ES_VAL ne . and RCPT_ECOMM_WEB_STAT  is 2 and RCPT_ECOMM_THRD_STAT is 2, and RCPT_ECOMM_OTH_STAT is 2 and  RCPT_ECOMM_ES_VAL  is >0 \",\n//         \"ACTION\": \"then RCPT_ECOMM_WEB_STAT  =1\",\n//         \" DESCRIPTION\": \"If e-commerce flag  is reported   or e-commerce percent is reported   and Electronic revenue- company website,  Electronic revenue- third party website,  and Electronic revenue- electronic system all are no  and e-commerce is greater than zero or percent e-commerce is greater than zero then set Electronic revenue- company website to yes. \"\n//     },\n//     {\n//         \"VARIABLE\": \"EXPS_TOT_VAL\",\n//         \"UNIT\": \"KAU\",\n//         \"CONDITION \": \"If _qss00 in ('Y') and E190000 = . AND EQEXPD00 = 0 AND EQEXP00 > 0\",\n//         \"ACTION\": \" then E190000 = eqexp00\",\n//         \" DESCRIPTION\": \"If Total operating expenses is missing and QSS number of quarters imputed is equal to zero, and qss espense is greater than zero, then set total operating expense to qss expense\"\n//     },\n//     {\n//         \"VARIABLE\": \"TAX_EXEMPT_STAT\",\n//         \"UNIT\": \"KAU\",\n//         \"CONDITION \": \"If substr(RECORD_NAICS_NUM,1,5) = '51912' and TAX_EXEMPT_STAT = 1\",\n//         \"ACTION\": \"then NONPROFT_STAT=1\",\n//         \" DESCRIPTION\": \"If NAICS in 51912 and tax recode is equal to exempt, then set not for profit basses to 1.\"\n//     },\n//     {\n//         \"VARIABLE\": \"CPT_CUST_RES_PCT \\nCPT_CUST_NORES_PCT \",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS2='22'\",\n//         \"CONDITION \": \"If sum(CPT_CUST_RES_PCT,CPT_CUST_NORES_PCT) = 0\",\n//         \"ACTION\": \"then CPT_CUST_RES_PCT = . CPT_CUST_NORES_PCT = .\",\n//         \" DESCRIPTION\": \"If NAICS in sector 22 and is active, and the sum of residential customers and non-residential customers is zero then set residential customers and non-residential customers to missing\"\n//     },\n//     {\n//         \"VARIABLE\": \"CAPEX_OTH_NEW_VAL                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       CAPEX_OTH_USED_VAL                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 CAPEX_OTH_TOT\",\n//         \"UNIT\": \"industry\",\n//         \"CONDITION \": \"Value reported in other\",\n//         \"ACTION\": \"set referral flag for analyst review\",\n//         \" DESCRIPTION\": \"analyst reclassify value in other to structures or equipment\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_MOTR_AGR_PCT  RCPT_MOTR_GRAIN_PCT  RCPT_MOTR_STONE_PCT RCPT_MOTR_FUEL_PCT  RCPT_MOTR_PHARM_PCT  RCPT_MOTR_WOOD_PCT  RCPT_MOTR_METAL_PCT  RCPT_MOTR_ELECT_PCT  RCPT_MOTR_USEDGD_PCT  RCPT_MOTR_NEWFRN_PCT  RCPT_MOTR_OTH_PCT \",\n//         \"UNIT\": \"industry\",\n//         \"NAICS\": \"NAICS3='484'\",\n//         \"CONDITION \": \"If Sum(RCPT_MOTR_AGR_PCT,RCPT_MOTR_GRAIN_PCT,RCPT_MOTR_STONE_PCT,RCPT_MOTR_FUEL_PCT,RCPT_MOTR_PHARM_PCT,RCPT_MOTR_WOOD_PCT,RCPT_MOTR_METAL_PCT,RCPT_MOTR_ELECT_PCT, RCPT_MOTR_USEDGD_PCT,RCPT_MOTR_NEWFRN_PCT,RCPT_MOTR_OTH_PCT)=0\",\n//         \"ACTION\": \"then RCPT_MOTR_AGR_PCT = .; RCPT_MOTR_GRAIN_PCT = .; RCPT_MOTR_STONE_PCT = .; RCPT_MOTR_FUEL_PCT = .; RCPT_MOTR_PHARM_PCT = .; RCPT_MOTR_WOOD_PCT = .; RCPT_MOTR_METAL_PCT = .; RCPT_MOTR_ELECT_PCT = .; RCPT_MOTR_USEDGD_PCT = .; RCPT_MOTR_NEWFRN_PCT = .; RCPT_MOTR_OTH_PCT = .;\",\n//         \" DESCRIPTION\": \"If the NAICS is in 484 and active, and the sum of % - Agricultural Products, % - Grains, Alcohol, Tobacco Products, % - Stone, Nonmetallic minerals, % - Coal and Petroleum Products, % - Coal and Petroleum Products, % - Pharmaceutical and chemical products, % - Wood Products, Textiles, Leather, % - Electronic & Precision Instruments,% - Base Metal and Machinery % - Used household and office goods, % - New Furniture & Misc. Prods is zero, then set all to missing\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_CUST_BUS_PCT RCPT_CUST_IND_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS6=('517311','517312','517911', 519130')\",\n//         \"CONDITION \": \"If sum(RCPT_CUST_BUS_PCT,RCPT_CUST_IND_PCT)=0\",\n//         \"ACTION\": \"then RCPT_CUST_BUS_PCT=.; RCPT_CUST_IND_PCT=.;\",\n//         \" DESCRIPTION\": \"If the status is active and the NAICS is in  517110, 517210, 517911, or 519130 and the sum of % Household revenue and % of revenue by Government & Businesses equal zero then set them to missing.\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_CUST_LOCTEL_BUS_PCT RCPT_CUST_LOCTEL_IND_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS6='517311' \",\n//         \"CONDITION \": \"If sum(RCPT_CUST_LOCTEL_BUS_PCT,RCPT_CUST_LOCTEL_IND_PCT)=0\",\n//         \"ACTION\": \"then RCPT_CUST_LOCTEL_BUS_PCT=.; RCPT_CUST_LOCTEL_IND_PCT=.;\",\n//         \" DESCRIPTION\": \"If the status is active and the NIACS is in 51711 and the sum of % Household - local telephony and Fixed local Telephone - Gov & Business is equal to zero set them to mising.\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_CUST_LNGTEL_BUS_PCT RCPT_CUST_LNGTEL_IND_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS6='517311' \",\n//         \"CONDITION \": \"If sum(RCPT_CUST_LNGTEL_BUS_PCT, RCPT_CUST_LNGTEL_IND_PCT)=0\",\n//         \"ACTION\": \"then RCPT_CUST_LNGTEL_BUS_PCT=.; RCPT_CUST_LNGTEL_IND_PCT=.;\",\n//         \" DESCRIPTION\": \"If the status is active and the NIACS is in 51711 and the sum of  % Fixed Long dist - Gov & Business and % Household-long distance telephony is equal to zero set them to mising.\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_CUST_SUBLIN_BUS_PCT RCPT_CUST_SUBLIN_IND_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS6='517311' \",\n//         \"CONDITION \": \"If sum(RCPT_CUST_SUBLIN_BUS_PCT, RCPT_CUST_SUBLIN_IND_PCT)=0\",\n//         \"ACTION\": \"then RCPT_CUST_SUBLIN_BUS_PCT=.; RCPT_CUST_SUBLIN_IND_PCT=.;\",\n//         \" DESCRIPTION\": \"If the status is active and the NIACS is in 51711 and the sum of  % Subscriber line charges - Household and % Subscriber Line - Gov & Business is equal to zero set them to mising.\"\n//     },\n//     {\n//         \"VARIABLE\": \"INV_STAT\\nTRUCKTRAC_NUM_TOT_DVAL TRAILER_NUM_TOT_DVAL\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3='484'\",\n//         \"CONDITION \": \"If INV_STAT = . and (TRUCK_NUM_TOT_DVAL > 0 or TRUCKTRAC_NUM_TOT_DVAL > 0 or TRAILER_NUM_TOT_DVAL > 0)\",\n//         \"ACTION\": \"then INV_STAT = 1;\",\n//         \" DESCRIPTION\": \"If the flag for total truck inventory, total truck-tractor inventory, or total tralers inventory is reported  (R,A,E,or O) and the NAICS is in 484, and the inventory checkbox is missing and the total truck inventory, total truck-tractor inventory, or total tralers inventory is greater than zero, then set the inventory checkbox to yes. \"\n//     },\n//     {\n//         \"VARIABLE\": \"INV_STAT\\nTRUCKTRAC_NUM_TOT_DVAL TRAILER_NUM_TOT_DVAL\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3='484'\",\n//         \"CONDITION \": \"If INV_STAT in (.,1) and TRUCK_NUM_TOT_DVAL = 0 and TRUCKTRAC_NUM_TOT_DVAL = 0 and TRAILER_NUM_TOT_DVAL = 0\",\n//         \"ACTION\": \"then INV_STAT = 2;\",\n//         \" DESCRIPTION\": \"If the flag for total truck inventory, total truck-tractor inventory, or total tralers inventory is reported  (R,A,E,or O)and the NAICS is in 484, and the inventory checkbox is equal to yes and the total truck inventory, total truck-tractor inventory, or total tralers inventory is equal to zero, then set the inventory checkbox to no.\"\n//     },\n//     {\n//         \"VARIABLE\": \"INV_STAT\\nTRUCKTRAC_NUM_TOT_DVAL TRAILER_NUM_TOT_DVAL\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3='484'\",\n//         \"CONDITION \": \"If INV_STAT = 2 and (TRUCK_NUM_TOT_DVAL > 0 or TRUCKTRAC_NUM_TOT_DVAL > 0 or TRAILER_NUM_TOT_DVAL > 0)\",\n//         \"ACTION\": \"then INV_STAT = 1;\",\n//         \" DESCRIPTION\": \"If the flag for total truck inventory, total truck-tractor inventory, or total tralers inventory isreported (R,A,E,or O)and the NAICS is in 484, and the inventory checkbox is equal to no and the total truck inventory, total truck-tractor inventory, or total tralers inventory is greater than zero, then set the inventory checkbox to yes. \"\n//     },\n//     {\n//         \"VARIABLE\": \"HOTEL_OWN3RD_STAT RCPT_TOT_HOTEL_OWN3RD_VAL  RCPT_ECOMM_HOTEL_OWN3RD_VAL\\nEXPS_TOT_HOTEL_OWN3RD_VAL \",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS5='72111','72112'\",\n//         \"CONDITION \": \"If EXPS_TOT_HOTEL_OWN3RD_VAL <>2 and RCPT_TOT_HOTEL_OWN3RD_VAL=0 or RCPT_ECOMM_HOTEL_OWN3RD_VA=0  or EXPS_TOT_HOTEL_OWN3RD_VAL is >0\",\n//         \"ACTION\": \"then EXPS_TOT_HOTEL_OWN3RD_VAL =2\"\n//     },\n//     {\n//         \"VARIABLE\": \"HOTEL_OWN3RD_STAT RCPT_TOT_HOTEL_OWN3RD_VAL  RCPT_ECOMM_HOTEL_OWN3RD_VAL\\nEXPS_TOT_HOTEL_OWN3RD_VAL \",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS5='72111','72112'\",\n//         \"CONDITION \": \"If EXPS_TOT_HOTEL_OWN3RD_VAL <>1 and RCPT_TOT_HOTEL_OWN3RD_VAL > 0  or RCPT_ECOMM_HOTEL_OWN3RD_VAL is > 0  or EXPS_TOT_HOTEL_OWN3RD_VAL is >0 \",\n//         \"ACTION\": \"EXPS_TOT_HOTEL_OWN3RD_VAL=2\"\n//     },\n//     {\n//         \"VARIABLE\": \"HOTEL_OWN3RD_STAT RCPT_TOT_HOTEL_OWN3RD_VAL  RCPT_ECOMM_HOTEL_OWN3RD_VAL\\nEXPS_TOT_HOTEL_OWN3RD_VAL \",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS5='72111','72112'\",\n//         \"CONDITION \": \"If (HOTEL_OWN3RD_STAT = 2) AND (RCPT_TOT_HOTEL_OWN3RD_VAL = . AND  RCPT_ECOMM_HOTEL_OWN3RD_VAL = . AND EXPS_TOT_HOTEL_OWN3RD_VAL = .)\",\n//         \"ACTION\": \"then RCPT_TOT_HOTEL_OWN3RD_VAL = 0; RCPT_ECOMM_HOTEL_OWN3RD_VAL = 0; EXPS_TOT_HOTEL_OWN3RD_VAL = 0;\",\n//         \" DESCRIPTION\": \"If the NAICS is in 72111 or 72112 and the hotel management checkbox is set to no and hotel revenue of hotels managed, hotel e-commerce from hotels managed, and operating expense from hotels managed are all missing then set them all to zero. \"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_TELEMED_STAT RCPT_TELEMED_VAL  \",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3='621','622','623' AND NAICS4 <> ‘6215’,’6219’\",\n//         \"CONDITION \": \"If RCPT_TELEMED_STAT = . AND (RCPT_TELEMED_VAL > 0 \",\n//         \"ACTION\": \"then RCPT_TELEMED_STAT = 1;\",\n//         \" DESCRIPTION\": \"If the flag for Hospitals: Of 2020 total revenues reported, what was the dollar amount from telemedicine is reported (R,A,E,O)  or the flag for Hospitals: Of the total revenues reported, what was the percentage that was from telemedicine is reported (R,A,E,O)  and Hospitals: Did this receive revenues from telemedicine services in 2020 is missing and  total revenues reported, what was the dollar amount from telemedicine is greater than zero or Hospitals: Of the total revenues reported, what was the percentage that was from telemedicine is greater than zero then set Hospitals: Did this receive revenues from telemedicine services in 2020  to yes. \"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_TELEMED_STAT RCPT_TELEMED_VAL  \",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3='621','622','623' AND NAICS4 <> ‘6215’,’6219’\",\n//         \"CONDITION \": \"RCPT_TELEMED_STAT = (.,1) AND (RCPT_TELEMED_VAL = 0)\",\n//         \"ACTION\": \"then RCPT_TELEMED_STAT = 2;\",\n//         \" DESCRIPTION\": \"If the flag for Hospitals: Of 2020 total revenues reported, what was the dollar amount from telemedicine is reported (R,A,E,O)  or the flag for Hospitals: Of the total revenues reported, what was the percentage that was from telemedicine is reported (R,A,E,O)  and Hospitals: Did this receive revenues from telemedicine services in 2020 is missing or set to yes and  total revenues reported, what was the dollar amount from telemedicine is zero or Hospitals: Of the total revenues reported, what was the percentage that was from telemedicine is zero then set Hospitals: Did this receive revenues from telemedicine services in 2020  to no \"\n//     },\n//     {\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS6='721110','721120'\",\n//         \"ACTION\": \"then RCPT_ECOMM_ES_TOT_VAL=SUM(RCPT_TOT_VAL,RCPT_TOT_HOTEL_OWN3RD_VAL)\"\n//     },\n//     {\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS6='561330' \",\n//         \"ACTION\": \"then RCPTOT=RCPT_GROSSBILL_VAL\"\n//     },\n//     {\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS6='721110','721120'\",\n//         \"ACTION\": \"then RCPTOT=RCP_TOT_VAL_SUM+RCPT_TOT_HOTEL_OWN3RD_VAL\"\n//     },\n//     {\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3='621','622','623'\",\n//         \"CONDITION \": \"and _TXRCD00 <> 'E'\",\n//         \"ACTION\": \"then RCPT_NONOP_GIFTS_VAL=0\"\n//     },\n//     {\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3='621','622','623'\",\n//         \"CONDITION \": \"and _TXRCD00 <> 'E'\",\n//         \"ACTION\": \"then RCPT_NONOP_INVST_VAL=0\"\n//     }\n// ]\n\n// let csv = msg.payload.csv[0]\n\n// for (let i = 0; i < items.length; i++) {\n//     const item = items[i];\n\n//     if (item[\"NAICS\"]) {\n//         if (item[\"UNIT\"] == csv.UNIT) {\n//             if (item.CONDITION) {\n//                 csv.ACTION = item.ACTION\n//             }\n//         }\n//     }\n// }\n\n// msg.payload.csv[0].module = \"Logical Edits\"\n\n// setTimeout(function () {\n//     node.status({ fill: \"gray\", shape: \"ring\", text: \"complete\" });\n//     node.send(msg);\n// }, 1000);\n\n// // msg.payload.csv[0].RCPT_NONOP_GIFTS_VAL = 0\n\n// // return msg;\nconst cache = global.get(\"lookupCache\");\n// console.log({cache})\nif(cache){\nconst parameterData = cache.data[0]?.json_values || {}; \nconsole.log(437, {d:parameterData})\n\n// Get current record\nlet record = msg.payload.csv[global.get(\"ptrModuleFacts\")];\nconsole.log(441, {d: record})\n\n// Call Logical Edits\nconst getNAICSCode = () => {\n    switch (record['UNIT']) {\n        case 'ESTAB':\n            return record['NAICS_NUM'];\n        case 'KAU':\n            return record['KAU_NAICS'];\n        default:\n            return null; // No NAICS needed for company level\n    }\n};\n\nconst naicsCode = getNAICSCode();\nconsole.log(456, {d: naicsCode})\n\n// Use parameter file per NAICS to determine simple computations/definitions\nif (naicsCode && parameterData.NAICS === naicsCode) {\n    // Do necessary computations/edits based on the naicsCode and parameters from parameterData\n    // e.g.:\n    // record['SomeField'] = someFunctionBasedOnNAICS(naicsCode, parameterData);\n    record.ACTION = 'Go to Unit Balance';\n}\nelse{\n    // rerun  todo\n    record.ACTION = '- Logical Checks';\n}\n\n// // Check if all simple imputation is calculated\n// if (/* Some condition to determine if all simple imputation is calculated */) {\n//     msg.payload.action = 'Go to Unit Balance';\n// } else {\n//     // If not all simple imputation is calculated, do necessary steps here\n//     // e.g.:\n//     // msg.payload.action = 'Repeat Logical Edits';\n// }\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "6ada43c172923c7a",
        "type": "status",
        "z": "473d6735cc46fccd",
        "name": "",
        "scope": null,
        "x": 80,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "c3c10ef4a75096f2",
        "type": "change",
        "z": "473d6735cc46fccd",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.lookup",
                "pt": "msg",
                "to": "{\"moduleName\":\"logical_edits\",\"program\":\"aies\",\"unit_type\":\"estab\",\"params\":\"NAICS\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 60,
        "wires": [
            [
                "427ad72a7f80d910"
            ]
        ]
    },
    {
        "id": "427ad72a7f80d910",
        "type": "subflow:0be109393cb5f28a",
        "z": "473d6735cc46fccd",
        "name": "",
        "x": 730,
        "y": 60,
        "wires": [
            [
                "1983b2e5645df49c"
            ]
        ]
    },
    {
        "id": "b434c43de5c1d938",
        "type": "switch",
        "z": "fd9469a0efbb8a77",
        "name": "Failure Present?",
        "property": "payload.csv[0].failure",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 200,
        "y": 220,
        "wires": [
            [
                "d66fac8c4c3bb78d"
            ],
            [
                "9a55ae0518d49324"
            ]
        ]
    },
    {
        "id": "a050c1e9c09bb79b",
        "type": "debug",
        "z": "fd9469a0efbb8a77",
        "name": "Go To: Company Additivity Check",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 80,
        "wires": []
    },
    {
        "id": "d66fac8c4c3bb78d",
        "type": "function",
        "z": "fd9469a0efbb8a77",
        "name": "Failure is not present",
        "func": "msg.payload.csv[0].action = \"Go To: Company Additivity Check\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 80,
        "wires": [
            [
                "a050c1e9c09bb79b",
                "e2d5eecae0459e01"
            ]
        ]
    },
    {
        "id": "9a55ae0518d49324",
        "type": "switch",
        "z": "fd9469a0efbb8a77",
        "name": "SUM(DET) = 0 || SUM(DET) > 0",
        "property": "payload.csv[0][\"SUM(DET)\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 400,
        "wires": [
            [
                "9b1962c64c2c07e2"
            ],
            [
                "4cc6035382f3ea7a"
            ]
        ]
    },
    {
        "id": "9b1962c64c2c07e2",
        "type": "switch",
        "z": "fd9469a0efbb8a77",
        "name": "SUM(DET)=0 && [TOT = 0 || TOT >0]",
        "property": "payload.csv[0][\"TOT\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 810,
        "y": 320,
        "wires": [
            [
                "6053781493dfb0b1"
            ],
            [
                "6317702816aa4ba2"
            ]
        ]
    },
    {
        "id": "4cc6035382f3ea7a",
        "type": "switch",
        "z": "fd9469a0efbb8a77",
        "name": "SUM(DET)=0 && [TOT = 0 || TOT >0]",
        "property": "payload.csv[0][\"TOT\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 810,
        "y": 480,
        "wires": [
            [
                "c2fe26e13a6e3760"
            ],
            [
                "2d18e26adfa1b919"
            ]
        ]
    },
    {
        "id": "c2fe26e13a6e3760",
        "type": "function",
        "z": "fd9469a0efbb8a77",
        "name": "SUM(DET)>0 and TOT=0",
        "func": "msg.payload.csv[0][\"TOT\"] = msg.payload.csv[0][\"SUM(DET)\"]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 460,
        "wires": [
            [
                "460a791591a2945d",
                "e2d5eecae0459e01"
            ]
        ]
    },
    {
        "id": "6317702816aa4ba2",
        "type": "function",
        "z": "fd9469a0efbb8a77",
        "name": "SUM(DET)=0 and TOT>0",
        "func": "msg.payload.csv[0].action = \"Proate data based on X(DET) = TOT\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 340,
        "wires": [
            [
                "29bfadfdb81eb75c",
                "e2d5eecae0459e01"
            ]
        ]
    },
    {
        "id": "6053781493dfb0b1",
        "type": "function",
        "z": "fd9469a0efbb8a77",
        "name": "SUM(DET)=0 and TOT=0",
        "func": "msg.payload.csv[0].action = \"Impute?\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 300,
        "wires": [
            [
                "398160dcf99fe49a",
                "e2d5eecae0459e01"
            ]
        ]
    },
    {
        "id": "2d18e26adfa1b919",
        "type": "function",
        "z": "fd9469a0efbb8a77",
        "name": "SUM(DET)>0 and TOT>0",
        "func": "msg.payload.csv[0][\"ESMD\"] = msg.payload.csv[0][\"SUM(DET)\"] / msg.payload.csv[0][\"TOT\"]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 580,
        "wires": [
            [
                "47685bf5fb1ed88c"
            ]
        ]
    },
    {
        "id": "398160dcf99fe49a",
        "type": "debug",
        "z": "fd9469a0efbb8a77",
        "name": "balance output 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 300,
        "wires": []
    },
    {
        "id": "29bfadfdb81eb75c",
        "type": "debug",
        "z": "fd9469a0efbb8a77",
        "name": "balance output 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 340,
        "wires": []
    },
    {
        "id": "460a791591a2945d",
        "type": "debug",
        "z": "fd9469a0efbb8a77",
        "name": "balance output 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 460,
        "wires": []
    },
    {
        "id": "47685bf5fb1ed88c",
        "type": "switch",
        "z": "fd9469a0efbb8a77",
        "name": "msg.payload[\"ESMD\"]",
        "property": "payload.csv[0][\"ESMD\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "btwn",
                "v": "0.8",
                "vt": "num",
                "v2": "1.2",
                "v2t": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1320,
        "y": 580,
        "wires": [
            [
                "466e6266875d4f84"
            ],
            [
                "1523c9203f9b1679"
            ]
        ]
    },
    {
        "id": "466e6266875d4f84",
        "type": "function",
        "z": "fd9469a0efbb8a77",
        "name": "Set TOTAL = SUM(DET)",
        "func": "msg.payload.csv[0][\"TOTAL\"] = msg.payload.csv[0][\"SUM(DET)\"]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 540,
        "wires": [
            [
                "49177b2204272b93",
                "e2d5eecae0459e01"
            ]
        ]
    },
    {
        "id": "1523c9203f9b1679",
        "type": "switch",
        "z": "fd9469a0efbb8a77",
        "name": "INDP(ind and geo)>1?",
        "property": "payload.csv[0].INDP",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1560,
        "y": 640,
        "wires": [
            [
                "a80c397a4f5c5239"
            ],
            [
                "ce5bb9d4308895db"
            ]
        ]
    },
    {
        "id": "49177b2204272b93",
        "type": "debug",
        "z": "fd9469a0efbb8a77",
        "name": "balance output 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 540,
        "wires": []
    },
    {
        "id": "1d6bdfbeb72fbec3",
        "type": "debug",
        "z": "fd9469a0efbb8a77",
        "name": "balance output 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2010,
        "y": 620,
        "wires": []
    },
    {
        "id": "f0325560707bbd38",
        "type": "debug",
        "z": "fd9469a0efbb8a77",
        "name": "balance output 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1970,
        "y": 660,
        "wires": []
    },
    {
        "id": "a80c397a4f5c5239",
        "type": "function",
        "z": "fd9469a0efbb8a77",
        "name": "SET IMPUTATION FLAG",
        "func": "msg.payload.csv[0].action = \"SET IMPUTATION FLAG?\"\nmsg.payload.csv[0][\"Varx-IMBALANCE\"] = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 620,
        "wires": [
            [
                "1d6bdfbeb72fbec3",
                "e2d5eecae0459e01"
            ]
        ]
    },
    {
        "id": "ce5bb9d4308895db",
        "type": "function",
        "z": "fd9469a0efbb8a77",
        "name": "Rake (DET) = TOT",
        "func": "msg.payload.csv[0][\"Rake(DET)\"] = msg.payload.csv[0][\"TOT\"]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 660,
        "wires": [
            [
                "f0325560707bbd38",
                "e2d5eecae0459e01"
            ]
        ]
    },
    {
        "id": "92892d34775a5fc5",
        "type": "status",
        "z": "fd9469a0efbb8a77",
        "name": "",
        "scope": null,
        "x": 1000,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "e2d5eecae0459e01",
        "type": "function",
        "z": "fd9469a0efbb8a77",
        "name": "function 24",
        "func": "node.status({ fill: \"green\", shape: \"dot\", text: \"processing\" });\n\nmsg.payload.csv[0].module = \"Unit Balance\"\n\nsetTimeout(function () {\n    node.status({ fill: \"gray\", shape: \"ring\", text: \"complete\" });\n    node.send(msg);\n}, 1000);\n\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 180,
        "wires": [
            [
                "0855387c3dd8f9d0"
            ]
        ]
    },
    {
        "id": "3de7d4b88b6bc5dc",
        "type": "debug",
        "z": "fd9469a0efbb8a77",
        "name": "debug 52",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 140,
        "y": 320,
        "wires": []
    },
    {
        "id": "0855387c3dd8f9d0",
        "type": "debug",
        "z": "fd9469a0efbb8a77",
        "name": "BALANCE OUTPUT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2000,
        "y": 100,
        "wires": []
    },
    {
        "id": "9b8ef39b6cf7149e",
        "type": "function",
        "z": "96f29b19e2260e65",
        "name": "post edit function",
        "func": "if (msg.payload.csv[0].flag) {\n    msg.payload.csv[0].FAIL = true\n    msg.payload.csv[0].TABSTAT = 1\n    msg.payload.csv[0].action = \"Go to: Imputation\"\n}\n\nnode.status({ fill: \"green\", shape: \"dot\", text: \"processing\" });\n\nmsg.payload.csv[0].module = \"Post Edit\"\n\nsetTimeout(function () {\n    node.status({ fill: \"gray\", shape: \"ring\", text: \"complete\" });\n    node.send(msg);\n}, 1000);\n\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 160,
        "wires": [
            [
                "31c3f0a2aae4dd6b"
            ]
        ]
    },
    {
        "id": "31c3f0a2aae4dd6b",
        "type": "debug",
        "z": "96f29b19e2260e65",
        "name": "post edit debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 80,
        "wires": []
    },
    {
        "id": "0ec224ff5d120eb7",
        "type": "status",
        "z": "96f29b19e2260e65",
        "name": "",
        "scope": null,
        "x": 80,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "0a9f67e1bc33b824",
        "type": "function",
        "z": "bfe1ab19e0cbe2cf",
        "name": "classification function",
        "func": "try{\n    let record_idx = global.get(\"ptrModuleFacts\");\n    let record = msg.payload.csv[record_idx];\n    let cache = global.get(\"lookupCache\");\n    const record_type = record['RECORD_TYP_TXT'];\n\n    function setFlagAndExit(referralFlagValue) {\n        msg.payload.csv[record_idx].TABSTAT = \"N\";\n        msg.payload.csv[record_idx].NONTABFL = \"R\";\n        msg.payload.csv[record_idx].ACTION = \"Exit Edit\";\n        msg.payload.csv[record_idx].REFERRAL_FLAG = referralFlagValue;\n    }\n    function recTypeMatch(recArr) {\n        console.log((\n            (record.RECORD_TYP_TXT ? recArr.includes(record.RECORD_TYP_TXT) : false)\n        ))\n        return (\n            (record.RECORD_TYP_TXT ? recArr.includes(record.RECORD_TYP_TXT) : false)\n        );\n    }\n\n    function checkNaicsValidation(columnIndex, recordtyp) {\n        const naicsValidationData = cache.data.find(\n            item =>\n                item.module === \"classification\" &&\n                item.param === 'naics_validation' &&\n                item.program === \"aies\" &&\n                item.unit_type === \"estab\"\n        )?.json_values;\n        let columnKey = ''\n        if (columnIndex === 4) {\n            columnKey = 'col_0';\n        } else if (columnIndex === 7) {\n            columnKey = 'col_1';\n        } else {\n            columnKey = \"col_2\";\n        }\n\n        let partialNum = ''\n        if (['20', '90', 20, 90].includes(recordtyp)) {\n            partialNum = record.NAICS_NUM.substring(0, columnIndex);\n        } else if ([30, '30'].includes(recordtyp)) {\n            partialNum = record.KAU_NAICS.substring(0, columnIndex);\n        }\n\n        return (\n            naicsValidationData[columnKey].find(row => parseInt(row) == parseInt(partialNum))\n            //     naicsValidationData &&\n            //     naicsValidationData[columnKey] &&\n            //     naicsValidationData[columnKey].includes(partialNum)\n        );\n    }\n\n    if (recTypeMatch([\"20\", \"90\"]) && record['AIES_SCOPE'] == 'Y' && record['BR_STAT'] == 'Y') {\n        if (checkNaicsValidation(4, record_type)) {\n            msg.payload.csv[record_idx].ACTION = \"Go to: Derive NAICS Code Module\";\n        } else if (checkNaicsValidation(7, record_type)) {\n            msg.payload.csv[record_idx].ACTION = \"Go to: Derive NAICS Code Module\";\n        } else if (checkNaicsValidation(6, record_type)) {\n            msg.payload.csv[record_idx].ACTION = \"Go to: Derive NAICS Code Module\";\n        } else {\n            setFlagAndExit(\"INVALID_NAICS_ESTAB\");\n        }\n        return msg;\n    } else if (recTypeMatch([\"30\"]) && record['AIES_SCOPE'] == 'Y' && record['BR_STAT'] == 'Y') {\n        if (checkNaicsValidation(4, record_type)) {\n            msg.payload.csv[record_idx].ACTION = \"Go to Main Routing\";\n        } else if (checkNaicsValidation(7, record_type)) {\n            msg.payload.csv[record_idx].ACTION = \"Go to Main Routing\";\n        } else if (checkNaicsValidation(6, record_type)) {\n            msg.payload.csv[record_idx].ACTION = \"Go to Main Routing\";\n        } else {\n            setFlagAndExit(\"INVALID_NAICS_KAU\");\n        }\n        return msg;\n    } else {\n        msg.payload.csv[record_idx].ACTION = \"Error - Record should not have entered this module\";\n        return msg;\n    }\n}catch(e){\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "8c066284600dbc44",
        "type": "function",
        "z": "0be109393cb5f28a",
        "name": "check cache",
        "func": "// Retrieve the lookupCache\nlet cache = global.get(\"lookupCache\") || { data: [] };\n\n// Initialize msg.payload.lookup if it's not already an object\nmsg.payload.lookup = msg.payload.lookup || {};\n\n// List to keep track of missing parameters\nlet missingParams = [];\n\n// Check if the required params and their types exist in the cache\nif (msg?.payload?.lookup?.params){\n    for (let param of msg.payload.lookup.params.split(\",\")) {\n        let cachedValue = cache?.data && cache.data.find(\n            (cacheItem) =>\n                cacheItem.param === param.key && cacheItem.type === param.type\n        );\n\n        if (!cachedValue) {\n            missingParams.push(param);\n        }\n    }\n}\n\n\n// If there are missing parameters, set msg.payload.lookup.needsFetch to true\nif (missingParams.length > 0) {\n    msg.payload.lookup.needsFetch = true;\n    msg.payload.lookup.missingParams = missingParams;\n} else {\n    msg.payload.lookup.needsFetch = false;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 400,
        "wires": [
            [
                "ce1e0380f0f1b0f9"
            ]
        ]
    },
    {
        "id": "ce1e0380f0f1b0f9",
        "type": "function",
        "z": "0be109393cb5f28a",
        "name": "prepare API Request",
        "func": "const { moduleName, program, unit_type, missingParams } = msg.payload.lookup;\nconst params = (missingParams.length && missingParams.join(\",\")) || \"\";\n// const apiurl = `${(env.get('CENSUS_API') || 'https://mc.edl-7529180-ite.ite.edl.census.gov/api/').trim()}params?module=${moduleName}&params=${params}&program=${program}&unit_type=${unit_type}`;\nconst apiurl = `${('a301cb45559c445acaec11ab01bbbee1-2115632777.us-gov-east-1.elb.amazonaws.com/api/').trim()}params?module=${moduleName}&params=${params}&program=${program}&unit_type=${unit_type}`;\nmsg.url = apiurl;\nmsg.payloadBackup = msg.payload;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 400,
        "wires": [
            [
                "6c16d5bbc3143a33"
            ]
        ]
    },
    {
        "id": "6c16d5bbc3143a33",
        "type": "http request",
        "z": "0be109393cb5f28a",
        "name": "Lookup data API",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 400,
        "wires": [
            [
                "f5dbe24054de29ce"
            ]
        ]
    },
    {
        "id": "f5dbe24054de29ce",
        "type": "function",
        "z": "0be109393cb5f28a",
        "name": "cache result",
        "func": "let cache = global.get(\"lookupCache\");\ncache = Array.isArray(cache?.data) ? cache : {\"data\":[]}\n\n// Get the payload\nlet payload = msg.payload;\n\n// Check if the API call was successful\nif (payload.status === \"success\") {\n\n    // Get the data array\n    let dataArr = payload.data;\n\n    // Extract the necessary fields from the API response and update the cache\n    for (let item of dataArr) {\n        const { id, module, param, values, json_values, program, unit_type } = item;\n        cache.data.push({ id, module, param, values, json_values, program, unit_type });\n    }\n    msg.payload = { ...msg.payloadBackup, dataArr };\n\n}\n// Save the updated cache\nglobal.set(\"lookupCache\", cache)\n// msg.payload = { ...msg.payloadBackup, dataArr };\n// msg.payload.cache = cache;\ndelete msg.payloadBackup;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "e4588ba92d2276e3",
        "type": "function",
        "z": "9e4e212b0811233d",
        "name": "Pre Db Write Back For Leased",
        "func": "// // msg.actions.postEditStatusFieldsCompleted = true\n// let record = msg.payload.csv[global.get(\"ptrModuleFacts\")];\n\n// let REFERRAL_FLAG = record['REFERRAL_FLAG'];\n\n// if (REFERRAL_FLAG === 'LEASED_ONLY') {\n//     record['PAY_ANN_VAL'] = 0;\n\n//     if (record['PAY_ANN_VAL_FLG'] && record['PAY_ANN_VAL_FLG'].length >= 2) {\n//         record['PAY_ANN_VAL_FLG'] = record['PAY_ANN_VAL_FLG'].substring(0, 1) + 'Z' + record['PAY_ANN_VAL_FLG'].substring(2);\n//     } else if (!record['PAY_ANN_VAL_FLG'] || record['PAY_ANN_VAL_FLG'].length == 0) {\n//         record['PAY_ANN_VAL_FLG'] = '_z_';\n//     } else if (record['PAY_ANN_VAL_FLG'].length == 1) {\n//         record['PAY_ANN_VAL_FLG'] = record['PAY_ANN_VAL_FLG'][0] + 'Z_';\n//     }\n// }\n\n// msg.payload.csv[global.get(\"ptrModuleFacts\")].ACTION = 'EXIT'\n\n// console.log({\n//     msg: msg.payload.csv[global.get(\"ptrModuleFacts\")]\n// })\n// return msg;\n\n\nlet record = msg.payload.csv[global.get(\"ptrModuleFacts\")];\n\nlet REFERRAL_FLAG = record['REFERRAL_FLAG'];\n\nif (REFERRAL_FLAG === 'LEASED_ONLY') {\n    record['PAY_ANN_VAL'] = 0;\n    if (record['PAY_ANN_VAL_F'] && record['PAY_ANN_VAL_F'].length >= 2) {\n        record['PAY_ANN_VAL_F'] = record['PAY_ANN_VAL_F'].substring(0, 1) + 'Z' + record['PAY_ANN_VAL_F'].substring(2);\n    } else if (record['PAY_ANN_VAL_F'] && record['PAY_ANN_VAL_F'].length >= 1) {\n        record['PAY_ANN_VAL_F'] = record['PAY_ANN_VAL_F'].substring(0, 1) + 'Z ';\n    } else {\n        record['PAY_ANN_VAL_F'] = ' Z ';\n    }\n}\n\nrecord['ACTION'] = 'Go to Post Edit Status Fields'\n// global.set('action','Go to Post Edit Status Fields')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "a209d5855b2b60f9",
        "type": "function",
        "z": "e28cd8ccfbe21b33",
        "name": "Get Body",
        "func": "msg.payload.NODE_TLS_REJECT_UNAUTHORIZED = env.get('NODE_TLS_REJECT_UNAUTHORIZED')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "5507f546d88c96b5",
        "type": "http request",
        "z": "e28cd8ccfbe21b33",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "96a4a629f038cff3",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": true,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 570,
        "y": 240,
        "wires": [
            [
                "a209d5855b2b60f9"
            ]
        ]
    },
    {
        "id": "b768655d4c7a4024",
        "type": "function",
        "z": "e28cd8ccfbe21b33",
        "name": "POST API ",
        "func": "// msg.url = \"https://a301cb45559c445acaec11ab01bbbee1-2115632777.us-gov-east-1.elb.amazonaws.com/api/db_query/q\";\n\nmsg.url = \"https://mc.edl-7529180-ite.ite.edl.census.gov/api/db_query/q\";\n\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\nmsg.payload = {\n        q: \"SELECT * from space_product_aies.item_estabs limit 100\" \n};\nreturn msg;\n\n// q: \"SELECT * from space_uat.space_product_aies.item_estabs limit 100\" \n// curl --location 'https://mc.edl-7529180-ite.ite.edl.census.gov/api/db_query/q' --header 'Content-Type: application/json' --data '{ \"q\": \"SELECT * from space_product_aies.item_estabs limit 1\" }'",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 240,
        "wires": [
            [
                "5507f546d88c96b5"
            ]
        ]
    },
    {
        "id": "15222fbe79033cfa",
        "type": "function",
        "z": "998aa04bd1bb677d",
        "name": "Valid Zero",
        "func": "try{\n    let record_idx = global.get(\"ptrModuleFacts\");\n    let record = msg.payload.csv[record_idx]\n    let cache = global.get(\"lookupCache\");\n\n    let valid_zero_file = cache.data.find(\n        item =>\n            item.module === \"valid_zero\" &&\n            item.param === 'valid_zero' &&\n            item.program === \"aies\" &&\n            item.unit_type === \"all\"\n    )?.json_values;\n\n    function isZero(column, type) {\n        if (valid_zero_file.VALID_ZERO.some(element =>\n            (element.LEVEL) === type &&\n            (element.ITEM) === column)) {\n\n            let column_f = column + '_F'\n            if (record[column_f] && record[column_f].length >= 3) {\n                record[column_f] = record[column_f].substring(0, 2) + 'G' + record[column_f].substring(3);\n            } else if (record[column_f] && record[column_f].length >= 2) {\n                record[column_f] = record[column_f].substring(0, 2) + 'G';\n            } else if (record[column_f] && record[column_f].length >= 1) {\n                record[column_f] = record[column_f].substring(0, 1) + ' G';\n            } else {\n                record[column_f] = '  G';\n            }\n        }\n    }\n\n    let type = ''\n    if (['MU', 'SU'].includes(record['REPORTING_ID_TYP_TXT'])) {\n        type = 'ESTAB'\n    } else if (['KAU'].includes(record['REPORTING_ID_TYP_TXT'])) {\n        type = 'KAU'\n    }\n\n    for (var key in record) {\n        if (parseFloat(record[key]) == 0) {\n            isZero(key, type)\n        }\n    }\n\n    record['ACTION'] = 'Go to Main Routing'\n    return msg;\n}\ncatch(e){\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "dd9091221ca2c1cf",
        "type": "function",
        "z": "c79b244779411ead",
        "name": "Valid Negative Link",
        "func": "try{\n    let record_idx = global.get(\"ptrModuleFacts\");\n    let record = msg.payload.csv[record_idx]\n    let cache = global.get(\"lookupCache\");\n\n    let valid_negative_file = cache.data.find(\n        item =>\n            item.module === \"valid_negative\" &&\n            item.param === 'valid_negative_value' &&\n            item.program === \"aies\" &&\n            item.unit_type === \"all\"\n    )?.json_values;\n\n    function isNegative(naics, column, type, tax) {\n        if (valid_negative_file.VALID_NEGATIVE.some(element =>\n        (element.LEVEL === type &&\n            [null, undefined, tax].includes(element.TAX_EXEMPT_STAT) &&\n            element.ITEM === column &&\n            [naics, parseInt(naics), 'ALL', 'all', 'All', '', null, undefined].includes(element.NAICS)))) {\n            if (['ESTAB', 'KAU'].includes(type)) {\n                record['EXIMP'] = 'E'\n            }\n        } else {\n            record[column] = 0\n            if (column == 'RCPT_TOT_VAL') {\n                let column_f = column + '_F'\n                if (record[column_f] && record[column_f].length >= 3) {\n                    record[column_f] = record[column_f].substring(0, 2) + 'G' + record[column_f].substring(3);\n                } else if (record[column_f] && record[column_f].length >= 2) {\n                    record[column_f] = record[column_f].substring(0, 2) + 'G';\n                } else if (record[column_f] && record[column_f].length >= 1) {\n                    record[column_f] = record[column_f].substring(0, 1) + ' G';\n                } else {\n                    record[column_f] = '  G';\n                }\n            } else {\n                let column_f = column + '_F'\n                if (record[column_f] && record[column_f].length >= 3) {\n                    record[column_f] = record[column_f].substring(0, 2) + 'L' + record[column_f].substring(3);\n                } else if (record[column_f] && record[column_f].length >= 2) {\n                    record[column_f] = record[column_f].substring(0, 2) + 'L';\n                } else if (record[column_f] && record[column_f].length >= 1) {\n                    record[column_f] = record[column_f].substring(0, 1) + ' L';\n                } else {\n                    record[column_f] = '  L';\n                }\n            }\n        }\n    }\n\n    let type = ''\n    if (['MU', 'SU'].includes(record['REPORTING_ID_TYP_TXT'])) {\n        type = 'ESTAB'\n    } else if (['KAU'].includes(record['REPORTING_ID_TYP_TXT'])) {\n        type = 'KAU'\n    } else if (['ENT'].includes(record['REPORTING_ID_TYP_TXT'])) {\n        type = 'COMPANY'\n    }\n\n    let naics = '' + record['NAICS_NUM']\n    let tax = record['TAXSTAT']\n\n    if ([null, undefined, 'null', 'undefined', ''].includes(tax)) {\n        tax = null\n    }\n\n    for (var key in record) {\n        if (parseFloat(record[key]) < 0) {\n            isNegative(naics, key, type, tax)\n        }\n    }\n\n    record['ACTION'] = 'Go to Main Routing'\n    // global.set('action','Go to Main Routing')\n    return msg;\n}catch(e){\n    return msg;\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "44cfe99b5f9e273f",
        "type": "function",
        "z": "89f071f1deb9a1b1",
        "name": "Completeness",
        "func": "try{\n    let record = msg.payload.csv[global.get(\"ptrModuleFacts\")];\n    let PAY_ANN_VAL = parseFloat(record['PAY_ANN_VAL']);\n    let PAY_QTR1_VAL = parseFloat(record['PAY_QTR1_VAL']);\n    let EMP_MAR12_NUM = parseFloat(record['EMP_MAR12_NUM']);\n    let RCPT_TOT_VAL = parseFloat(record['RCPT_TOT_VAL']);\n    let REPORTING_ID_TYP_TXT = record['REPORTING_ID_TYP_TXT'];\n    let EXIMP = record['EXIMP']\n\n    // let record = msg.payload.csv[record_idx];\n    function isMissing(variable) {\n        let missing = ''\n        if ([null, undefined, 'NULL', ''].includes(record[variable])) {\n            missing = 'Yes'\n        } else if (!record[variable]) {\n            missing = 'Yes'\n        }\n        if (missing != '') {\n            return (missing);\n        }\n    }\n\n    function core3(variable, variable_f) {\n        let error = ''\n        if (parseFloat(record[variable]) == 0) {\n            // console.log(record[variable_f].substring(2,3))\n            if (record[variable_f].substring(2, 3) != 'G') {\n                error = 'Yes'\n            }\n        } else {\n            if (['A', 'P', 'V', 'H', 'M', 'E', 'B', 'W', 'U', 'X', 'Z'].includes(record[variable_f].substring(2, 3)) || EXIMP != 'E' || record[variable_f] == 'HOTDECK') {\n                error = 'Yes'\n            }\n        }\n        if (error != '') {\n            return (error);\n        }\n    }\n\n    function rcptot(variable, variable_f) {\n        let error = ''\n        if (parseFloat(record[variable]) == 0) {\n            error = 'Yes'\n        } else {\n            if (['A', 'P', 'V', 'H', 'M', 'E', 'B', 'W', 'U', 'X'].includes(record[variable_f].substring(1, 2)) || record[variable_f] == 'HOTDECK') {\n                error = 'Yes'\n            }\n        }\n        if (error != '') {\n            return (error);\n        }\n    }\n\n    if (['MU', 'SU', 'KAU'].includes(REPORTING_ID_TYP_TXT)) {\n        var list = []\n        // pay_ann_val\n        if (isMissing('PAY_ANN_VAL')) {\n            list.push('PAY_ANN_VAL')\n        } else if (core3('PAY_ANN_VAL', 'PAY_ANN_VAL_F')) {\n            list.push('PAY_ANN_VAL')\n        }\n        // rcpt_tot_val\n        if (isMissing('RCPT_TOT_VAL')) {\n            list.push('RCPT_TOT_VAL')\n        } else if (rcptot('RCPT_TOT_VAL', 'RCPT_TOT_VAL_F')) {\n            list.push('RCPT_TOT_VAL')\n        }\n        // pay_qtr1_val\n        if (isMissing('PAY_QTR1_VAL')) {\n            list.push('PAY_QTR1_VAL')\n        } else if (core3('PAY_QTR1_VAL', 'PAY_QTR1_VAL_F')) {\n            list.push('PAY_QTR1_VAL')\n        }\n        // emp_mar12_num\n        if (isMissing('EMP_MAR12_NUM')) {\n            list.push('EMP_MAR12_NUM')\n        } else if (core3('EMP_MAR12_NUM', 'EMP_MAR12_NUM_F')) {\n            list.push('EMP_MAR12_NUM')\n        }\n\n        // console.log('list ' + list)\n        // console.log(list.length)\n        if (list.length != 0) {\n            // record['list'] = list\n            record['ACTION'] = list + ' Will Be Executed In Previous Order'\n        } else {\n            record['ACTION'] = 'Go To Main Routing'\n        }\n\n    } else {\n        record['ACTION'] = 'Go To Main Routing'\n    }\n    return msg;\n}catch(e){\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "d1b1713300484045",
        "type": "function",
        "z": "b576348e42469acf",
        "name": "NAPCS: M_GOCO",
        "func": "let record_idx = global.get(\"ptrModuleFacts\");\nlet record = msg.payload.csv[record_idx];\n\nfunction setCharAt(str, index, chr) {\n    if ([null, undefined].includes(str)) {\n        let newstr = ''\n        for (let i = 0; i < index; i++) {\n            newstr = newstr + ' ';\n        }\n        newstr = newstr + chr\n        return newstr;\n    } else {\n        if (index > str.length - 1) {\n            let addstr = index - str.length\n            let newstr = str\n            for (let i = 0; i < addstr; i++) {\n                newstr = newstr + ' ';\n            }\n            newstr = newstr + chr\n            return newstr;\n        } else {\n            return str.substring(0, index) + chr + str.substring(index + 1);\n        }\n    }\n}\n\nlet cache = global.get(\"lookupCache\");\nlet naics_m_goco_naics_to_napcs_file = cache.data.find(\n    item =>\n        item.module === \"napcs\" &&\n        item.param === 'naics_to_napcs_m_goco' &&\n        item.program === \"aies\" &&\n        item.unit_type === \"all\"\n)?.json_values;\n\nlet isNaicsCodeFound = naics_m_goco_naics_to_napcs_file?.NAICS_TO_NAPCS_M_GOCO.some(n => n['NAICS-3'] == record?.NAICS_CODE.substr(0, 3));\n\n\n\n\nfunction NAPCSMGOCO() {\n    if (record?.NAPCS_IND == 'U') {\n        record.PROD_CODE_VAL = 0\n        record.USABLE = 'D'\n        setCharAt(record.PROD_CODE_F || ' ', 1, 'J')\n    }\n\n    if (isNaicsCodeFound) {\n        record.NAPCS_IND = 'U'\n\n        const fields = [\n            \"CAPEX_BUILD_NEW_VAL\", \"CAPEX_BUILD_USED_VAL\", \"CAPEX_BUILD_TOT_DVAL\",\n            \"CAPEX_MACH_NEW_VAL\", \"CAPEX_MACH_USED_VAL\", \"CAPEX_MACH_TOT_DVAL\",\n            \"CAPEX_AUTO_VAL\", \"CAPEX_COMPTR_VAL\", \"CAPEX_OTHMACH_VAL\",\n            \"CAPEX_OTH_NEW_VAL\", \"CAPEX_OTH_NEW_WRTIN_TXT\", \"CAPEX_OTH_USED_VAL\",\n            \"CAPEX_OTH_USED_WRTIN_TXT\", \"CAPEX_OTH_TOT_DVAL\", \"CAPEX_NEW_TOT_DVAL\",\n            \"CAPEX_USED_TOT_DVAL\", \"CAPEX_TOT_DVAL\",\n\n            // need to verify following _F are correctly understood\n\n            \"CAPEX_BUILD_NEW_VAL_F\", \"CAPEX_BUILD_USED_VAL_F\", \"CAPEX_BUILD_TOT_DVAL_F\",\n            \"CAPEX_MACH_NEW_VAL_F\", \"CAPEX_MACH_USED_VAL_F\", \"CAPEX_MACH_TOT_DVAL_F\",\n            \"CAPEX_AUTO_VAL_F\", \"CAPEX_COMPTR_VAL_F\", \"CAPEX_OTHMACH_VAL_F\",\n            \"CAPEX_OTH_NEW_VAL_F\", \"CAPEX_OTH_NEW_WRTIN_TXT_F\", \"CAPEX_OTH_USED_VAL_F\",\n            \"CAPEX_OTH_USED_WRTIN_TXT_F\", \"CAPEX_OTH_TOT_DVAL_F\", \"CAPEX_NEW_TOT_DVAL_F\",\n            \"CAPEX_USED_TOT_DVAL_F\", \"CAPEX_TOT_DVAL_F\",\n\n            \"INV_E_FIN_VAL\", \"INV_E_WIP_VAL\", \"INV_E_MAT_VAL\",\n            \"INV_E_TOT_VAL\", \"INV_B_FIN_VAL\", \"INV_B_WIP_VAL\",\n            \"INV_B_MAT_VAL\", \"INV_B_TOT_VAL\", \"INV_E_FIFO_VAL\",\n            \"INV_E_AVG_VAL\", \"INV_E_STD_VAL\", \"INV_E_OTHNL_VAL\",\n            \"INV_E_NL_TOT_DVAL\", \"INV_B_FIFO_VAL\", \"INV_B_AVG_VAL\",\n            \"INV_B_STD_VAL\", \"INV_B_OTHNL_VAL\", \"INV_B_NL_TOT_DVAL\", \"INV_E_LIFO_VAL\", \"INV_B_LIFO_VAL\",\n            \"INV_E_IVAL_TOT_DVAL\", \"INV_B_IVAL_TOT_DVAL\", \"INV_E_LIFO_RSV_VAL\",\n            \"INV_B_LIFO_RSV_VAL\",\n\n            \"INV_E_FIN_VAL_F\", \"INV_E_WIP_VAL_F\",\n            \"INV_E_MAT_VAL_F\", \"INV_E_TOT_VAL_F\", \"INV_B_FIN_VAL_F\",\n            \"INV_B_WIP_VAL_F\", \"INV_B_MAT_VAL_F\", \"INV_B_TOT_VAL_F\",\n            \"INV_E_FIFO_VAL_F\", \"INV_E_AVG_VAL_F\", \"INV_E_STD_VAL_F\",\n            \"INV_E_OTHNL_VAL_F\", \"INV_E_NL_TOT_DVAL_F\", \"INV_B_FIFO_VAL_F\",\n            \"INV_B_AVG_VAL_F\", \"INV_B_STD_VAL_F\", \"INV_B_OTHNL_VAL_F\",\n            \"INV_B_NL_TOT_DVAL_F\", \"INV_E_LIFO_VAL_F\", \"INV_B_LIFO_VAL_F\",\n            \"INV_E_IVAL_TOT_DVAL_F\", \"INV_B_IVAL_TOT_DVAL_F\", \"INV_E_LIFO_RSV_VAL_F\",\n            \"INV_B_LIFO_RSV_VAL_F\"\n        ];\n\n        fields.forEach(field => {\n            if (field.endsWith(\"_F\")) {\n                record[field] = setCharAt(record[field] || '  ', 3, 'J')\n            } else {\n                record[field] = 0;\n            }\n        });\n        record.EXPS_MAT_V1_VAL = 0;\n        record.CSTMTOT_F = setCharAt(record.CSTMTOT_F, 3, 'L');\n\n        record.EXPS_CSTMTOT_DVAL =\n            (parseFloat(record?.EXPS_ELEC_VAL) || 0)\n            + (parseFloat(record?.EXPS_FUEL_VAL) || 0)\n            + (parseFloat(record?.EXPS_CONTRACT_VAL) || 0)\n            + (parseFloat(record?.EXPS_RESALE_VAL) || 0);\n\n    } else {\n        record.TABSTAT = 'N'\n        record.NONTABFL = 'R'\n        record.STOP = 'T'\n        record.GOCO_NAICS = 'No Match'\n    }\n    record.ACTION = 'END'\n}\n\nNAPCSMGOCO()\nmsg.payload.csv[record_idx] = record\n\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "2de457b33efc9b3e",
        "type": "function",
        "z": "27c40a87c581e266",
        "name": "pay_ann_val",
        "func": "// msg.cache = global.get(\"lookupCache\")\nlet record = msg.payload.csv[global.get(\"ptrModuleFacts\")];\nconsole.log({ record })\n// Initialize variables\nconst NAICS_SECTOR_OLD_NUM = parseFloat(record['NAICS_SECTOR_OLD_NUM']);\nconst PAY_ANN_PRDWRK_VAL = parseFloat(record['PAY_ANN_PRDWRK_VAL']);\nconst PAY_ANN_NONPRDWRK_VAL = parseFloat(record['PAY_ANN_NONPRDWRK_VAL']);\nconst ECPAYANN = parseFloat(record['ECPAYANN']);\nconst REPORTING_ID_TYP_TXT = record['REPORTING_ID_TYP_TXT'];\nconst CY_PAY_ANN = parseFloat(record['CY_PAY_ANN']);\nconst CY_PAY_ANN_LSD = parseFloat(record['CY_PAY_ANN_LSD']);\nconst EXPS_TEMPSTAF_VAL = record['EXPS_TEMPSTAF_VAL'];\nconst MADB_2022_PAYANN = parseFloat(record['MADB_2022_PAYANN']);\nconst CY_PAY_ANN_F = record['CY_PAY_ANN_F']\nconst CY_PAY_ANN_LSD_F = record['CY_PAY_ANN_LSD_F']\nconst RCPT_TOT_VAL_R = parseFloat(record['RCPT_TOT_VAL_R'])\nconst CYPYF = parseFloat(record['CYPYF'])\n// Set function\nconst setVariable = (variable, value) => {\n    record[variable] = value;\n};\nconst setVals = () => {\n    setVariable('PAY_QTR1_VAL', 0);\n    if (record['PAY_QTR1_VAL_F'] && record['PAY_QTR1_VAL_F'].length >= 2) {\n        record['PAY_QTR1_VAL_F'] = record['PAY_QTR1_VAL_F'].substring(0, 1) + 'G' + record['PAY_QTR1_VAL_F'].substring(2);\n    } else if (record['PAY_QTR1_VAL_F'] && record['PAY_QTR1_VAL_F'].length >= 1) {\n        record['PAY_QTR1_VAL_F'] = record['PAY_QTR1_VAL_F'].substring(0, 1) + 'G ';\n    } else {\n        record['PAY_QTR1_VAL_F'] = ' G ';\n    }\n    setVariable('EMP_MAR12_NUM', 0);\n    if (record['EMP_MAR12_NUM_F'] && record['EMP_MAR12_NUM_F'].length >= 2) {\n        record['EMP_MAR12_NUM_F'] = record['EMP_MAR12_NUM_F'].substring(0, 1) + 'G' + record['EMP_MAR12_NUM_F'].substring(2);\n    } else if (record['EMP_MAR12_NUM_F'] && record['EMP_MAR12_NUM_F'].length >= 1) {\n        record['EMP_MAR12_NUM_F'] = record['EMP_MAR12_NUM_F'].substring(0, 1) + 'G ';\n    } else {\n        record['EMP_MAR12_NUM_F'] = ' G ';\n    }\n    setVariable('EXIMP', 'E');\n    setVariable('ReferralFlag', 'LEASED_ONLY');\n    setVariable('ACTION', 'Continue to RCPT_TOT_VAL if it failed completeness test elase skip, then skip PAY_QTR1_VAL and EMP_MAR12_VAL and go back to completeness');\n}\n// Logic\nif (NAICS_SECTOR_OLD_NUM === 31 && (PAY_ANN_PRDWRK_VAL + PAY_ANN_NONPRDWRK_VAL) > 0) {\n    setVariable('PAY_ANN_VAL', PAY_ANN_PRDWRK_VAL + PAY_ANN_NONPRDWRK_VAL);\n    if (record['PAY_ANN_VAL_F'] && record['PAY_ANN_VAL_F'].length >= 3) {\n        record['PAY_ANN_VAL_F'] = record['PAY_ANN_VAL_F'].substring(0, 2) + 'L' + record['PAY_ANN_VAL_F'].substring(3);\n    } else if (record['PAY_ANN_VAL_F'] && record['PAY_ANN_VAL_F'].length >= 2) {\n        record['PAY_ANN_VAL_F'] = record['PAY_ANN_VAL_F'].substring(0, 2) + 'L';\n    } else if (record['PAY_ANN_VAL_F'] && record['PAY_ANN_VAL_F'].length >= 1) {\n        record['PAY_ANN_VAL_F'] = record['PAY_ANN_VAL_F'].substring(0, 1) + ' L';\n    } else {\n        record['PAY_ANN_VAL_F'] = '  L';\n    }\n    setVariable('ACTION', 'Go to RCPT_TOT_VAL Module');\n} else if (REPORTING_ID_TYP_TXT === 'SU' && ECPAYANN > 0) {\n    setVariable('PAY_ANN_VAL', ECPAYANN);\n    if (record['PAY_ANN_VAL_F'] && record['PAY_ANN_VAL_F'].length >= 3) {\n        record['PAY_ANN_VAL_F'] = record['PAY_ANN_VAL_F'].substring(0, 2) + 'A' + record['PAY_ANN_VAL_F'].substring(3);\n    } else if (record['PAY_ANN_VAL_F'] && record['PAY_ANN_VAL_F'].length >= 2) {\n        record['PAY_ANN_VAL_F'] = record['PAY_ANN_VAL_F'].substring(0, 2) + 'A';\n    } else if (record['PAY_ANN_VAL_F'] && record['PAY_ANN_VAL_F'].length >= 1) {\n        record['PAY_ANN_VAL_F'] = record['PAY_ANN_VAL_F'].substring(0, 1) + ' A';\n    } else {\n        record['PAY_ANN_VAL_F'] = '  A';\n    }\n    setVariable('ACTION', 'Go to RCPT_TOT_VAL Module');\n} else if (REPORTING_ID_TYP_TXT === 'MU' && CY_PAY_ANN > 0) {\n    setVariable('PAY_ANN_VAL', CY_PAY_ANN);\n    setVariable('PAY_ANN_VAL_F', CY_PAY_ANN_F);\n    setVariable('ACTION', 'Go to RCPT_TOT_VAL Module');\n} else if (CY_PAY_ANN_LSD > 0) {\n    setVariable('PAY_ANN_VAL', CY_PAY_ANN_LSD);\n    setVariable('PAY_ANN_VAL_F', CY_PAY_ANN_LSD_F);\n\n    setVals()\n} else if (EXPS_TEMPSTAF_VAL > 0) {\n    setVariable('PAY_ANN_VAL', EXPS_TEMPSTAF_VAL);\n    if (record['PAY_ANN_VAL_F'] && record['PAY_ANN_VAL_F'].length >= 2) {\n        record['PAY_ANN_VAL_F'] = record['PAY_ANN_VAL_F'].substring(0, 1) + 'J' + record['PAY_ANN_VAL_F'].substring(2);\n    } else if (record['PAY_ANN_VAL_F'] && record['PAY_ANN_VAL_F'].length >= 1) {\n        record['PAY_ANN_VAL_F'] = record['PAY_ANN_VAL_F'].substring(0, 1) + 'J ';\n    } else {\n        record['PAY_ANN_VAL_F'] = ' J ';\n    }\n    setVals()\n} else if (MADB_2022_PAYANN > 0) {\n    setVariable('PAY_ANN_VAL', MADB_2022_PAYANN * CYPYF);\n    if (record['PAY_ANN_VAL_F'] && record['PAY_ANN_VAL_F'].length >= 3) {\n        record['PAY_ANN_VAL_F'] = record['PAY_ANN_VAL_F'].substring(0, 2) + 'H' + record['PAY_ANN_VAL_F'].substring(3);\n    } else if (record['PAY_ANN_VAL_F'] && record['PAY_ANN_VAL_F'].length >= 2) {\n        record['PAY_ANN_VAL_F'] = record['PAY_ANN_VAL_F'].substring(0, 2) + 'H';\n    } else if (record['PAY_ANN_VAL_F'] && record['PAY_ANN_VAL_F'].length >= 1) {\n        record['PAY_ANN_VAL_F'] = record['PAY_ANN_VAL_F'].substring(0, 1) + ' H';\n    } else {\n        record['PAY_ANN_VAL_F'] = '  H';\n    }\n    setVariable('ACTION', 'Go to RCPT_TOT_VAL Module');\n} else {\n    // Setting defaults as per flowchart for non-employer\n    // setVariable('PAY_ANN_VAL', 0);\n    // setVariable('PAY_ANN_VAL_FLG', 'G');\n    // setVariable('EMP_MAR12_NUM', 0);\n    // setVariable('EMP_MAR12_NUM_FLG', 'G');\n    // setVariable('Referral_FLAG', 'LEASED_ONLY');\n    // setVariable('NODONOR', 'E');\n    setVariable('TABSTAT', 'N')\n    setVariable('NONTABFL', 'N')\n    if (RCPT_TOT_VAL_R > 0) {\n        setVariable('ReferralFlag', 'NO_PAYROLL_W_RECEIPTS')\n        setVariable('ACTION', 'EXIT EDIT')\n    }\n    else {\n        setVariable('ACTION', 'EXIT EDIT')\n    }\n}\n\nmsg.payload.csv[global.get(\"ptrModuleFacts\")] = record;\nconsole.log({ record })\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "31739108a9b57e14",
        "type": "function",
        "z": "20d530cc0b193752",
        "name": "BR Stat ",
        "func": "try{\n    let record_idx = global.get(\"ptrModuleFacts\");\n    let record = msg.payload.csv[record_idx];\n    function A(msg) {\n        msg.payload.csv[record_idx].TABSTAT = \"N\";\n        msg.payload.csv[record_idx].NONTABFL = \"D\";\n        msg.payload.csv[record_idx].ACTION = \"Exit Edit\";\n        global.set('action', 'Exit Edit')\n    }\n\n    // Is RECORD_TYP_TXT in ('10','20','3O','90')\n    if ([\"10\", \"20\", \"30\", \"90\"].includes(String(record.RECORD_TYP_TXT))) {\n        msg.payload.DEBUG_STATUS = \"RECORD_TYP_TXT-10-20-30-90-true\"\n        // Set TABSTAT and NONTABFL variables\n        msg.payload.csv[record_idx].TABSTAT = \"Y\";\n        msg.payload.csv[record_idx].NONTABFL = null;\n\n        // Is RECORD_TYP_TXT in ('10','20','90')\n        if ([\"10\", \"20\", \"90\"].includes(String(record.RECORD_TYP_TXT))) {\n            // Is BR_STAT equal to \"N\"\n            if (record.BR_STAT === \"N\") {\n                A(msg); // Go to A\n            } else { // BR_STAT not equal to \"N\"\n                // Is RECORD_TYP_TXT \"20\" or \"90\"\n                if ([\"20\", \"90\"].includes(String(record.RECORD_TYP_TXT))) {\n                    msg.payload.csv[record_idx].ACTION = \"Go to main Routing\";\n                    return msg;\n\n                } else { // RECORD_TYP_TXT not \"20\" or \"90\"\n                    msg.payload.csv[record_idx].ACTION = \"Go to main Routing\";\n                    return msg;\n                }\n            }\n\n        } else { // RECORD_TYP_TXT not in ('10','20','3O','90')\n            if (record.KAU_STAT === \"N\") {\n                A(msg); // Go to A\n            } else {\n                msg.payload.csv[record_idx].ACTION = \"Go to main Routing\";\n                global.set('action', 'Go to main Routing')\n                return msg;\n            }\n        }\n\n    } else {  // RECORD_TYP_TXT not in ('10','20','3O','90')\n        msg.payload.record_idx = record_idx\n        msg.payload.DEBUG_STATUS = \"RECORD_TYP_TXT-10-20-30-90-false\"\n        msg.payload.csv[record_idx].ACTION = \"ERROR\";\n        global.set('action', 'ERROR')\n    }\n\n    return msg;\n}catch(e){\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "1de39caabc61c808",
        "type": "function",
        "z": "c54bc77310ce263a",
        "name": "Derive NAICS Code",
        "func": "\nlet record_idx = global.get(\"ptrModuleFacts\");\nlet record = msg.payload.csv[record_idx];\n\nif ((String(record.RECORD_TYP_TXT) === \"20\" || String(record.RECORD_TYP_TXT) === \"90\")) \n{\n    if (String(record.NAICS_SECTOR_OLD_NUM) === \"31\") {\n        record.action = \"Go to: Derive MFG NAICS from NAPCS\"\n    } else {\n        record.action = \"Go to: Classification\"\n    }\n    return msg;\n} \nelse {\n    record.action = \"Go to: Classification\"\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "310c654aa32dd481",
        "type": "function",
        "z": "b22812dba408ab8f",
        "name": "geography function",
        "func": "try{\n    let record_idx = global.get(\"ptrModuleFacts\");\n    const record = msg.payload.csv[record_idx];\n    const cache = global.get(\"lookupCache\");\n    const validationChartData = cache.data.find(\n        item =>\n            item.module === \"geography\" &&\n            item.param === \"geography\" &&\n            item.program === \"aies\" &&\n            item.unit_type === \"estab\"\n    )?.json_values;\n\n    let validation = validationChartData.GEO.some(element =>\n    (parseInt(element.STFIPS) === parseInt(record?.GEO_STATE_FIPS) &&\n        parseInt(element.GEOREG) === parseInt(record?.GEO_REGION))\n    );\n\n    if (validation) {\n        record['ACTION'] = \"Go to Main Routing\";\n        // global.set('action','Go to Main Routing')\n    } else if (record?.GEO_STATE_FIPS === \"97\") {\n        if (record?.NAICS_SECTOR_OLD_NUM === \"21\" && [\"PC\", \"NG\", \"AT\"].includes(record?.PHYSLOC_ADDR_ST_TXT)) {\n            record['ACTION'] = \"Go to Main Routing\";\n            // global.set('action','Go to Main Routing')\n        } else {\n            record['TABSTAT'] = \"N\";\n            record['NONTABFL'] = \"Y\";\n            record['ACTION'] = \"Exit Edit\";\n            // global.set('action','Exit Edit')\n        }\n    } else {\n        record['TABSTAT'] = \"N\";\n        record['NONTABFL'] = \"Y\";\n        record['ACTION'] = \"Exit Edit\";\n        // record['FLAG'] = \"GEO_Invalid\";\n        // global.set('action','Exit Edit')\n    }\n\n    // record.module = \"Geography\";\n    return msg;\n}catch(e){\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "fb06bfc8575a00fd",
        "type": "function",
        "z": "aadaa91727c0d579",
        "name": "best admin function",
        "func": "try{\n    let record = msg.payload.csv[global.get(\"ptrModuleFacts\")];\n\n    // Initialize variables\n    let RECORD_TYP_TXT = record['RECORD_TYP_TXT'];\n    let NAICS_SECTOR_OLD_NUM = record['NAICS_SECTOR_OLD_NUM'];\n    let A_C_FORM_CODE_IRS = record['A_C_FORM_CODE_IRS'];\n    let A_C_RCPT_NET_CURR = parseFloat(record['A_C_RCPT_NET_CURR']);\n    let A_C_RCPT_INTEREST_CURR = parseFloat(record['A_C_RCPT_INTEREST_CURR']);\n    let A_C_RCPT_GROSSRENT_CURR = parseFloat(record['A_C_RCPT_GROSSRENT_CURR']);\n    let A_C_RCPT_OTHINCOME_CURR = parseFloat(record['A_C_RCPT_OTHINCOME_CURR']);\n    let A_C_RCPT_GROSSINC_CURR = parseFloat(record['A_C_RCPT_GROSSINC_CURR']);\n    let A_C_RCPT_TOTINC_CURR = parseFloat(record['A_C_RCPT_TOTINC_CURR']);\n    let A_C_RCPT_TOTREV_CURR = parseFloat(record['A_C_RCPT_TOTREV_CURR']);\n    let A_C_COST_GOODSOLD_CURR = parseFloat(record['A_C_COST_GOODSOLD_CURR']);\n    let A_C_EXPS_RENT_CURR = parseFloat(record['A_C_EXPS_RENT_CURR']);\n    let A_C_EXPS_DIRECT_CURR = parseFloat(record['A_C_EXPS_DIRECT_CURR']);\n\n    // Set function\n    const setVariable = (variable, value) => {\n        record[variable] = value;\n    };\n\n    // Logic\n    if (RECORD_TYP_TXT == '90') {\n        if (A_C_FORM_CODE_IRS == ' ' || A_C_FORM_CODE_IRS == 'C1') {\n            setVariable('ECRCPTOT', A_C_RCPT_NET_CURR);\n            setVariable('ACTION', 'Go to Main Routing');\n\n        } else if (['52', '53', '55'].includes(NAICS_SECTOR_OLD_NUM)) {\n            if (['01', '02', '03', '04', '05'].includes(A_C_FORM_CODE_IRS)) {\n                setVariable('ECRCPTOT', A_C_RCPT_NET_CURR + A_C_RCPT_INTEREST_CURR + A_C_RCPT_GROSSRENT_CURR + A_C_RCPT_OTHINCOME_CURR);\n            } else if (['06', '07'].includes(A_C_FORM_CODE_IRS)) {\n                setVariable('ECRCPTOT', A_C_RCPT_GROSSINC_CURR + A_C_RCPT_INTEREST_CURR);\n            } else if (A_C_FORM_CODE_IRS == '08') {\n                setVariable('ECRCPTOT', A_C_RCPT_TOTINC_CURR);\n            } else if (['09', '10', '11'].includes(A_C_FORM_CODE_IRS)) {\n                setVariable('ECRCPTOT', A_C_RCPT_TOTREV_CURR);\n            } else if (A_C_FORM_CODE_IRS == '12') {\n                setVariable('ECRCPTOT', A_C_RCPT_NET_CURR);\n            } else if (A_C_FORM_CODE_IRS == '13') {\n                setVariable('ECRCPTOT', A_C_RCPT_TOTINC_CURR + A_C_RCPT_INTEREST_CURR + A_C_RCPT_GROSSRENT_CURR);\n            }\n            setVariable('ACTION', 'Go to Main Routing');\n        } else if (['06', '07'].includes(A_C_FORM_CODE_IRS)) {\n            setVariable('ACTION', 'Go to Main Routing');\n        } else if (['51', '54', '56', '61', '62', '71', '81'].includes(NAICS_SECTOR_OLD_NUM)) {\n            if (['01', '02', '03', '04', '05', '12'].includes(A_C_FORM_CODE_IRS)) {\n                setVariable('ECRCPTOT', A_C_RCPT_NET_CURR);\n            } else if (['08', '13'].includes(A_C_FORM_CODE_IRS)) {\n                setVariable('ECRCPTOT', A_C_RCPT_TOTINC_CURR);\n            } else if (A_C_FORM_CODE_IRS == '09') {\n                setVariable('ECRCPTOT', A_C_RCPT_TOTREV_CURR + A_C_COST_GOODSOLD_CURR + A_C_EXPS_RENT_CURR + A_C_EXPS_DIRECT_CURR);\n            } else if (A_C_FORM_CODE_IRS == '10') {\n                setVariable('ECRCPTOT', A_C_RCPT_TOTREV_CURR + A_C_COST_GOODSOLD_CURR + A_C_EXPS_DIRECT_CURR);\n            } else if (A_C_FORM_CODE_IRS == '11') {\n                setVariable('ECRCPTOT', A_C_RCPT_TOTREV_CURR);\n            }\n            setVariable('ACTION', 'Go to Main Routing');\n        } else if (['21', '23', '31', '42', '44', '45', '72'].includes(NAICS_SECTOR_OLD_NUM)) {\n            if (['01', '02', '03', '04', '05', '12'].includes(A_C_FORM_CODE_IRS)) {\n                setVariable('ECRCPTOT', A_C_RCPT_NET_CURR);\n            } else if (['08', '13'].includes(A_C_FORM_CODE_IRS)) {\n                setVariable('ECRCPTOT', A_C_RCPT_TOTINC_CURR);\n            } else if (['09', '10'].includes(A_C_FORM_CODE_IRS)) {\n                setVariable('ECRCPTOT', A_C_RCPT_TOTREV_CURR + A_C_COST_GOODSOLD_CURR);\n            } else if (A_C_FORM_CODE_IRS == '11') {\n                setVariable('ECRCPTOT', A_C_RCPT_TOTREV_CURR);\n            }\n            setVariable('ACTION', 'Go to Main Routing');\n        } else if (['11', '22', '48'].includes(NAICS_SECTOR_OLD_NUM)) {\n            if (['01', '02', '03', '04', '05', '12'].includes(A_C_FORM_CODE_IRS)) {\n                setVariable('ECRCPTOT', A_C_RCPT_NET_CURR);\n            } else if (['08', '13'].includes(A_C_FORM_CODE_IRS)) {\n                setVariable('ECRCPTOT', A_C_RCPT_TOTINC_CURR);\n            } else if (['09', '10', '11'].includes(A_C_FORM_CODE_IRS)) {\n                setVariable('ECRCPTOT', A_C_RCPT_TOTREV_CURR);\n            }\n            setVariable('ACTION', 'Go to Main Routing');\n        } else {\n            setVariable('ACTION', 'Go to Main Routing')\n        }\n    }\n    else {\n        setVariable('ACTION', 'Go to Main Routing')\n    }\n    //setVariable('ACTION', 'Go to Completeness');\n\n    msg.payload.csv[global.get(\"ptrModuleFacts\")] = record;\n\n    console.log({\n        msg: msg.payload.csv[global.get(\"ptrModuleFacts\")]\n    })\n    return msg;\n}catch(e){\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "f2eeed6f42b8a31c",
        "type": "function",
        "z": "42be4655fd3a8c84",
        "name": "critical error",
        "func": "try{\n    let record_idx = global.get(\"ptrModuleFacts\");\n    let record = msg.payload.csv[record_idx];\n\n    function setResult() {\n        record['TABSTAT'] = \"N\";\n        record['NONTABFL'] = \"D\";\n        record['ACTION'] = \"Exit Edit\";\n        global.set('action', 'Exit Edit')\n    }\n\n    // function parseToNum(val) {\n    //     return isNaN(val) ? 0 : parseInt(val, 10);\n    // }\n    function naicsSectorCheck() {\n        let result =\n            parseFloat(record['PAY_ANN_VAL']) +\n            parseFloat(record['EMP_MAR12_NUM']) +\n            parseFloat(record['PAY_QTR1_VAL']) +\n            parseFloat(record['ECPAYANN']) +\n            parseFloat(record['ECPAYQ1']) +\n            parseFloat(record['ECEMPQ1']) +\n            parseFloat(record['ECPAYANL']);\n\n        if (parseFloat(record['NAICS_SECTOR_OLD_NUM']) === 31) {\n            result = parseFloat(result) + parseFloat(record['EXPS_TEMPSTAF_VAL']);\n        }\n        return result\n    }\n    let data = naicsSectorCheck();\n    record['DATA'] = data\n\n    if (record.hasOwnProperty('COV_CHG_CODE') &&\n        [\"111\", \"131\", \"791\"].includes(record['COV_CHG_CODE']?.toString()) &&\n        new Date(record['COV_CHG_DATE']) <=\n        new Date(\"01-01-\" + record.REF_PER.substring(0, 4)) &&\n        data == 0\n    ) {\n        setResult();\n        return msg;\n\n    } else if (record.hasOwnProperty('COV_CHG_CODE') && [\"181\", \"201\", \"801\", \"091\", \"121\", \"171\"].includes(record['COV_CHG_CODE']?.toString())) {\n        setResult();\n        return msg;\n    } else {\n        record['ACTION'] = \"Go To Main Routing\";\n        global.set('action', 'Go To Main Routing')\n        return msg;\n    }\n}catch(e){\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "d97e7c0dec380b3d",
        "type": "function",
        "z": "5eae5184a8f175fd",
        "name": "nonnorm function",
        "func": "const setCharAtPosition = (str, index, char) => {\n    if (index > str.length - 1) return str;\n    return str.substring(0, index) + char + str.substring(index + 1);\n};\nfunction setCharAt(str, index, chr) {\n    if (typeof str === 'undefined' || str === null || str === '') {\n        return '__' + chr;\n    } else {\n        if (index > str.length - 1) {\n            return str.padEnd(index, '_') + chr;\n        }\n        return str.substring(0, index) + chr + str.substring(index + 1);\n    }\n}\nconst pathA = (record) => {\n    if (record.OPSTATS === '4') {\n        record.OPSTATS = 'N';\n    } else if (record.OPSTATS === '5' && parseInt(record.ACTV_MIO_NUM) > 12) {\n        record.OPSTATS = 'Y';\n    }\n};\n\nconst pathB = (record) => {\n    record.OPSTATS = setCharAtPosition(record.OPSTATS || '   ', 2, 'R');\n};\n\nconst pathC = (record) => {\n    record.OPSTATS = setCharAtPosition(record.OPSTATS || '   ', 2, '*');\n};\n\nconst pathD = (record) => {\n    record.OPSTATS = 'N';\n};\n\nconst pathX = (record) => {\n   record['ACTION'] = \"Invalid RECORD_TYP_TXT value\";\n};\n\nconst initACTVMIONUMAndSetOPSTATS = (record) => {\n    const mioNum = parseInt(record.ACTV_MIO_NUM) || 0;\n    if (mioNum === 0 || mioNum > 12) {\n        record.ACTV_MIO_NUM = '12';\n        record[\"ACTV_MIO_NUM_F\"] = setCharAt(record[\"ACTV_MIO_NUM_F\"], 2, 'J');\n        record.OPSTATS = ' ';\n        return pathC(record);\n    } else {\n        return setOPSTATS_RorAsterisk(record);\n    }\n};\n\nconst setOPSTATS_RorAsterisk = (record) => {\n    if ((record.COVCODE === '111' || record.COVCODE === '113' || record.COVCODE === '791') &&\n        parseInt(record.ACTV_MIO_NUM) < 12 &&\n        record.COVC_CHG_DATE.startsWith('JAN-204')) {\n        record.OPSTATS = setCharAtPosition(record.OPSTATS || '   ', 2, 'R');\n    } else {\n        record.OPSTATS = setCharAtPosition(record.OPSTATS || '   ', 1, '*');\n    }\n    return pathC(record);\n};\n\nconst processRecord = (record) => {\n    if (!['10', '20', '30', '90'].includes(record.RECORD_TYP_TXT)) {\n        return pathX(record);\n    }\n    initACTVMIONUMAndSetOPSTATS(record);\n\n    if (record.OPSTAT_STAT === '4') {\n        pathD(record);\n    } else if (record.OPSTAT_STAT === '5' && parseInt(record.ACTV_MIO_NUM) > 12) {\n        pathA(record);\n    } else {\n        pathC(record);\n    }\n};\n\nlet record_idx = global.get(\"ptrModuleFacts\");\nconst record = msg.payload.csv[record_idx];\n\ntry {\n    processRecord(record);\n} catch (error) {\n    console.error(\"Error:\", error.message);\n    record.ACTION = \"Error processing record\";\n}\n\nmsg.payload.csv[record_idx] = record;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "9373014f1bd2d06a",
        "type": "function",
        "z": "1159e6c8f76efda3",
        "name": "ElectricEnergyModule",
        "func": "// let record_indx = global.get(\"ptrModuleFacts\")\n// let record = msg.payload.csv[record_indx];\n\n// msg.cache = global.get(\"lookupCache\")\n//     .data.find(\n//         item =>\n//             item.module === \"electric_energy\" &&\n//             item.param === 'electric_energy_module' &&\n//             item.program === \"aies\" &&\n//             item.unit_type === \"estab\"\n//     )?.json_values;\n\n//     console.log({\n//         msg: msg.cache['ELECTRIC_STATE']\n//     })\n\n// if (record['NAICS_SECTOR'] === '31' && record['SUBSAMP_IND_TXT'] != 'MC') {\n// console.log(1)\n//     record['T_STFIPS'] = record['GEO_STATE_FIPS'];\n//     console.log(2)\n//     if (record['EXPS_ELEC_VAL'] == 0 && record['ELEC_PRCH_KWH_NUM'] == 0) {\n//         console.log(3)\n//             record['ACTION'] = 'Go To A'\n//     } else if (record['EXPS_ELEC_VAL'] == 0 && record['ELEC_PRCH_KWH_NUM'] > 0) {\n//         console.log(4)\n//         record['ELEC_PRCH_KWH_NUM'] = 0;\n//         if (record['ELEC_PRCH_KWH_NUM_F'] && record['ELEC_PRCH_KWH_NUM_F'].length >= 3) {\n//             console.log(5)\n//             record['ELEC_PRCH_KWH_NUM_F'] = record['ELEC_PRCH_KWH_NUM_F'].substring(0, 2) + 'J';\n//         } else {\n//             console.log(6)\n//             record['ELEC_PRCH_KWH_NUM_F'] = '_J';\n//         }\n//         console.log(7)\n//         record['ACTION'] = 'Go To A'\n//     } else {\n//         console.log(8)\n//         let found = false;\n//         for (let key in msg.cache['ELECTRIC_STATE']) {\n//             console.log(9)\n//             if (Array.isArray(msg.cache['ELECTRIC_STATE']) && msg.cache['ELECTRIC_STATE'].some(entry => parseInt(entry[\"GEO_ST\"]) === parseInt(record['T_STFIPS']))) {\n//                 console.log(10)\n//                 found = true;\n//                 break;\n//             }\n//         }\n//         if (found) {\n//             console.log(11)\n//             record['ACTION'] = 'Go To 2'\n//         } else {\n//             console.log(12)\n//             record['Referral_Flag'] = 'MISSING_ST_FIPS_ELECTRIC';\n//             record['ACTION'] = 'Go To A'\n\n//         }\n//     }\n// } else {\n//     console.log(13)\n//     record['ACTION'] = 'Go To A'\n// }\n// msg.payload.csv[record_indx] = record;\n// return msg;\nlet record_indx = global.get(\"ptrModuleFacts\")\nlet record = msg.payload.csv[record_indx];\n\nmsg.cache = global.get(\"lookupCache\")\n    .data.find(\n        item =>\n            item.module === \"electric_energy\" &&\n            item.param === 'electric_energy_module' &&\n            item.program === \"aies\" &&\n            item.unit_type === \"estab\"\n    )?.json_values;\n\nconsole.log({\n    msg: msg.cache['ELECTRIC_STATE']\n})\n\nif (record['NAICS_SECTOR'] === '31' && record['SUBSAMP_IND_TXT'] != 'MC') {\n    console.log(1)\n    record['T_STFIPS'] = record['GEO_STATE_FIPS'];\n    console.log(2)\n    if (record['EXPS_ELEC_VAL'] == 0 && record['ELEC_PRCH_KWH_NUM'] == 0) {\n        console.log(3)\n        record['ACTION'] = 'Go To Main Routing'\n    } else if (record['EXPS_ELEC_VAL'] == 0 && record['ELEC_PRCH_KWH_NUM'] > 0) {\n        console.log(4)\n        record['ELEC_PRCH_KWH_NUM'] = 0;\n        if (record['ELEC_PRCH_KWH_NUM_F'] && record['ELEC_PRCH_KWH_NUM_F'].length >= 3) {\n            record['ELEC_PRCH_KWH_NUM_F'] = record['ELEC_PRCH_KWH_NUM_F'].substring(0, 2) + 'J' + record['ELEC_PRCH_KWH_NUM_F'].substring(3);\n        } else if (record['ELEC_PRCH_KWH_NUM_F'] && record['ELEC_PRCH_KWH_NUM_F'].length >= 2) {\n            record['ELEC_PRCH_KWH_NUM_F'] = record['ELEC_PRCH_KWH_NUM_F'].substring(0, 2) + 'J';\n        } else if (record['ELEC_PRCH_KWH_NUM_F'] && record['ELEC_PRCH_KWH_NUM_F'].length >= 1) {\n            record['ELEC_PRCH_KWH_NUM_F'] = record['ELEC_PRCH_KWH_NUM_F'].substring(0, 1) + ' J';\n        } else {\n            record['ELEC_PRCH_KWH_NUM_F'] = '  J';\n        }\n        console.log(7)\n        record['ACTION'] = 'Go To Main Routing'\n    } else {\n        console.log(8)\n        let found = false;\n        for (let key in msg.cache['ELECTRIC_STATE']) {\n            console.log(9)\n            if (Array.isArray(msg.cache['ELECTRIC_STATE']) && msg.cache['ELECTRIC_STATE'].some(entry => parseInt(entry[\"GEO_ST\"]) === parseInt(record['T_STFIPS']))) {\n                console.log(10)\n                found = true;\n                break;\n            }\n        }\n        if (found) {\n            console.log(11)\n            record['ACTION'] = 'Go To 2'\n        } else {\n            console.log(12)\n            record['Referral_Flag'] = 'MISSING_ST_FIPS_ELECTRIC';\n            record['ACTION'] = 'Go To Main Routing'\n\n        }\n    }\n} else {\n    console.log(13)\n    record['ACTION'] = 'Go To Main Routing'\n}\nmsg.payload.csv[record_indx] = record;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "cc3b332a2e1dd3b1",
        "type": "function",
        "z": "aadd13b9b9077fc3",
        "name": "Electric Energy module cont",
        "func": "// let record = msg.payload.csv[global.get(\"ptrModuleFacts\")];\n\n// msg.cache = global.get(\"lookupCache\")\n//     .data.find(\n//         item =>\n//             item.module === \"electric_energy\" &&\n//             item.param === 'electric_energy_module' &&\n//             item.program === \"aies\" &&\n//             item.unit_type === \"estab\"\n//     )?.json_values;\n\n// record['T_STFIPS'] = parseInt(record['GEO_STATE_FIPS']);\n\n// let electricState = msg.cache['ELECTRIC_STATE'].find(state => parseInt(state.GEO_ST) == parseInt(record['T_STFIPS']));\n\n// if (!electricState) {\n//     record['ACTION'] = 'Error: GEO_ST not found in ELECTRIC_STATE';\n//     return msg;\n// }\n\n// if (parseInt(record['EXPS_ELEC_VAL']) > 0 && parseInt(record['ELEC_PRCH_KWH_NUM']) == 0) {\n//     record['ACTION'] = 'Go To B';\n//     return msg;\n// }\n\n// if (parseFloat(record['EXPS_ELEC_VAL']) <= parseFloat(electricState['LL']) && (parseFloat(record['EXPS_ELEC_VAL']) / parseFloat(record['ELEC_PRCH_KWH_NUM'])) <= parseFloat(electricState['UL'])) {\n//     record['ACTION'] = 'Go To A';\n//     return msg;\n// }\n\n// // if (parseFloat(electricState.LL) <= ((parseFloat(record['EXPS_ELEC_VAL']) * 1000) / parseFloat(record['ELEC_PRCH_KWH_NUM'])) <= parseFloat(electricState.UL)) {\n//     let value = (parseFloat(record['EXPS_ELEC_VAL']) * 1000) / parseFloat(record['ELEC_PRCH_KWH_NUM']);\n//     if (parseFloat(electricState.LL) <= value && value <= parseFloat(electricState.UL)) {\n//     record['ELEC_PRCH_KWH_NUM'] = parseFloat(Math.round(record['ELEC_PRCH_KWH_NUM']) * (parseFloat(record['EXPS_ELEC_VAL']) * parseFloat(electricState['ELEC_INTERSECT']) / parseFloat(record['EXPS_ELEC_VAL'])));\n//     if (parseFloat(record['ELEC_PRCH_KWH_NUM_F']) && parseFloat(record['ELEC_PRCH_KWH_NUM_F']).length >= 3) {\n//         record['ELEC_PRCH_KWH_NUM_F'] = record['ELEC_PRCH_KWH_NUM_F'].substring(0, 2) + 'N';\n//     } else {\n//         record['ELEC_PRCH_KWH_NUM_F'] = '_N';\n//     }\n//     record['ACTION'] = 'Go To A';\n//     return msg;\n// }\n\n// record['ACTION'] = 'Call Electric Impute Module';\n// return msg;\n\nlet record = msg.payload.csv[global.get(\"ptrModuleFacts\")];\n\nmsg.cache = global.get(\"lookupCache\")\n    .data.find(\n        item =>\n            item.module === \"electric_energy\" &&\n            item.param === 'electric_energy_module' &&\n            item.program === \"aies\" &&\n            item.unit_type === \"estab\"\n    )?.json_values;\n\nrecord['T_STFIPS'] = record['GEO_STATE_FIPS'];\n\nlet electricState = msg.cache['ELECTRIC_STATE'].find(state => parseInt(state.GEO_ST) == parseInt(record['T_STFIPS']));\n\nif (!electricState) {\n    record['ACTION'] = 'Error: GEO_ST not found in ELECTRIC_STATE';\n    return msg;\n}\n\nlet value = parseFloat(record['EXPS_ELEC_VAL']) / parseFloat(record['ELEC_PRCH_KWH_NUM']);\nlet value2 = (parseFloat(record['EXPS_ELEC_VAL']) * 1000) / parseFloat(record['ELEC_PRCH_KWH_NUM']);\n\nif (parseInt(record['EXPS_ELEC_VAL']) > 0 && parseInt(record['ELEC_PRCH_KWH_NUM']) == 0) {\n    record['ACTION'] = 'Go To Electric Impute Module';\n    return msg;\n}\n\nelse if (parseFloat(electricState.LL) <= value && value <= parseFloat(electricState.UL)) {\n    record['ACTION'] = 'Go To A';\n    return msg;\n}\n\nelse if (parseFloat(electricState.LL) <= value2 && value2 <= parseFloat(electricState.UL)) {\n    record['ELEC_PRCH_KWH_NUM'] = parseFloat(Math.round(record['ELEC_PRCH_KWH_NUM'] / 1000));\n    if (record['ELEC_PRCH_KWH_NUM_F'] && record['ELEC_PRCH_KWH_NUM_F'].length >= 3) {\n        record['ELEC_PRCH_KWH_NUM_F'] = record['ELEC_PRCH_KWH_NUM_F'].substring(0, 2) + 'N' + record['ELEC_PRCH_KWH_NUM_F'].substring(3);\n    } else if (record['ELEC_PRCH_KWH_NUM_F'] && record['ELEC_PRCH_KWH_NUM_F'].length >= 2) {\n        record['ELEC_PRCH_KWH_NUM_F'] = record['ELEC_PRCH_KWH_NUM_F'].substring(0, 2) + 'N';\n    } else if (record['ELEC_PRCH_KWH_NUM_F'] && record['ELEC_PRCH_KWH_NUM_F'].length >= 1) {\n        record['ELEC_PRCH_KWH_NUM_F'] = record['ELEC_PRCH_KWH_NUM_F'].substring(0, 1) + ' N';\n    } else {\n        record['ELEC_PRCH_KWH_NUM_F'] = '  N';\n    }\n    record['ACTION'] = 'Go To A';\n    return msg;\n}\n\nelse {\n    record['ACTION'] = 'Call Electric Impute Module';\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "8a4a29f10142c232",
        "type": "function",
        "z": "3ccae806a14cca8d",
        "name": "Electric energy module impute",
        "func": "// let record = msg.payload.csv[global.get(\"ptrModuleFacts\")];\n\n// msg.cache = global.get(\"lookupCache\")\n//     .data.find(\n//         item =>\n//             item.module === \"electric_energy\" &&\n//             item.param === 'electric_energy_module' &&\n//             item.program === \"aies\" &&\n//             item.unit_type === \"estab\"\n//     )?.json_values;\n\n// record['T_STFIPS'] = record['GEO_STATE_FIPS'];\n\n// let electricState = msg.cache.ELECTRIC_STATE.find(state => state.GEO_ST == record['T_STFIPS']);\n\n// if(!electricState) {\n//     // Handle case where GEO_ST doesn't match any in the ELECTRIC_STATE array\n//     record['ACTION'] = 'Error: GEO_ST not found in ELECTRIC_STATE';\n//     return msg;\n// }\n\n// // Step 1: Check if EXPS_ELEC_VAL >= 10000\n// if (record['EXPS_ELEC_VAL'] >= 10000) {\n//     record['ACTION'] = 'Go to Main Routing';\n//     return msg;\n// }\n\n// // Step 2: Check if EXPS_ELEC_VAL >= ELEC\n// if (record['EXPS_ELEC_VAL'] >= electricState.ELEC) {\n//     record['ELEC_PRCH_KWH_NUM'] = Math.round(record['EXPS_ELEC_VAL'] * electricState.AVG1);\n//     if (record['ELEC_PRCH_KWH_NUM_F'] && record['ELEC_PRCH_KWH_NUM_F'].length >= 3) {\n//         record['ELEC_PRCH_KWH_NUM_F'] = record['ELEC_PRCH_KWH_NUM_F'].substring(0, 2) + 'B';\n//     } else {\n//         record['ELEC_PRCH_KWH_NUM_F'] = '_B';\n//     }\n//     record['ACTION'] = 'Go to A';\n//     return msg;\n// }\n\n// // Step 3: Check if H EXPS_ELEC_VAL > 0\n// if (record['H_EXPS_ELEC_VAL'] > 0) {\n//     record['ELEC_PRCH_KWH_NUM'] = Math.round(record['EXPS_ELEC_VAL'] * electricState.AVG2);\n//     if (record['ELEC_PRCH_KWH_NUM_F'] && record['ELEC_PRCH_KWH_NUM_F'].length >= 3) {\n//         record['ELEC_PRCH_KWH_NUM_F'] = record['ELEC_PRCH_KWH_NUM_F'].substring(0, 2) + 'B';\n//     } else {\n//         record['ELEC_PRCH_KWH_NUM_F'] = '_B';\n//     }\n//     record['ACTION'] = 'Go to A';\n//     return msg;\n// }\n\n// // Step 4: If none of the above conditions met\n// record['ELEC_PRCH_KWH_NUM'] = Math.round(record['EXPS_ELEC_VAL'] / record['H_EXPS_ELEC_VAL'] * record['H_ELEC_PRCH_KWH_NUM']);\n// if (record['ELEC_PRCH_KWH_NUM_F'] && record['ELEC_PRCH_KWH_NUM_F'].length >= 3) {\n//     record['ELEC_PRCH_KWH_NUM_F'] = record['ELEC_PRCH_KWH_NUM_F'].substring(0, 2) + 'H';\n// } else {\n//     record['ELEC_PRCH_KWH_NUM_F'] = '_H';\n// }\n// record['ACTION'] = 'Go to A';\n// return msg;\n\n\nlet record = msg.payload.csv[global.get(\"ptrModuleFacts\")];\n\nmsg.cache = global.get(\"lookupCache\")\n    .data.find(\n        item =>\n            item.module === \"electric_energy\" &&\n            item.param === 'electric_energy_module' &&\n            item.program === \"aies\" &&\n            item.unit_type === \"estab\"\n    )?.json_values;\n\nrecord['T_STFIPS'] = record['GEO_STATE_FIPS'];\n\nlet electricState = msg.cache['ELECTRIC_STATE'].find(state => parseInt(state.GEO_ST) == parseInt(record['T_STFIPS']));\n\nif (!electricState) {\n    // Handle case where GEO_ST doesn't match any in the ELECTRIC_STATE array\n    record['ACTION'] = 'Error: GEO_ST not found in ELECTRIC_STATE';\n    return msg;\n}\n\n// Step 1: Check if EXPS_ELEC_VAL >= 10000\nif (parseFloat(record['EXPS_ELEC_VAL']) >= 10000) {\n    if (parseFloat(record['H_EXPS_ELEC_VAL']) > 0) {\n        record['ELEC_PRCH_KWH_NUM'] = Math.round((parseFloat(record['EXPS_ELEC_VAL']) / parseFloat(record['H_EXPS_ELEC_VAL'])) * parseFloat(record['H_ELEC_PRCH_KWH_NUM']));\n        if (record['ELEC_PRCH_KWH_NUM_F'] && record['ELEC_PRCH_KWH_NUM_F'].length >= 3) {\n            record['ELEC_PRCH_KWH_NUM_F'] = record['ELEC_PRCH_KWH_NUM_F'].substring(0, 2) + 'H' + record['ELEC_PRCH_KWH_NUM_F'].substring(3);\n        } else if (record['ELEC_PRCH_KWH_NUM_F'] && record['ELEC_PRCH_KWH_NUM_F'].length >= 2) {\n            record['ELEC_PRCH_KWH_NUM_F'] = record['ELEC_PRCH_KWH_NUM_F'].substring(0, 2) + 'H';\n        } else if (record['ELEC_PRCH_KWH_NUM_F'] && record['ELEC_PRCH_KWH_NUM_F'].length >= 1) {\n            record['ELEC_PRCH_KWH_NUM_F'] = record['ELEC_PRCH_KWH_NUM_F'].substring(0, 1) + ' H';\n        } else {\n            record['ELEC_PRCH_KWH_NUM_F'] = '  H';\n        }\n        record['ACTION'] = 'Go to Main Routing';\n        return msg;\n    }\n    else {\n        record['ELEC_PRCH_KWH_NUM'] = Math.round(parseFloat(record['EXPS_ELEC_VAL'] * electricState.AVG1))\n        if (record['ELEC_PRCH_KWH_NUM_F'] && record['ELEC_PRCH_KWH_NUM_F'].length >= 3) {\n            record['ELEC_PRCH_KWH_NUM_F'] = record['ELEC_PRCH_KWH_NUM_F'].substring(0, 2) + 'B' + record['ELEC_PRCH_KWH_NUM_F'].substring(3);\n        } else if (record['ELEC_PRCH_KWH_NUM_F'] && record['ELEC_PRCH_KWH_NUM_F'].length >= 2) {\n            record['ELEC_PRCH_KWH_NUM_F'] = record['ELEC_PRCH_KWH_NUM_F'].substring(0, 2) + 'B';\n        } else if (record['ELEC_PRCH_KWH_NUM_F'] && record['ELEC_PRCH_KWH_NUM_F'].length >= 1) {\n            record['ELEC_PRCH_KWH_NUM_F'] = record['ELEC_PRCH_KWH_NUM_F'].substring(0, 1) + ' B';\n        } else {\n            record['ELEC_PRCH_KWH_NUM_F'] = '  B';\n        }\n        record['ACTION'] = 'Go to Main Routing';\n        return msg;\n    }\n} else {\n    // if (parseFloat(record['EXPS_ELEC_VAL']) >= parseFloat(record['ELEC'])) {\n    if (parseFloat(record['EXPS_ELEC_VAL']) >= parseFloat(electricState.ELEC_INTERSECT)) {\n        record['ELEC_PRCH_KWH_NUM'] = Math.round(parseFloat(record['EXPS_ELEC_VAL']) * electricState.AVG1);\n        if (record['ELEC_PRCH_KWH_NUM_F'] && record['ELEC_PRCH_KWH_NUM_F'].length >= 3) {\n            record['ELEC_PRCH_KWH_NUM_F'] = record['ELEC_PRCH_KWH_NUM_F'].substring(0, 2) + 'B' + record['ELEC_PRCH_KWH_NUM_F'].substring(3);\n        } else if (record['ELEC_PRCH_KWH_NUM_F'] && record['ELEC_PRCH_KWH_NUM_F'].length >= 2) {\n            record['ELEC_PRCH_KWH_NUM_F'] = record['ELEC_PRCH_KWH_NUM_F'].substring(0, 2) + 'B';\n        } else if (record['ELEC_PRCH_KWH_NUM_F'] && record['ELEC_PRCH_KWH_NUM_F'].length >= 1) {\n            record['ELEC_PRCH_KWH_NUM_F'] = record['ELEC_PRCH_KWH_NUM_F'].substring(0, 1) + ' B';\n        } else {\n            record['ELEC_PRCH_KWH_NUM_F'] = '  B';\n        }\n        record['ACTION'] = 'Go to Main Routing';\n        return msg;\n    } else {\n        record['ELEC_PRCH_KWH_NUM'] = Math.round(parseFloat(record['EXPS_ELEC_VAL']) * electricState.AVG2);\n        if (record['ELEC_PRCH_KWH_NUM_F'] && record['ELEC_PRCH_KWH_NUM_F'].length >= 3) {\n            record['ELEC_PRCH_KWH_NUM_F'] = record['ELEC_PRCH_KWH_NUM_F'].substring(0, 2) + 'B' + record['ELEC_PRCH_KWH_NUM_F'].substring(3);\n        } else if (record['ELEC_PRCH_KWH_NUM_F'] && record['ELEC_PRCH_KWH_NUM_F'].length >= 2) {\n            record['ELEC_PRCH_KWH_NUM_F'] = record['ELEC_PRCH_KWH_NUM_F'].substring(0, 2) + 'B';\n        } else if (record['ELEC_PRCH_KWH_NUM_F'] && record['ELEC_PRCH_KWH_NUM_F'].length >= 1) {\n            record['ELEC_PRCH_KWH_NUM_F'] = record['ELEC_PRCH_KWH_NUM_F'].substring(0, 1) + ' B';\n        } else {\n            record['ELEC_PRCH_KWH_NUM_F'] = '  B';\n        }\n        record['ACTION'] = 'Go to Main Routing';\n        return msg;\n\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "839fb510069fa734",
        "type": "function",
        "z": "7c71f52633d8c794",
        "name": "rcpt_tot_val",
        "func": "let record = msg.payload.csv[global.get(\"ptrModuleFacts\")];\n\nconst NAICS_SECTOR_OLD_NUM = record['NAICS_SECTOR_OLD_NUM'];\nconst COVCHGCD = record['COVCHGCD'];\nconst RCPT_TOT_VAL = parseFloat(record['RCPT_TOT_VAL']);\nconst ECRCPTOT = parseFloat(record['ECRCPTOT']);\nconst REPORTING_ID_TYP_TXT = record['REPORTING_ID_TYP_TXT'];\nconst MONTHLY_DATA = parseFloat(record['MONTHLY_DATA']); // assuming the variable name is this\nconst QSS_DATA = parseFloat(record['QSS_DATA']); // assuming the variable name is this\nconst MADB_2022_RCPTOT = parseFloat(record['MADB_2022_RCPTOT']); // assuming the variable name is this\nconst NAPCSBLTOT = parseFloat(record['NAPCSBLTOT']);\n// Assuming default initial values\n// record['RCPT_TOT_VAL'] = 0; // set to 0 by default\n// const monthlyCheck = () => {\n//     if (MONTHLY_DATA > 0 && QSS_DATA > 0) {\n//         record['RCPT_TOT_VAL'] = 'SUM(Monthly OVER SUM(Quarterly))'; // The exact logic to sum these is not clear from the flowchart\n//         record['RCPT_TOT_VAL_F'] = 'Y';\n//     }\n// }\nconst monthlyCheck = () => {\n    if (MONTHLY_DATA > 0) {\n        record['RCPT_TOT_VAL'] = Math.round(MONTHLY_DATA / 1000);\n        if (record['RCPT_TOT_VAL_F'] && record['RCPT_TOT_VAL_F'].length >= 3) {\n            record['RCPT_TOT_VAL_F'] = record['RCPT_TOT_VAL_F'].substring(0, 2) + 'J' + record['RCPT_TOT_VAL_F'].substring(3);\n        } else if (record['RCPT_TOT_VAL_F'] && record['RCPT_TOT_VAL_F'].length >= 2) {\n            record['RCPT_TOT_VAL_F'] = record['RCPT_TOT_VAL_F'].substring(0, 2) + 'J';\n        } else if (record['RCPT_TOT_VAL_F'] && record['RCPT_TOT_VAL_F'].length >= 1) {\n            record['RCPT_TOT_VAL_F'] = record['RCPT_TOT_VAL_F'].substring(0, 1) + ' J';\n        } else {\n            record['RCPT_TOT_VAL_F'] = '  J';\n        }\n    } else if (QSS_DATA > 0) {\n        record['RCPT_TOT_VAL'] = QSS_DATA;\n        if (record['RCPT_TOT_VAL_F'] && record['RCPT_TOT_VAL_F'].length >= 3) {\n            record['RCPT_TOT_VAL_F'] = record['RCPT_TOT_VAL_F'].substring(0, 2) + 'J' + record['RCPT_TOT_VAL_F'].substring(3);\n        } else if (record['RCPT_TOT_VAL_F'] && record['RCPT_TOT_VAL_F'].length >= 2) {\n            record['RCPT_TOT_VAL_F'] = record['RCPT_TOT_VAL_F'].substring(0, 2) + 'J';\n        } else if (record['RCPT_TOT_VAL_F'] && record['RCPT_TOT_VAL_F'].length >= 1) {\n            record['RCPT_TOT_VAL_F'] = record['RCPT_TOT_VAL_F'].substring(0, 1) + ' J';\n        } else {\n            record['RCPT_TOT_VAL_F'] = '  J';\n        }\n    }\n    record['ACTION'] = 'Go to PAY_QTR1_VAL';\n}\n\nif (NAICS_SECTOR_OLD_NUM === '31' && COVCHGCD === '401') {\n    if (RCPT_TOT_VAL === 0) {\n        record['ACTION'] = 'Go to PAY_QTR1_VAL';\n    }\n    else {\n        record['ACTION'] = 'Logic not given in spec if failed'\n    }\n    // record['RCPT_TOT_VAL'] = 'NAPCSBLTOT'; // assuming 'NAPCSBLTOT' is a value/variable from somewhere in your system\n    // record['RCPT_TOT_VAL_F3.1'] = 'L';\n} else if (NAICS_SECTOR_OLD_NUM === '31' && NAPCSBLTOT > 0) {\n    record['RCPT_TOT_VAL'] = NAPCSBLTOT;\n    if (record['RCPT_TOT_VAL_F'] && record['RCPT_TOT_VAL_F'].length >= 3) {\n        record['RCPT_TOT_VAL_F'] = record['RCPT_TOT_VAL_F'].substring(0, 2) + 'L' + record['RCPT_TOT_VAL_F'].substring(3);\n    } else if (record['RCPT_TOT_VAL_F'] && record['RCPT_TOT_VAL_F'].length >= 2) {\n        record['RCPT_TOT_VAL_F'] = record['RCPT_TOT_VAL_F'].substring(0, 2) + 'L';\n    } else if (record['RCPT_TOT_VAL_F'] && record['RCPT_TOT_VAL_F'].length >= 1) {\n        record['RCPT_TOT_VAL_F'] = record['RCPT_TOT_VAL_F'].substring(0, 1) + ' L';\n    } else {\n        record['RCPT_TOT_VAL_F'] = '  L';\n    }\n    record['ACTION'] = 'Go to PAY_QTR1_VAL';\n    // record['RCPT_TOT_VAL'] = 'NAPCSBLTOT'; // assuming 'NAPCSBLTOT' is a value/variable from somewhere in your system\n    // record['RCPT_TOT_VAL_F3.1'] = 'L';\n} else if (REPORTING_ID_TYP_TXT === 'SU') {\n    if (ECRCPTOT > 0) {\n        record['RCPT_TOT_VAL'] = ECRCPTOT;\n        if (record['RCPT_TOT_VAL_F'] && record['RCPT_TOT_VAL_F'].length >= 3) {\n            record['RCPT_TOT_VAL_F'] = record['RCPT_TOT_VAL_F'].substring(0, 2) + 'A' + record['RCPT_TOT_VAL_F'].substring(3);\n        } else if (record['RCPT_TOT_VAL_F'] && record['RCPT_TOT_VAL_F'].length >= 2) {\n            record['RCPT_TOT_VAL_F'] = record['RCPT_TOT_VAL_F'].substring(0, 2) + 'A';\n        } else if (record['RCPT_TOT_VAL_F'] && record['RCPT_TOT_VAL_F'].length >= 1) {\n            record['RCPT_TOT_VAL_F'] = record['RCPT_TOT_VAL_F'].substring(0, 1) + ' A';\n        } else {\n            record['RCPT_TOT_VAL_F'] = '  A';\n        }\n        record['ACTION'] = 'Go to PAY_QTR1_VAL';\n    } else {\n        monthlyCheck()\n    }\n\n} else if (REPORTING_ID_TYP_TXT === 'KAU' && ['22', '11', '42', '44', '48', '51', '52', '53', '54', '55', '56', '61', '62', '71', '72', '81'].includes(NAICS_SECTOR_OLD_NUM)) {\n    monthlyCheck()\n} else if (MADB_2022_RCPTOT > 0) {\n    const CYPYF = parseFloat(record['CYPYF']);  // Fetching the CYPYF value from global context\n    record['RCPT_TOT_VAL'] = MADB_2022_RCPTOT * CYPYF;\n    if (record['RCPT_TOT_VAL_F'] && record['RCPT_TOT_VAL_F'].length >= 3) {\n        record['RCPT_TOT_VAL_F'] = record['RCPT_TOT_VAL_F'].substring(0, 2) + 'H' + record['RCPT_TOT_VAL_F'].substring(3);\n    } else if (record['RCPT_TOT_VAL_F'] && record['RCPT_TOT_VAL_F'].length >= 2) {\n        record['RCPT_TOT_VAL_F'] = record['RCPT_TOT_VAL_F'].substring(0, 2) + 'H';\n    } else if (record['RCPT_TOT_VAL_F'] && record['RCPT_TOT_VAL_F'].length >= 1) {\n        record['RCPT_TOT_VAL_F'] = record['RCPT_TOT_VAL_F'].substring(0, 1) + ' H';\n    } else {\n        record['RCPT_TOT_VAL_F'] = '  H';\n    }\n    record['ACTION'] = 'Go to PAY_QTR1_VAL';\n} else {\n    record['ACTION'] = 'Go to PAY_QTR1_VAL';\n}\n\n// Saving updated record back to the message payload\nmsg.payload.csv[global.get(\"ptrModuleFacts\")] = record;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "8ffe802b67aef5e3",
        "type": "function",
        "z": "4781d07fda613850",
        "name": "EMP_MAR12_NUM",
        "func": "msg.cache = global.get(\"lookupCache\")\n\nconst setVariable = (variable, value) => {\n    record[variable] = value;\n};\n\nlet record = msg.payload.csv[global.get(\"ptrModuleFacts\")];\n\nif (record['NAICS_SECTOR_OLD_NUM'] === '31' \n&&    (parseFloat(record['EMP_MAR12_PRDWRK_NUM']) + parseFloat(record['EMP_MAR12_NONPRDWRK_NUM'])) > 0\n) {\n    setVariable('EMP_MAR12_NUM', parseFloat(record['EMP_MAR12_PRDWRK_NUM']) + parseFloat(record['EMP_MAR12_NONPRDWRK_NUM']));\n    if (record['EMP_MAR12_NUM_F'] && record['EMP_MAR12_NUM_F'].length >= 3) {\n        record['EMP_MAR12_NUM_F'] = record['EMP_MAR12_NUM_F'].substring(0, 2) + 'L' + record['EMP_MAR12_NUM_F'].substring(3);\n    } else if (record['EMP_MAR12_NUM_F'] && record['EMP_MAR12_NUM_F'].length >= 2) {\n        record['EMP_MAR12_NUM_F'] = record['EMP_MAR12_NUM_F'].substring(0, 2) + 'L';\n    } else if (record['EMP_MAR12_NUM_F'] && record['EMP_MAR12_NUM_F'].length >= 1) {\n        record['EMP_MAR12_NUM_F'] = record['EMP_MAR12_NUM_F'].substring(0, 1) + ' L';\n    } else {\n        record['EMP_MAR12_NUM_F'] = '  L';\n    }\n    setVariable('ACTION', 'Return to completeness module');\n} else if (record['REPORTING_ID_TYP_TXT'] === 'SU') {\n    if (parseFloat(record['ECEMPQ1']) > 0) {\n        setVariable('EMP_MAR12_NUM', record['ECEMPQ1']);\n        if (record['EMP_MAR12_NUM_F'] && record['EMP_MAR12_NUM_F'].length >= 3) {\n            record['EMP_MAR12_NUM_F'] = record['EMP_MAR12_NUM_F'].substring(0, 2) + 'A' + record['EMP_MAR12_NUM_F'].substring(3);\n        } else if (record['EMP_MAR12_NUM_F'] && record['EMP_MAR12_NUM_F'].length >= 2) {\n            record['EMP_MAR12_NUM_F'] = record['EMP_MAR12_NUM_F'].substring(0, 2) + 'A';\n        } else if (record['EMP_MAR12_NUM_F'] && record['EMP_MAR12_NUM_F'].length >= 1) {\n            record['EMP_MAR12_NUM_F'] = record['EMP_MAR12_NUM_F'].substring(0, 1) + ' A';\n        } else {\n            record['EMP_MAR12_NUM_F'] = '  A';\n        }\n        setVariable('ACTION', 'Return to completeness module');\n    }else{\n        if (parseFloat(record['MADB_2022_EMPQ1']) > 0) {\n            setVariable('EMP_MAR12_NUM', parseFloat(record['MADB_2022_EMPQ1']) * parseFloat(record['CYPYF']));\n            if (record['EMP_MAR12_NUM_F'] && record['EMP_MAR12_NUM_F'].length >= 3) {\n                record['EMP_MAR12_NUM_F'] = record['EMP_MAR12_NUM_F'].substring(0, 2) + 'H' + record['EMP_MAR12_NUM_F'].substring(3);\n            } else if (record['EMP_MAR12_NUM_F'] && record['EMP_MAR12_NUM_F'].length >= 2) {\n                record['EMP_MAR12_NUM_F'] = record['EMP_MAR12_NUM_F'].substring(0, 2) + 'H';\n            } else if (record['EMP_MAR12_NUM_F'] && record['EMP_MAR12_NUM_F'].length >= 1) {\n                record['EMP_MAR12_NUM_F'] = record['EMP_MAR12_NUM_F'].substring(0, 1) + ' H';\n            } else {\n                record['EMP_MAR12_NUM_F'] = '  H';\n            }\n            setVariable('ACTION', 'Return to completeness module');\n        } else {\n            setVariable('ACTION', 'Return to completeness module');\n        }\n    }\n} else if (record['REPORTING_ID_TYP_TXT'] === 'MU' && parseFloat(record['CY_EMP_MAR12']) > 0) {\n    setVariable('EMP_MAR12_NUM', record['CY_EMP_MAR12']);\n    setVariable('EMP_MAR12_NUM_F', record['CY_EMP_MAR12_F']);\n    setVariable('ACTION', 'Return to completeness module');\n} else if (parseFloat(record['MADB_2022_EMPQ1']) > 0) {\n    setVariable('EMP_MAR12_NUM', parseFloat(record['MADB_2022_EMPQ1']) * parseFloat(record['CYPYF']));\n    if (record['EMP_MAR12_NUM_F'] && record['EMP_MAR12_NUM_F'].length >= 3) {\n        record['EMP_MAR12_NUM_F'] = record['EMP_MAR12_NUM_F'].substring(0, 2) + 'H' + record['EMP_MAR12_NUM_F'].substring(3);\n    } else if (record['EMP_MAR12_NUM_F'] && record['EMP_MAR12_NUM_F'].length >= 2) {\n        record['EMP_MAR12_NUM_F'] = record['EMP_MAR12_NUM_F'].substring(0, 2) + 'H';\n    } else if (record['EMP_MAR12_NUM_F'] && record['EMP_MAR12_NUM_F'].length >= 1) {\n        record['EMP_MAR12_NUM_F'] = record['EMP_MAR12_NUM_F'].substring(0, 1) + ' H';\n    } else {\n        record['EMP_MAR12_NUM_F'] = '  H';\n    }\n    setVariable('ACTION', 'Return to completeness module');\n} else {\n    setVariable('ACTION', 'Return to completeness module');\n}\n\nmsg.payload.csv[global.get(\"ptrModuleFacts\")] = record;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "8b5375b4024c9c0b",
        "type": "function",
        "z": "253763f13152858b",
        "name": "pay_qtr1_val",
        "func": "msg.cache = global.get(\"lookupCache\")\nlet record = msg.payload.csv[global.get(\"ptrModuleFacts\")];\n\nconst setVariable = (variable, value) => {\n    record[variable] = value;\n};\n\nif (record['NAICS_SECTOR_OLD_NUM'] === '31' &&\n    ((parseFloat(record['PAY_QTR1_PRDWRK_VAL']) + parseFloat(record['PAY_QTR1_NONPRDWRK_VAL'])) > 0)\n) {\n    setVariable('PAY_QTR1_VAL', parseFloat(record['PAY_QTR1_PRDWRK_VAL']) + parseFloat(record['PAY_QTR1_NONPRDWRK_VAL']));\n    if (record['PAY_QTR1_VAL_F'] && record['PAY_QTR1_VAL_F'].length >= 3) {\n        record['PAY_QTR1_VAL_F'] = record['PAY_QTR1_VAL_F'].substring(0, 2) + 'L' + record['PAY_QTR1_VAL_F'].substring(3);\n    } else if (record['PAY_QTR1_VAL_F'] && record['PAY_QTR1_VAL_F'].length >= 2) {\n        record['PAY_QTR1_VAL_F'] = record['PAY_QTR1_VAL_F'].substring(0, 2) + 'L';\n    } else if (record['PAY_QTR1_VAL_F'] && record['PAY_QTR1_VAL_F'].length >= 1) {\n        record['PAY_QTR1_VAL_F'] = record['PAY_QTR1_VAL_F'].substring(0, 1) + ' L';\n    } else {\n        record['PAY_QTR1_VAL_F'] = '  L';\n    }\n    setVariable('ACTION', 'Go to EMP_MAR12_NUM Module');\n} else if (record['REPORTING_ID_TYP_TXT'] === 'SU') {\n    if (parseFloat(record['ECPAYQ1']) > 0) {\n        setVariable('PAY_QTR1_VAL', record['ECPAYQ1']);\n        if (record['PAY_QTR1_VAL_F'] && record['PAY_QTR1_VAL_F'].length >= 3) {\n            record['PAY_QTR1_VAL_F'] = record['PAY_QTR1_VAL_F'].substring(0, 2) + 'A' + record['PAY_QTR1_VAL_F'].substring(3);\n        } else if (record['PAY_QTR1_VAL_F'] && record['PAY_QTR1_VAL_F'].length >= 2) {\n            record['PAY_QTR1_VAL_F'] = record['PAY_QTR1_VAL_F'].substring(0, 2) + 'A';\n        } else if (record['PAY_QTR1_VAL_F'] && record['PAY_QTR1_VAL_F'].length >= 1) {\n            record['PAY_QTR1_VAL_F'] = record['PAY_QTR1_VAL_F'].substring(0, 1) + ' A';\n        } else {\n            record['PAY_QTR1_VAL_F'] = '  A';\n        }\n        setVariable('ACTION', 'Go to EMP_MAR12_NUM Module');\n    } else {\n        if (parseFloat(record['MADB_2022_PAYQTR1']) > 0) {\n            setVariable('PAY_QTR1_VAL', parseFloat(record['MADB_2022_PAYQTR1']) * parseFloat(record['CYPYF'])); // Assuming 'CYPYF' is a factor from parameter table by NAICS_NUM\n            if (record['PAY_QTR1_VAL_F'] && record['PAY_QTR1_VAL_F'].length >= 3) {\n                record['PAY_QTR1_VAL_F'] = record['PAY_QTR1_VAL_F'].substring(0, 2) + 'H' + record['PAY_QTR1_VAL_F'].substring(3);\n            } else if (record['PAY_QTR1_VAL_F'] && record['PAY_QTR1_VAL_F'].length >= 2) {\n                record['PAY_QTR1_VAL_F'] = record['PAY_QTR1_VAL_F'].substring(0, 2) + 'H';\n            } else if (record['PAY_QTR1_VAL_F'] && record['PAY_QTR1_VAL_F'].length >= 1) {\n                record['PAY_QTR1_VAL_F'] = record['PAY_QTR1_VAL_F'].substring(0, 1) + ' H';\n            } else {\n                record['PAY_QTR1_VAL_F'] = '  H';\n            }\n            setVariable('ACTION', 'Go to EMP_MAR12_NUM Module');\n        } else {\n            setVariable('ACTION', 'Go to EMP_MAR12_NUM Module');\n        }\n    }\n} else if (record['REPORTING_ID_TYP_TXT'] === 'MU' && parseFloat(record['CY_PAY_QTR1']) > 0) {\n    setVariable('PAY_QTR1_VAL', record['CY_PAY_QTR1']);\n    setVariable('PAY_QTR1_VAL_F', record['CY_PAY_QTR1_F']);\n    setVariable('ACTION', 'Go to EMP_MAR12_NUM Module');\n} else if (parseFloat(record['MADB_2022_PAYQTR1']) > 0) {\n    console.log({ 'yes': parseFloat(record['MADB_2022_PAYQTR1']) * parseFloat(record['CYPYF']) })\n    setVariable('PAY_QTR1_VAL', parseFloat(record['MADB_2022_PAYQTR1']) * parseFloat(record['CYPYF'])); // Assuming 'CYPYF' is a factor from parameter table by NAICS_NUM\n    if (record['PAY_QTR1_VAL_F'] && record['PAY_QTR1_VAL_F'].length >= 3) {\n        record['PAY_QTR1_VAL_F'] = record['PAY_QTR1_VAL_F'].substring(0, 2) + 'H' + record['PAY_QTR1_VAL_F'].substring(3);\n    } else if (record['PAY_QTR1_VAL_F'] && record['PAY_QTR1_VAL_F'].length >= 2) {\n        record['PAY_QTR1_VAL_F'] = record['PAY_QTR1_VAL_F'].substring(0, 2) + 'H';\n    } else if (record['PAY_QTR1_VAL_F'] && record['PAY_QTR1_VAL_F'].length >= 1) {\n        record['PAY_QTR1_VAL_F'] = record['PAY_QTR1_VAL_F'].substring(0, 1) + ' H';\n    } else {\n        record['PAY_QTR1_VAL_F'] = '  H';\n    }\n    setVariable('ACTION', 'Go to EMP_MAR12_NUM Module');\n} else {\n    setVariable('ACTION', 'Go to EMP_MAR12_NUM Module');\n}\nmsg.payload.csv[global.get(\"ptrModuleFacts\")] = record;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "b160a0ca86eee401",
        "type": "function",
        "z": "f07c9ae4084738fc",
        "name": "Derived Naics ",
        "func": "let record = msg.payload.csv[global.get(\"ptrModuleFacts\")];\n\nif (['20', '90', 20, 90].includes(record['RECORD_TYP_TXT'])) {\n\n    if (parseInt(record['NAICS_SECTOR_CODE_NUM']) === 31) {\n        record['ACTION'] = 'Go to: Derive MFG NAICS from NAPCS';\n        return msg;\n    } else {\n        record['ACTION'] = 'The only NAICS choice comes from the BR';\n        return msg;\n    }\n\n} else {\n    record['ACTION'] = 'Go to: Classification';\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "2e5501e16398d095",
        "type": "function",
        "z": "f9a2a2262f95bae3",
        "name": "Init Set ACTVMIO & OPSTATS",
        "func": "try{\n    let record_idx = global.get(\"ptrModuleFacts\");\n    let record = msg.payload.csv[record_idx];\n\n    function setCharAt(str, index, chr) {\n        if ([null, undefined].includes(str)) {\n            let newstr = ''\n            for (let i = 0; i < index; i++) {\n                newstr = newstr + ' ';\n            }\n            newstr = newstr + chr\n            return newstr;\n        } else {\n            if (index > str.length - 1) {\n                let addstr = index - str.length\n                let newstr = str\n                for (let i = 0; i < addstr; i++) {\n                    newstr = newstr + ' ';\n                }\n                newstr = newstr + chr\n                return newstr;\n            } else {\n                return str.substring(0, index) + chr + str.substring(index + 1);\n            }\n        }\n    }\n\n    const checkOPSTAT_STAT_F = (record) => {\n        const char = record?.OPSTAT_STAT_F ? record?.OPSTAT_STAT_F.charAt(0) : ' ';\n        return ['R', 'T', 'K'].includes(char);\n    };\n\n    function processACTV_MIO_NUM(record) {\n        let mioNum = parseInt(record?.ACTV_MIO_NUM) || 0;\n        if (mioNum === 0 || mioNum > 12) {\n            record.ACTV_MIO_NUM = '12';\n            record.ACTV_MIO_NUM_F = setCharAt(record['ACTV_MIO_NUM_F'], 2, 'J');\n        }\n    }\n\n    function determineFlow(record) {\n        if ((['111', '131'].includes(record?.COV_CHG_CODE) ||\n            (['791'].includes(record?.COV_CHG_CODE) && parseInt(record?.ACTV_MIO_NUM) < 12)) &&\n            new Date(record?.COV_CHG_DATE) < new Date('2024-01-01')) {\n            record.OPSTATS = 'N';\n        } else if (checkOPSTAT_STAT_F(record)) {\n            if (parseInt(record?.OPSTAT_STAT) === 4) {\n                record.OPSTATS = 'N';\n            } else if (parseInt(record?.OPSTAT_STAT) == 5) {\n                if (parseInt(record?.RP_ACTV_MIO_NUM) == 12) {\n                    record.OPSTATS = 'Y'\n                } else {\n                    record.OPSTATS = 'N';\n                }\n            } else {\n                record.OPSTATS = 'Y';\n            }\n        } else {\n            record.OPSTATS = 'Y'\n        }\n        if (checkOPSTAT_STAT_F(record)) {\n            record.OPSTATS_F = setCharAt(record['OPSTATS_F'], 2, 'R');\n        } else {\n            record.OPSTATS_F = setCharAt(record['OPSTATS_F'], 2, 'J');\n        }\n        record.ACTION = 'Go to NONNORM Router';\n\n    }\n\n    function processRecord(record) {\n        processACTV_MIO_NUM(record);\n        if (record?.OPSTATS === ' ') {\n            determineFlow(record);\n        } else {\n            if (record?.OPSTATS_F?.charAt(2) != 'R' && record?.OPSTATS_F?.charAt(1) === ' ') {\n                determineFlow(record);\n            } else {\n                record.ACTION = 'Go to NONNORM Router';\n            }\n        }\n        msg.payload.csv[record_idx] = record\n    }\n\n    processRecord(record);\n    return msg;\n}catch(e){\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "da9df6f3b05b96e6",
        "type": "function",
        "z": "b93bf22bc3258992",
        "name": "NONNORM: Router",
        "func": "try{\n    let record_idx = global.get(\"ptrModuleFacts\");\n    let record = msg.payload.csv[record_idx];\n\n    function setCharAt(str, index, chr) {\n        if ([null, undefined].includes(str)) {\n            let newstr = ''\n            for (let i = 0; i < index; i++) {\n                newstr = newstr + ' ';\n            }\n            newstr = newstr + chr\n            return newstr;\n        } else {\n            if (index > str.length - 1) {\n                let addstr = index - str.length\n                let newstr = str\n                for (let i = 0; i < addstr; i++) {\n                    newstr = newstr + ' ';\n                }\n                newstr = newstr + chr\n                return newstr;\n            } else {\n                return str.substring(0, index) + chr + str.substring(index + 1);\n            }\n        }\n    }\n    function setOpstatsActvmioPathC(TEMPMIO) {\n        record.OPSTATS = 'N'\n        record.OPSTATS_F = setCharAt(record['OPSTATS_F'], 2, 'L')\n        setOpstatsActvmioPathB(TEMPMIO)\n    }\n    function setOpstatsActvmioPathB(TEMPMIO) {\n        record.ACTV_MIO_NUM = TEMPMIO\n        record.ACTV_MIO_NUM_F = setCharAt(record['ACTV_MIO_NUM_F'], 2, 'L')\n    }\n    function setOPSTATSandACTV_MIO_NUM() {\n        if (record.RECORD_TYP_TXT == '90') {\n            let TEMPMIO = 0\n            if (parseFloat(record?.PAY_QTR1_VAL) + parseFloat(record?.IRS_PAY_QTR1_VAL) > 0) {\n                TEMPMIO = TEMPMIO + 3\n            } else if (record?.REF_PER != '2022A1' || parseFloat(record?.IRS_PAY_ANN_VAL) <= 0) {\n                record.NONNORM = 'B'\n                record.NONNORM_F = setCharAt(record['NONNORM_F'], 2, 'L')\n            }\n            if (parseFloat(record?.IRS_PAY_QTR2_VAL) > 0) {\n                TEMPMIO = TEMPMIO + 3\n            }\n            if (parseFloat(record?.IRS_PAY_QTR3_VAL) > 0) {\n                TEMPMIO = TEMPMIO + 3\n            }\n            if (parseFloat(record?.IRS_PAY_QTR4_VAL) > 0 || record?.IRS_PAY_QTR4_VAL_F == \" \") {\n                TEMPMIO = TEMPMIO + 3\n                if (['03', '51', '00'].includes(record?.BMF_FR941)) {\n                    setOpstatsActvmioPathC(TEMPMIO)\n                } else {\n                    setOpstatsActvmioPathB(TEMPMIO)\n                }\n            } else {\n                if (record?.OPSTATS_F?.charAt(2) == 'R') {\n                    setOpstatsActvmioPathB(TEMPMIO)\n                } else {\n                    setOpstatsActvmioPathC(TEMPMIO)\n                }\n            }\n\n        } else if (record?.OPSTATS_F?.charAt(2) == 'R' && ['R', 'T', 'K'].includes(record?.ACTV_MIO_NUM_F.charAt(0))) {\n        } else if (['211', '221', '241', '311', '321', '341', '401', '511', '741'].includes(record?.COV_CHG_CODE)) {\n            if (record?.COV_CHG_DATE) {\n                const formattedDate = record.COV_CHG_DATE.split(\"-\").reverse().join(\"-\");\n                const date = new Date(formattedDate);\n                if (date > new Date('2023-01-31') && date < new Date('2024-01-01')) {\n                    record.ACTV_MIO_NUM = 13 - (date.getMonth() + 1);\n                    record.ACTV_MIO_NUM_F = setCharAt(record['ACTV_MIO_NUM_F'], 2, ' ')\n                }\n            }\n        } else if (['111', '131', '791'].includes(record?.COV_CHG_CODE)) {\n            if (record?.COV_CHG_DATE) {\n                const formattedDate = record.COV_CHG_DATE.split(\"-\").reverse().join(\"-\");\n                const date = new Date(formattedDate);\n                if (date < new Date('01/01/2024')) {\n                    record.ACTV_MIO_NUM = (date.getMonth() + 1)\n                    record.ACTV_MIO_NUM_F = setCharAt(record['ACTV_MIO_NUM_F'], 2, 'L')\n                    record.OPSTATS = 'N'\n                    record.OPSTATS_F = setCharAt(record['OPSTATS_F'], 2, 'L')\n                }\n            }\n        }\n        record.ACTION1 = 'Went through Set OPSTAT & ACTVMIO'\n    }\n\n    function setNONNORM() {\n        record.NONNORM = ''\n        if (record?.OPSTATS == 'Y') {\n            let year = parseInt(record?.REF_PER.substring(0, 4))\n            if (year > 2023) {\n                if (record?.RECORD_TYP_TXT == '20' && record?.ACTV_MIO_NUM < 12 &&\n                    // for system integration prior_refper_pay_ann_val will need to be a db reference for the value of pay_ann_val of the prior years data in db\n                    (record?.ACTV_MIO_NUM_F?.charAt(2) == 'L' || parseFloat(record?.PRIOR_REFPER_PAY_ANN_VAL) == 0)) {\n                    record.NONNORM = 'B'\n                    record.NONNORM_F = setCharAt(record['NONNORM_F'], 2, 'J');\n                } else {\n                    if (record.ACTV_MIO_NUM < 12) {\n                        record.NONNORM = 'S'\n                        record.NONNORM_F = setCharAt(record['NONNORM_F'], 2, 'J');\n                    }\n                }\n            } else {\n                if (record.RECORD_TYP_TXT == '20' && record.ACTV_MIO_NUM < 12 &&\n                    // for system integration EC_PAY_ANN_VAL for this module will need to be tied to EC.PAY_ANN_VAL where ref_per = 2022U1\n                    (record?.ACTV_MIO_NUM_F?.charAt(2) == 'L' || parseFloat(record?.REFPER_2022U1_EC_PAY_ANN_VAL) == 0)) {\n                    record.NONNORM = 'B'\n                    record.NONNORM_F = setCharAt(record['NONNORM_F'], 2, 'J');\n                } else {\n                    if (record.ACTV_MIO_NUM < 12) {\n                        record.NONNORM = 'S'\n                        record.NONNORM_F = setCharAt(record['NONNORM_F'], 2, 'J');\n                    }\n                }\n            }\n        } else {\n            record.NONNORM = 'D'\n            record.NONNORM_F = setCharAt(record['NONNORM_F'], 2, 'J');\n        }\n        record.ACTION2 = 'Went through Set NONNORM'\n    }\n\n    function setBasicSetVal(val) {\n        record[val] = 0;\n        let name = val + '_F'\n        record[name] = setCharAt(record[name], 2, 'Z');\n    }\n\n    function setBASIC() {\n        if (parseInt(record?.ACTV_MIO_NUM) < 10) {\n            if (!(record?.PAY_QTR1_VAL_F.charAt(1) === 'G' || record?.PAY_QTR1_VAL_F.charAt(2) === 'G')) {\n                setBasicSetVal('PAY_QTR1_VAL')\n            }\n            if (!(record?.EMP_MAR12_NUM_F.charAt(1) === 'G' || record?.EMP_MAR12_NUM_F.charAt(2) === 'G')) {\n                setBasicSetVal('EMP_MAR12_NUM')\n            }\n        } else {\n            if (record?.RP_PAY_QTR1_VAL == 0 && record?.PAY_QTR1_VAL_F && ['R', 'T', 'K'].includes(record?.PAY_QTR1_VAL_F.charAt(0)) && record?.PAY_QTR1_VAL_F.charAt(1) == ' ') {\n                setBasicSetVal('EMP_MAR12_NUM')\n                setBasicSetVal('PAY_QTR1_VAL')\n            }\n        }\n        record.ACTION3 = 'Went through Set Basic to 0'\n    }\n\n    function specialSeasonalSetVal() {\n        record.EMP_MAR12_NUM_F = setCharAt(record['EMP_MAR12_NUM_F'], 2, 'Z');\n        record.PAY_QTR1_VAL_F = setCharAt(record['PAY_QTR1_VAL_F'], 2, 'Z');\n    }\n    function pathSuccessSpecialSeasonFinal() {\n        if (record?.EMP_MAR12_NUM_F\n            && !(['R', 'T', 'K'].includes(record?.EMP_MAR12_NUM_F?.charAt(0)))\n            && record?.EMP_MAR12_NUM_F?.charAt(1) == ' '\n            && !(['L', 'N', 'Z'].includes(record?.EMP_MAR12_NUM_F?.charAt(2)))) {\n            if (record?.REPORTING_ID_TYP_TXT == 'SU') {\n                if (parseFloat(record?.IRS_EMP_MAR12_NUM) == 0) {\n                    specialSeasonalSetVal()\n                }\n            } else {\n                if (parseFloat(record?.BR_EMP_MAR12_NUM) == 0) {\n                    specialSeasonalSetVal()\n                }\n            }\n        }\n    }\n    function specialSeasonal() {\n        if (record?.PAY_QTR1_VAL_F\n            && !(['R', 'T', 'K'].includes(record?.PAY_QTR1_VAL_F?.charAt(0)))\n            && record?.PAY_QTR1_VAL_F?.charAt(1) == ' '\n            && !(['L', 'N', 'Z'].includes(record?.PAY_QTR1_VAL_F?.charAt(2)))\n        ) {\n            if (record?.REPORTING_ID_TYP_TXT == 'SU') {\n                if (parseFloat(record?.IRS_PAY_QTR1_VAL) == 0) {\n                    pathSuccessSpecialSeasonFinal()\n                }\n            } else {\n                if (parseFloat(record?.BR_PAY_QTR1_VAL) == 0) {\n                    pathSuccessSpecialSeasonFinal()\n                }\n            }\n        }\n        record.ACTION4 = 'Went through Special Seasonal'\n    }\n\n    function nonNORMRouterPathA() {\n        if ((record?.NONNORM_F == \"   \") || (record?.NONNORM_F == \"  J\")) {\n            setNONNORM()\n        }\n        if (record?.NONNORM == 'B') {\n            setBASIC()\n        }\n        if (record?.NONNORM == 'S' && record?.ACTV_MIO_NUM < 10 && record?.PAY_QTR1_VAL == 0 && record?.EMP_MAR12_NUM == 0) {\n            specialSeasonal()\n        }\n        record.ACTION = \"Exit to AIES Main Routing\";\n    }\n    function processRecord(record) {\n        if (['R', 'T', 'K'].includes(record?.ACTV_MIO_NUM_F?.charAt(0)) && record?.RECORD_TYP_TXT == '90') {\n            if (record?.ACTV_MIO_NUM < 12 && record?.REF_PER == '2022A1' && parseFloat(record?.IRS_PAY_ANN_VAL) == 0) {\n                record.NONNORM = 'B';\n                record.NONNORM_F = setCharAt(record['NONNORM_F'], 2, 'L');\n            }\n            nonNORMRouterPathA()\n        } else {\n            if (['97', '98', '99'].includes(record?.BMF_FR941)) {\n                nonNORMRouterPathA()\n            } else {\n                if (record?.ACTV_MIO_NUM_F.charAt(1) == \" \" && record?.OPSTATS_F.charAt(1) == \" \") {\n                    setOPSTATSandACTV_MIO_NUM()\n                }\n                nonNORMRouterPathA()\n            }\n        }\n    }\n\n    processRecord(record);\n    return msg;\n}catch(e){\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "9511bc37f025a9ac",
        "type": "function",
        "z": "a661e33a6e4be4fe",
        "name": "Set OPSTATS & ACTVMIO",
        "func": "let record_idx = global.get(\"ptrModuleFacts\");\nlet record = msg.payload.csv[record_idx];\n\nfunction setCharAt(str, index, chr) {\n    if ([null, undefined].includes(str)) {\n        let newstr = ''\n        for (let i = 0; i < index; i++) {\n            newstr = newstr + ' ';\n        }\n        newstr = newstr + chr\n        return newstr;\n    } else {\n        if (index > str.length - 1) {\n            let addstr = index - str.length\n            let newstr = str\n            for (let i = 0; i < addstr; i++) {\n                newstr = newstr + ' ';\n            }\n            newstr = newstr + chr\n            return newstr;\n        } else {\n            return str.substring(0, index) + chr + str.substring(index + 1);\n        }\n    }\n}\n\nfunction setOpstatsActvmioPathC(TEMPMIO) {\n    record.OPSTATS = 'N'\n    record.OPSTATS_F = setCharAt(record['OPSTATS_F'], 2, 'L')\n    setOpstatsActvmioPathB(TEMPMIO)\n}\nfunction setOpstatsActvmioPathB(TEMPMIO) {\n    record.ACTV_MIO_NUM = TEMPMIO\n    record.ACTV_MIO_NUM_F = setCharAt(record['ACTV_MIO_NUM_F'], 2, 'L')\n    setOpstatsActvmioPathA()\n}\nfunction setOpstatsActvmioPathA() {\n    record.ACTION = 'Return to NonNORM Router'\n}\n\nif (record.RECORD_TYP_TXT == '90') {\n    let TEMPMIO = 0\n    if (parseFloat(record?.PAY_QTR1_VAL) + parseFloat(record?.IRS_PAY_QTR1_VAL) > 0) {\n        TEMPMIO = TEMPMIO + 3\n    } else if (record?.REF_PER != '2022A1' || parseFloat(record?.IRS_PAY_ANN_VAL) <= 0) {\n        record.NONNORM = 'B'\n        record.NONNORM_F = setCharAt(record['NONNORM_F'], 2, 'L')\n    }\n    if (parseFloat(record?.IRS_PAY_QTR2_VAL) > 0) {\n        TEMPMIO = TEMPMIO + 3\n    }\n    if (parseFloat(record?.IRS_PAY_QTR3_VAL) > 0) {\n        TEMPMIO = TEMPMIO + 3\n    }\n    if (parseFloat(record?.IRS_PAY_QTR4_VAL) > 0 || record?.IRS_PAY_QTR4_VAL_F == \" \") {\n        TEMPMIO = TEMPMIO + 3\n        if (['03', '51', '00'].includes(record?.BMF_FR941)) {\n            setOpstatsActvmioPathC(TEMPMIO)\n        } else {\n            setOpstatsActvmioPathB(TEMPMIO)\n        }\n    } else {\n        if (record?.OPSTATS_F?.charAt(2) == 'R') {\n            setOpstatsActvmioPathB(TEMPMIO)\n        } else {\n            setOpstatsActvmioPathC(TEMPMIO)\n        }\n    }\n\n} else if (record?.OPSTATS_F?.charAt(2) == 'R' && ['R', 'T', 'K'].includes(record?.ACTV_MIO_NUM_F.charAt(0))) {\n    setOpstatsActvmioPathA()\n} else if (['211', '221', '241', '311', '321', '341', '401', '511', '741'].includes(record?.COV_CHG_CODE)) {\n    if (record?.COV_CHG_DATE) {\n        const formattedDate = record.COV_CHG_DATE.split(\"-\").reverse().join(\"-\");\n        const date = new Date(formattedDate);\n        if (date > new Date('2023-01-31') && date < new Date('2024-01-01')) {\n            record.ACTV_MIO_NUM = 13 - (date.getMonth() + 1);\n            record.ACTV_MIO_NUM_F = setCharAt(record['ACTV_MIO_NUM_F'], 2, ' ')\n        }\n    }\n    setOpstatsActvmioPathA()\n} else if (['111', '131', '791'].includes(record?.COV_CHG_CODE)) {\n    if (record?.COV_CHG_DATE) {\n        const formattedDate = record.COV_CHG_DATE.split(\"-\").reverse().join(\"-\");\n        const date = new Date(formattedDate);\n        if (date < new Date('01/01/2024')) {\n            record.ACTV_MIO_NUM = (date.getMonth() + 1)\n            record.ACTV_MIO_NUM_F = setCharAt(record['ACTV_MIO_NUM_F'], 2, 'L')\n            record.OPSTATS = 'N'\n            record.OPSTATS_F = setCharAt(record['OPSTATS_F'], 2, 'L')\n        }\n    }\n    setOpstatsActvmioPathA()\n} else {\n    setOpstatsActvmioPathA()\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "1bb9ec440766bd2c",
        "type": "function",
        "z": "5251d9acce14d156",
        "name": "Set NONORM",
        "func": "// let record_idx = global.get(\"ptrModuleFacts\");\n// let record = msg.payload.csv[record_idx];\n\n// function setCharAt(str, index, char) {\n//     if (index > str.length - 1) return str;\n//     return str.substring(0, index) + char + str.substring(index + 1);\n// }\n// record.NONNORM = ''\n// if (record?.OPSTATS == 'Y') {\n//     if (record?.REFPER > '2023A1') {\n//         if (record?.RECORD_TYP_TXT == '20' && record?.ACTV_MIO_NUM < 12 && (record?.ACTV_MIO_NUM_F?.charAt(2) == 'L' || record?.PAY_ANN_VAL == 0) && record?.REFPER == '2022U1') {\n//             record.NONNORM = 'B'\n//             record.NONORM_F = setCharAt(record.NONORM_F, 2, 'J');\n//         } else {\n//             if (record.ACTV_MIO_NUM < 12) {\n//                 record.NONORM = 'S'\n//                 record.NONORM_F = setCharAt(record.NONORM_F, 2, 'J');\n//             }\n//             record.ACTION = 'Return to NonNORM Router';\n//         }\n//     }else{\n//         if (record.RECORD_TYP_TXT == '20' && record.ACTV_MIO_NUM < 12 && (record?.ACTV_MIO_NUM_F?.charAt(2) == 'L' || record?.RC.PAY_ANN_VAL == 0) && record?.REFPER == '2022U1') {\n//             record.NONNORM = 'B'\n//             record.NONORM_F = setCharAt(record.NONORM_F, 2, 'J');\n//             record.ACTION = 'Return to NonNORM Router';\n//         }\n//     }\n// }else{\n//     record.NONNORM = 'D'\n//     record.NONORM_F = setCharAt(record.NONORM_F, 2, 'J');\n//     record.ACTION = 'Return to NonNORM Router';\n// }\n// return msg;\n\nlet record_idx = global.get(\"ptrModuleFacts\");\nlet record = msg.payload.csv[record_idx];\n\nfunction setCharAt(str, index, chr) {\n    if ([null, undefined].includes(str)) {\n        let newstr = ''\n        for (let i = 0; i < index; i++) {\n            newstr = newstr + ' ';\n        }\n        newstr = newstr + chr\n        return newstr;\n    } else {\n        if (index > str.length - 1) {\n            let addstr = index - str.length\n            let newstr = str\n            for (let i = 0; i < addstr; i++) {\n                newstr = newstr + ' ';\n            }\n            newstr = newstr + chr\n            return newstr;\n        } else {\n            return str.substring(0, index) + chr + str.substring(index + 1);\n        }\n    }\n}\n\nrecord.NONNORM = ''\nif (record?.OPSTATS == 'Y') {\n    let year = parseInt(record?.REF_PER.substring(0, 4))\n    if (year > 2023) {\n        let year = parseInt(record?.REF_PER.substring(0, 4))\n        if (record?.RECORD_TYP_TXT == '20' && record?.ACTV_MIO_NUM < 12 &&\n            // for system integration prior_refper_pay_ann_val will need to be a db reference for the value of pay_ann_val of the prior years data in db\n            (record?.ACTV_MIO_NUM_F?.charAt(2) == 'L' || parseFloat(record?.PRIOR_REFPER_PAY_ANN_VAL) == 0)) {\n            record.NONNORM = 'B'\n            record.NONNORM_F = setCharAt(record['NONNORM_F'], 2, 'J');\n        } else {\n            if (record.ACTV_MIO_NUM < 12) {\n                record.NONNORM = 'S'\n                record.NONNORM_F = setCharAt(record['NONNORM_F'], 2, 'J');\n            }\n        }\n        record.ACTION = 'Return to NonNORM Router';\n    } else {\n        if (record.RECORD_TYP_TXT == '20' && record.ACTV_MIO_NUM < 12 &&\n            // for system integration EC_PAY_ANN_VAL for this module will need to be tied to EC.PAY_ANN_VAL where ref_per = 2022U1\n            (record?.ACTV_MIO_NUM_F?.charAt(2) == 'L' || parseFloat(record?.REFPER_2022U1_EC_PAY_ANN_VAL) == 0)) {\n            record.NONNORM = 'B'\n            record.NONNORM_F = setCharAt(record['NONNORM_F'], 2, 'J');\n            record.ACTION = 'Return to NonNORM Router';\n        } else {\n            if (record.ACTV_MIO_NUM < 12) {\n                record.NONNORM = 'S'\n                record.NONNORM_F = setCharAt(record['NONNORM_F'], 2, 'J');\n            }\n        }\n        record.ACTION = 'Return to NonNORM Router';\n    }\n} else {\n    record.NONNORM = 'D'\n    record.NONNORM_F = setCharAt(record['NONNORM_F'], 2, 'J');\n    record.ACTION = 'Return to NonNORM Router';\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "46531482d43b4cae",
        "type": "function",
        "z": "b8154c600987e319",
        "name": "Set Basic to 0",
        "func": "let record_idx = global.get(\"ptrModuleFacts\");\nlet record = msg.payload.csv[record_idx];\n\nfunction setCharAt(str, index, chr) {\n    if ([null, undefined].includes(str)) {\n        let newstr = ''\n        for (let i = 0; i < index; i++) {\n            newstr = newstr + ' ';\n        }\n        newstr = newstr + chr\n        return newstr;\n    } else {\n        if (index > str.length - 1) {\n            let addstr = index - str.length\n            let newstr = str\n            for (let i = 0; i < addstr; i++) {\n                newstr = newstr + ' ';\n            }\n            newstr = newstr + chr\n            return newstr;\n        } else {\n            return str.substring(0, index) + chr + str.substring(index + 1);\n        }\n    }\n}\nfunction setVal(val) {\n    record[val] = 0;\n    let name = val + '_F'\n    record[name] = setCharAt(record[name], 2, 'Z');\n}\n\nif (parseInt(record?.ACTV_MIO_NUM) < 10) {\n    if (!(record?.PAY_QTR1_VAL_F.charAt(1) === 'G' || record?.PAY_QTR1_VAL_F.charAt(2) === 'G')) {\n        console.log(1)\n        setVal('PAY_QTR1_VAL')\n    }\n    if (!(record?.EMP_MAR12_NUM_F.charAt(1) === 'G' || record?.EMP_MAR12_NUM_F.charAt(2) === 'G')) {\n        console.log(2)\n        setVal('EMP_MAR12_NUM')\n    }\n} else {\n    if (record?.RP_PAY_QTR1_VAL == 0 && record?.PAY_QTR1_VAL_F && ['R', 'T', 'K'].includes(record?.PAY_QTR1_VAL_F.charAt(0)) && record?.PAY_QTR1_VAL_F.charAt(1) == ' ') {\n        setVal('EMP_MAR12_NUM')\n        setVal('PAY_QTR1_VAL')\n    }\n}\nrecord.ACTION = 'Return To NonNORM Router';\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "e2f7739eee5de74c",
        "type": "function",
        "z": "e1f601e2c56dfda4",
        "name": "Special Season final",
        "func": "let record_idx = global.get(\"ptrModuleFacts\");\nlet record = msg.payload.csv[record_idx];\n\nfunction setCharAt(str, index, chr) {\n    if ([null, undefined].includes(str)) {\n        let newstr = ''\n        for (let i = 0; i < index; i++) {\n            newstr = newstr + ' ';\n        }\n        newstr = newstr + chr\n        return newstr;\n    } else {\n        if (index > str.length - 1) {\n            let addstr = index - str.length\n            let newstr = str\n            for (let i = 0; i < addstr; i++) {\n                newstr = newstr + ' ';\n            }\n            newstr = newstr + chr\n            return newstr;\n        } else {\n            return str.substring(0, index) + chr + str.substring(index + 1);\n        }\n    }\n}\nfunction setVal() {\n    record.EMP_MAR12_NUM_F = setCharAt(record['EMP_MAR12_NUM_F'], 2, 'Z');\n    record.PAY_QTR1_VAL_F = setCharAt(record['PAY_QTR1_VAL_F'], 2, 'Z');\n}\nfunction goToNonNORMRouter() {\n    record.ACTION = 'Return To NonNORM Router'\n}\n\nfunction pathSuccessSpecialSeasonFinal() {\n    if (record?.EMP_MAR12_NUM_F\n        && !(['R', 'T', 'K'].includes(record?.EMP_MAR12_NUM_F?.charAt(0)))\n        && record?.EMP_MAR12_NUM_F?.charAt(1) == ' '\n        && !(['L', 'N', 'Z'].includes(record?.EMP_MAR12_NUM_F?.charAt(2)))) {\n        if (record?.REPORTING_ID_TYP_TXT == 'SU') {\n            if (parseFloat(record?.IRS_EMP_MAR12_NUM) == 0) {\n                setVal()\n                goToNonNORMRouter()\n            } else {\n                goToNonNORMRouter()\n            }\n        } else {\n            if (parseFloat(record?.BR_EMP_MAR12_NUM) == 0) {\n                setVal()\n                goToNonNORMRouter()\n            } else {\n                goToNonNORMRouter()\n            }\n        }\n    } else {\n        goToNonNORMRouter()\n    }\n}\n\nif (record?.PAY_QTR1_VAL_F\n    && !(['R', 'T', 'K'].includes(record?.PAY_QTR1_VAL_F?.charAt(0)))\n    && record?.PAY_QTR1_VAL_F?.charAt(1) == ' '\n    && !(['L', 'N', 'Z'].includes(record?.PAY_QTR1_VAL_F?.charAt(2)))\n) {\n    if (record?.REPORTING_ID_TYP_TXT == 'SU') {\n        if (parseFloat(record?.IRS_PAY_QTR1_VAL) == 0) {\n            pathSuccessSpecialSeasonFinal()\n        } else {\n            goToNonNORMRouter()\n        }\n    } else {\n        if (parseFloat(record?.BR_PAY_QTR1_VAL) == 0) {\n            pathSuccessSpecialSeasonFinal()\n        } else {\n            goToNonNORMRouter()\n        }\n    }\n} else {\n    goToNonNORMRouter()\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "c660fc494a2e76e6",
        "type": "function",
        "z": "05d1a91987f08f14",
        "name": "mfg_payqtr1",
        "func": "function setCharAt(str, index, chr) {\n    if ([null, undefined].includes(str)) {\n        let newstr = ''\n        for (let i = 0; i < index; i++) {\n            newstr = newstr + ' ';\n        }\n        newstr = newstr + chr\n        return newstr;\n    } else {\n        if (index > str.length - 1) {\n            let addstr = index - str.length\n            let newstr = str\n            for (let i = 0; i < addstr; i++) {\n                newstr = newstr + ' ';\n            }\n            newstr = newstr + chr\n            return newstr;\n        } else {\n            return str.substring(0, index) + chr + str.substring(index + 1);\n        }\n    }\n}\n\nlet record_idx = global.get(\"ptrModuleFacts\");\nlet record = msg.payload.csv[record_idx];\n\nconst PAY_ANN_VAL = parseFloat(record['PAY_ANN_VAL'])\nconst PAY_ANN_PRDWRK_VAL = parseFloat(record['PAY_ANN_PRDWRK_VAL'])\nconst PAY_ANN_NONPRDWRK_VAL = parseFloat(record['PAY_ANN_NONPRDWRK_VAL'])\nconst EMP_MAR12_NUM = parseFloat(record['EMP_MAR12_NUM'])\nconst EMP_MAR12_PRDWRK_NUM = parseFloat(record['EMP_MAR12_PRDWRK_NUM'])\nconst EMP_MAR12_NONPRDWRK_NUM = parseFloat(record['EMP_MAR12_NONPRDWRK_NUM'])\nconst PAY_QTR1_VAL = parseFloat(record['PAY_QTR1_VAL'])\nconst PAY_QTR1_PRDWRK_VAL = parseFloat(record['PAY_QTR1_PRDWRK_VAL'])\nconst PAY_QTR1_NONPRDWRK_VAL = parseFloat(record['PAY_QTR1_NONPRDWRK_VAL'])\n\nif ((PAY_QTR1_PRDWRK_VAL + PAY_QTR1_NONPRDWRK_VAL == 0) && PAY_QTR1_VAL > 0) {\n    if (PAY_ANN_PRDWRK_VAL > 0 && PAY_ANN_NONPRDWRK_VAL > 0 && PAY_ANN_VAL > 0) {\n        record['PAY_QTR1_PRDWRK_VAL'] = Math.round((PAY_ANN_PRDWRK_VAL / PAY_ANN_VAL) * PAY_QTR1_VAL)\n        record['PAY_QTR1_NONPRDWRK_VAL'] = Math.round((PAY_ANN_NONPRDWRK_VAL / PAY_ANN_VAL) * PAY_QTR1_VAL)\n        record['PAY_QTR1_PRDWRK_VAL_F'] = setCharAt(record['PAY_QTR1_PRDWRK_VAL_F'], 2, 'J');\n        record['PAY_QTR1_NONPRDWRK_VAL_F'] = setCharAt(record['PAY_QTR1_NONPRDWRK_VAL_F'], 2, 'J');\n    } else if (EMP_MAR12_PRDWRK_NUM > 0 && EMP_MAR12_NONPRDWRK_NUM > 0 && EMP_MAR12_NUM > 0) {\n        record['PAY_QTR1_PRDWRK_VAL'] = Math.round((EMP_MAR12_PRDWRK_NUM / EMP_MAR12_NUM) * PAY_QTR1_VAL)\n        record['PAY_QTR1_NONPRDWRK_VAL'] = Math.round((EMP_MAR12_NONPRDWRK_NUM / EMP_MAR12_NUM) * PAY_QTR1_VAL)\n        record['PAY_QTR1_PRDWRK_VAL_F'] = setCharAt(record['PAY_QTR1_PRDWRK_VAL_F'], 2, 'J');\n        record['PAY_QTR1_NONPRDWRK_VAL_F'] = setCharAt(record['PAY_QTR1_NONPRDWRK_VAL_F'], 2, 'J');\n    } else {\n        record['PAY_QTR1_PRDWRK_VAL_F'] = setCharAt(record['PAY_QTR1_PRDWRK_VAL_F'], 2, 'X');\n        record['PAY_QTR1_NONPRDWRK_VAL_F'] = setCharAt(record['PAY_QTR1_NONPRDWRK_VAL_F'], 2, 'X');\n    }\n} else if ((PAY_QTR1_PRDWRK_VAL + PAY_QTR1_NONPRDWRK_VAL > 0) && PAY_QTR1_VAL > 0) {\n    if (PAY_QTR1_PRDWRK_VAL + PAY_QTR1_NONPRDWRK_VAL != PAY_QTR1_VAL) {\n        if (PAY_QTR1_PRDWRK_VAL == 0 && (PAY_QTR1_NONPRDWRK_VAL < PAY_QTR1_VAL)) {\n            record['PAY_QTR1_PRDWRK_VAL'] = PAY_QTR1_VAL - PAY_QTR1_NONPRDWRK_VAL\n            record['PAY_QTR1_PRDWRK_VAL_F'] = setCharAt(record['PAY_QTR1_PRDWRK_VAL_F'], 2, 'J');\n        } else if (PAY_QTR1_NONPRDWRK_VAL == 0 && (PAY_QTR1_PRDWRK_VAL < PAY_QTR1_VAL)) {\n            record['PAY_QTR1_NONPRDWRK_VAL'] = PAY_QTR1_VAL - PAY_QTR1_PRDWRK_VAL\n            record['PAY_QTR1_NONPRDWRK_VAL_F'] = setCharAt(record['PAY_QTR1_NONPRDWRK_VAL_F'], 2, 'J');\n        } else if (.8 <= (PAY_QTR1_PRDWRK_VAL + PAY_QTR1_NONPRDWRK_VAL) / PAY_QTR1_VAL &&\n            (PAY_QTR1_PRDWRK_VAL + PAY_QTR1_NONPRDWRK_VAL) / PAY_QTR1_VAL <= 1.2) {\n            const TEMP_DET_TOT = PAY_QTR1_PRDWRK_VAL + PAY_QTR1_NONPRDWRK_VAL\n            const TEMP_PAYQ1_PRDWORK = Math.round((PAY_QTR1_PRDWRK_VAL / TEMP_DET_TOT) * PAY_QTR1_VAL)\n            const TEMP_PAYQ1_NONPRDWORK = Math.round((PAY_QTR1_NONPRDWRK_VAL / TEMP_DET_TOT) * PAY_QTR1_VAL)\n            record['PAY_QTR1_NONPRDWRK_VAL'] = TEMP_PAYQ1_NONPRDWORK\n            record['PAY_QTR1_PRDWRK_VAL'] = TEMP_PAYQ1_PRDWORK\n            record['PAY_QTR1_PRDWRK_VAL_F'] = setCharAt(record['PAY_QTR1_PRDWRK_VAL_F'], 2, 'K');\n            record['PAY_QTR1_NONPRDWRK_VAL_F'] = setCharAt(record['PAY_QTR1_NONPRDWRK_VAL_F'], 2, 'K');\n            if (TEMP_PAYQ1_PRDWORK + TEMP_PAYQ1_NONPRDWORK != PAY_QTR1_VAL) {\n                if (TEMP_PAYQ1_PRDWORK + TEMP_PAYQ1_NONPRDWORK < PAY_QTR1_VAL) {\n                    if (TEMP_PAYQ1_PRDWORK > TEMP_PAYQ1_NONPRDWORK) {\n                        record['TEMP_PAYQ1_PRDWORK'] = Math.round(PAY_QTR1_VAL - TEMP_PAYQ1_NONPRDWORK)\n                    } else if (TEMP_PAYQ1_NONPRDWORK > TEMP_PAYQ1_PRDWORK) {\n                        record['TEMP_PAYQ1_NONPRDWORK'] = Math.round(PAY_QTR1_VAL - TEMP_PAYQ1_PRDWORK)\n                    }\n                } else {\n                    if (TEMP_PAYQ1_PRDWORK > TEMP_PAYQ1_NONPRDWORK) {\n                        record['TEMP_PAYQ1_NONPRDWORK'] = Math.round(PAY_QTR1_VAL - TEMP_PAYQ1_PRDWORK)\n                    } else if (TEMP_PAYQ1_NONPRDWORK > TEMP_PAYQ1_PRDWORK) {\n                        record['TEMP_PAYQ1_PRDWORK'] = Math.round(PAY_QTR1_VAL - TEMP_PAYQ1_NONPRDWORK)\n                    }\n                }\n            }\n        } else {\n            record['PAY_QTR1_PRDWRK_VAL_F'] = setCharAt(record['PAY_QTR1_PRDWRK_VAL_F'], 2, 'X');\n            record['PAY_QTR1_NONPRDWRK_VAL_F'] = setCharAt(record['PAY_QTR1_NONPRDWRK_VAL_F'], 2, 'X');\n        }\n    }\n}\n\nrecord['ACTION'] = 'Return to Main Routing'\n// global.set('action', 'Return to Main Routing')\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "e2ac825ab490ae2d",
        "type": "function",
        "z": "48bdd199705157b9",
        "name": "mfg_payann",
        "func": "function setCharAt(str, index, chr) {\n    if ([null, undefined].includes(str)) {\n        let newstr = ''\n        for (let i = 0; i < index; i++) {\n            newstr = newstr + ' ';\n        }\n        newstr = newstr + chr\n        return newstr;\n    } else {\n        if (index > str.length - 1) {\n            let addstr = index - str.length\n            let newstr = str\n            for (let i = 0; i < addstr; i++) {\n                newstr = newstr + ' ';\n            }\n            newstr = newstr + chr\n            return newstr;\n        } else {\n            return str.substring(0, index) + chr + str.substring(index + 1);\n        }\n    }\n}\n\nlet record_idx = global.get(\"ptrModuleFacts\");\nlet record = msg.payload.csv[record_idx];\nconst PAY_ANN_VAL = parseFloat(record['PAY_ANN_VAL'])\nconst PAY_ANN_PRDWRK_VAL = parseFloat(record['PAY_ANN_PRDWRK_VAL'])\nconst PAY_ANN_NONPRDWRK_VAL = parseFloat(record['PAY_ANN_NONPRDWRK_VAL'])\nconst EMP_MAR12_NUM = parseFloat(record['EMP_MAR12_NUM'])\nconst EMP_MAR12_PRDWRK_NUM = parseFloat(record['EMP_MAR12_PRDWRK_NUM'])\nconst EMP_MAR12_NONPRDWRK_NUM = parseFloat(record['EMP_MAR12_NONPRDWRK_NUM'])\nconst PAY_QTR1_VAL = parseFloat(record['PAY_QTR1_VAL'])\nconst PAY_QTR1_PRDWRK_VAL = parseFloat(record['PAY_QTR1_PRDWRK_VAL'])\nconst PAY_QTR1_NONPRDWRK_VAL = parseFloat(record['PAY_QTR1_NONPRDWRK_VAL'])\n\nif (parseInt(record['NAICS_SECTOR']) == 31 && record['SUBSAMP_IND_TXT'] != 'MC') {\n    if ((PAY_ANN_PRDWRK_VAL + PAY_ANN_NONPRDWRK_VAL == 0) && PAY_ANN_VAL > 0) {\n        if (EMP_MAR12_NONPRDWRK_NUM > 0 && EMP_MAR12_PRDWRK_NUM > 0 && EMP_MAR12_NUM > 0) {\n            record['PAY_ANN_PRDWRK_VAL'] = Math.round((EMP_MAR12_PRDWRK_NUM / EMP_MAR12_NUM) * PAY_ANN_VAL)\n            record['PAY_ANN_NONPRDWRK_VAL'] = Math.round((EMP_MAR12_NONPRDWRK_NUM / EMP_MAR12_NUM) * PAY_ANN_VAL)\n            record['PAY_ANN_PRDWRK_VAL_F'] = setCharAt(record['PAY_ANN_PRDWRK_VAL_F'], 2, 'J');\n            record['PAY_ANN_NONPRDWRK_VAL_F'] = setCharAt(record['PAY_ANN_NONPRDWRK_VAL_F'], 2, 'J');\n        } else if (PAY_QTR1_NONPRDWRK_VAL > 0 && PAY_QTR1_PRDWRK_VAL > 0 && PAY_QTR1_VAL > 0) {\n            record['PAY_ANN_PRDWRK_VAL'] = Math.round((PAY_QTR1_PRDWRK_VAL / PAY_QTR1_VAL) * PAY_ANN_VAL)\n            record['PAY_ANN_NONPRDWRK_VAL'] = Math.round((PAY_QTR1_NONPRDWRK_VAL / PAY_QTR1_VAL) * PAY_ANN_VAL)\n            record['PAY_ANN_PRDWRK_VAL_F'] = setCharAt(record['PAY_ANN_PRDWRK_VAL_F'], 2, 'J');\n            record['PAY_ANN_NONPRDWRK_VAL_F'] = setCharAt(record['PAY_ANN_NONPRDWRK_VAL_F'], 2, 'J');\n        } else {\n            record['PAY_ANN_PRDWRK_VAL_F'] = setCharAt(record['PAY_ANN_PRDWRK_VAL_F'], 2, 'X');\n            record['PAY_ANN_NONPRDWRK_VAL_F'] = setCharAt(record['PAY_ANN_NONPRDWRK_VAL_F'], 2, 'X');\n        }\n    } else if ((PAY_ANN_PRDWRK_VAL + PAY_ANN_NONPRDWRK_VAL > 0) && PAY_ANN_VAL > 0) {\n        if (PAY_ANN_PRDWRK_VAL + PAY_ANN_NONPRDWRK_VAL != PAY_ANN_VAL) {\n            if (PAY_ANN_PRDWRK_VAL == 0 && PAY_ANN_NONPRDWRK_VAL < PAY_ANN_VAL) {\n                record['PAY_ANN_PRDWRK_VAL'] = Math.round(PAY_ANN_VAL - PAY_ANN_NONPRDWRK_VAL)\n                record['PAY_ANN_PRDWRK_VAL_F'] = setCharAt(record['PAY_ANN_PRDWRK_VAL_F'], 2, 'K');\n            } else if (PAY_ANN_NONPRDWRK_VAL == 0 && PAY_ANN_PRDWRK_VAL < PAY_ANN_VAL) {\n                record['PAY_ANN_NONPRDWRK_VAL'] = Math.round(PAY_ANN_VAL - PAY_ANN_PRDWRK_VAL)\n                record['PAY_ANN_NONPRDWRK_VAL_F'] = setCharAt(record['PAY_ANN_NONPRDWRK_VAL_F'], 2, 'K');\n            } else if (.8 <= (PAY_ANN_PRDWRK_VAL + PAY_ANN_NONPRDWRK_VAL) / PAY_ANN_VAL &&\n                (PAY_ANN_PRDWRK_VAL + PAY_ANN_NONPRDWRK_VAL) / PAY_ANN_VAL <= 1.2) {\n                const TEMP_DET_TOT = PAY_ANN_NONPRDWRK_VAL + PAY_ANN_PRDWRK_VAL\n                const TEMP_PAYANN_PRDWORK = Math.round((PAY_ANN_PRDWRK_VAL / TEMP_DET_TOT) * PAY_ANN_VAL)\n                const TEMP_PAYANN_NONPRDWORK = Math.round((PAY_ANN_NONPRDWRK_VAL / TEMP_DET_TOT) * PAY_ANN_VAL)\n                record['PAY_ANN_NONPRDWRK_VAL'] = TEMP_PAYANN_NONPRDWORK\n                record['PAY_ANN_PRDWRK_VAL'] = TEMP_PAYANN_PRDWORK\n                record['PAY_ANN_PRDWRK_VAL_F'] = setCharAt(record['PAY_ANN_PRDWRK_VAL_F'], 2, 'K');\n                record['PAY_ANN_NONPRDWRK_VAL_F'] = setCharAt(record['PAY_ANN_NONPRDWRK_VAL_F'], 2, 'K');\n                if (TEMP_PAYANN_PRDWORK + TEMP_PAYANN_NONPRDWORK != PAY_ANN_VAL) {\n                    if (TEMP_PAYANN_PRDWORK + TEMP_PAYANN_NONPRDWORK < PAY_ANN_VAL) {\n                        if (TEMP_PAYANN_PRDWORK > TEMP_PAYANN_NONPRDWORK) {\n                            record['TEMP_PAYANN_PRDWORK'] = Math.round(PAY_ANN_VAL - TEMP_PAYANN_NONPRDWORK)\n                        } else if (TEMP_PAYANN_NONPRDWORK > TEMP_PAYANN_PRDWORK) {\n                            record['TEMP_PAYANN_NONPRDWORK'] = Math.round(PAY_ANN_VAL - TEMP_PAYANN_PRDWORK)\n                        }\n                    } else {\n                        if (TEMP_PAYANN_PRDWORK > TEMP_PAYANN_NONPRDWORK) {\n                            record['TEMP_PAYANN_NONPRDWORK'] = Math.round(PAY_ANN_VAL - TEMP_PAYANN_PRDWORK)\n                        } else if (TEMP_PAYANN_NONPRDWORK > TEMP_PAYANN_PRDWORK) {\n                            record['TEMP_PAYANN_PRDWORK'] = Math.round(PAY_ANN_VAL - TEMP_PAYANN_NONPRDWORK)\n                        }\n                    }\n                }\n            } else {\n                record['PAY_ANN_PRDWRK_VAL_F'] = setCharAt(record['PAY_ANN_PRDWRK_VAL_F'], 2, 'X');\n                record['PAY_ANN_NONPRDWRK_VAL_F'] = setCharAt(record['PAY_ANN_NONPRDWRK_VAL_F'], 2, 'X');\n            }\n        }\n    }\n    record['ACTION'] = 'Go To: EMPQ1'\n    // global.set('action', 'Go To: EMPQ1')\n} else {\n    record['ACTION'] = 'Return to Main Routing'\n    // global.set('action', 'Return to Main Routing')\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "e1c3e5836e2b8eca",
        "type": "function",
        "z": "9f8b85fce167ad51",
        "name": "mfg_empq1",
        "func": "function setCharAt(str, index, chr) {\n    if ([null, undefined].includes(str)) {\n        let newstr = ''\n        for (let i = 0; i < index; i++) {\n            newstr = newstr + ' ';\n        }\n        newstr = newstr + chr\n        return newstr;\n    } else {\n        if (index > str.length - 1) {\n            let addstr = index - str.length\n            let newstr = str\n            for (let i = 0; i < addstr; i++) {\n                newstr = newstr + ' ';\n            }\n            newstr = newstr + chr\n            return newstr;\n        } else {\n            return str.substring(0, index) + chr + str.substring(index + 1);\n        }\n    }\n}\n\nlet record_idx = global.get(\"ptrModuleFacts\");\nlet record = msg.payload.csv[record_idx];\n\nconst PAY_ANN_VAL = parseFloat(record['PAY_ANN_VAL'])\nconst PAY_ANN_PRDWRK_VAL = parseFloat(record['PAY_ANN_PRDWRK_VAL'])\nconst PAY_ANN_NONPRDWRK_VAL = parseFloat(record['PAY_ANN_NONPRDWRK_VAL'])\nconst EMP_MAR12_NUM = parseFloat(record['EMP_MAR12_NUM'])\nconst EMP_MAR12_PRDWRK_NUM = parseFloat(record['EMP_MAR12_PRDWRK_NUM'])\nconst EMP_MAR12_NONPRDWRK_NUM = parseFloat(record['EMP_MAR12_NONPRDWRK_NUM'])\nconst PAY_QTR1_VAL = parseFloat(record['PAY_QTR1_VAL'])\nconst PAY_QTR1_PRDWRK_VAL = parseFloat(record['PAY_QTR1_PRDWRK_VAL'])\nconst PAY_QTR1_NONPRDWRK_VAL = parseFloat(record['PAY_QTR1_NONPRDWRK_VAL'])\n\nif ((EMP_MAR12_PRDWRK_NUM + EMP_MAR12_NONPRDWRK_NUM == 0) && EMP_MAR12_NUM > 0) {\n    if (PAY_ANN_PRDWRK_VAL > 0 && PAY_ANN_NONPRDWRK_VAL > 0 && PAY_ANN_VAL > 0) {\n        record['EMP_MAR12_PRDWRK_NUM'] = Math.round((PAY_ANN_PRDWRK_VAL / PAY_ANN_VAL) * EMP_MAR12_NUM)\n        record['EMP_MAR12_NONPRDWRK_NUM'] = Math.round((PAY_ANN_NONPRDWRK_VAL / PAY_ANN_VAL) * EMP_MAR12_NUM)\n        record['EMP_MAR12_PRDWRK_NUM_F'] = setCharAt(record['EMP_MAR12_PRDWRK_NUM_F'], 2, 'J');\n        record['EMP_MAR12_NONPRDWRK_NUM_F'] = setCharAt(record['EMP_MAR12_NONPRDWRK_NUM_F'], 2, 'J');\n    } else if (PAY_QTR1_NONPRDWRK_VAL > 0 && PAY_QTR1_PRDWRK_VAL > 0 && PAY_QTR1_VAL > 0) {\n        record['EMP_MAR12_PRDWRK_NUM'] = Math.round((PAY_QTR1_PRDWRK_VAL / PAY_QTR1_VAL) * EMP_MAR12_NUM)\n        record['EMP_MAR12_NONPRDWRK_NUM'] = Math.round((PAY_QTR1_NONPRDWRK_VAL / PAY_QTR1_VAL) * EMP_MAR12_NUM)\n        record['EMP_MAR12_PRDWRK_NUM_F'] = setCharAt(record['EMP_MAR12_PRDWRK_NUM_F'], 2, 'J');\n        record['EMP_MAR12_NONPRDWRK_NUM_F'] = setCharAt(record['EMP_MAR12_NONPRDWRK_NUM_F'], 2, 'J');\n    } else {\n        record['EMP_MAR12_PRDWRK_NUM_F'] = setCharAt(record['EMP_MAR12_PRDWRK_NUM_F'], 2, 'X');\n        record['EMP_MAR12_NONPRDWRK_NUM_F'] = setCharAt(record['EMP_MAR12_NONPRDWRK_NUM_F'], 2, 'X');\n    }\n} else if ((EMP_MAR12_NONPRDWRK_NUM + EMP_MAR12_PRDWRK_NUM > 0) && EMP_MAR12_NUM > 0) {\n    if (EMP_MAR12_NONPRDWRK_NUM + EMP_MAR12_PRDWRK_NUM != EMP_MAR12_NUM) {\n        if (EMP_MAR12_PRDWRK_NUM == 0 && (EMP_MAR12_NONPRDWRK_NUM < EMP_MAR12_NUM)) {\n            record['EMP_MAR12_PRDWRK_NUM'] = EMP_MAR12_NUM - EMP_MAR12_NONPRDWRK_NUM\n            record['EMP_MAR12_PRDWRK_NUM_F'] = setCharAt(record['EMP_MAR12_PRDWRK_NUM_F'], 2, 'J');\n        } else if (EMP_MAR12_NONPRDWRK_NUM == 0 && (EMP_MAR12_PRDWRK_NUM < EMP_MAR12_NUM)) {\n            record['EMP_MAR12_NONPRDWRK_NUM'] = EMP_MAR12_NUM - EMP_MAR12_PRDWRK_NUM\n            record['EMP_MAR12_NONPRDWRK_NUM_F'] = setCharAt(record['EMP_MAR12_NONPRDWRK_NUM_F'], 2, 'J');\n        } else if (.8 <= (EMP_MAR12_PRDWRK_NUM + EMP_MAR12_NONPRDWRK_NUM) / EMP_MAR12_NUM &&\n            (EMP_MAR12_PRDWRK_NUM + EMP_MAR12_NONPRDWRK_NUM) / EMP_MAR12_NUM <= 1.2) {\n            const TEMP_DET_TOT = EMP_MAR12_PRDWRK_NUM + EMP_MAR12_NONPRDWRK_NUM\n            const TEMP_EMP_PRDWORK = Math.round((EMP_MAR12_PRDWRK_NUM / TEMP_DET_TOT) * EMP_MAR12_NUM)\n            const TEMP_EMP_NONPRDWORK = Math.round((EMP_MAR12_NONPRDWRK_NUM / TEMP_DET_TOT) * EMP_MAR12_NUM)\n            record['EMP_MAR12_NONPRDWRK_NUM'] = TEMP_EMP_NONPRDWORK\n            record['EMP_MAR12_PRDWRK_NUM'] = TEMP_EMP_PRDWORK\n            record['EMP_MAR12_PRDWRK_NUM_F'] = setCharAt(record['EMP_MAR12_PRDWRK_NUM_F'], 2, 'K');\n            record['EMP_MAR12_NONPRDWRK_NUM_F'] = setCharAt(record['EMP_MAR12_NONPRDWRK_NUM_F'], 2, 'K');\n            if (TEMP_EMP_PRDWORK + TEMP_EMP_NONPRDWORK != EMP_MAR12_NUM) {\n                if (TEMP_EMP_PRDWORK + TEMP_EMP_NONPRDWORK < EMP_MAR12_NUM) {\n                    if (TEMP_EMP_PRDWORK > TEMP_EMP_NONPRDWORK) {\n                        record['EMP_MAR12_PRDWRK_NUM'] = Math.round(EMP_MAR12_NUM - TEMP_EMP_NONPRDWORK)\n                    } else if (TEMP_EMP_NONPRDWORK > TEMP_EMP_PRDWORK) {\n                        record['EMP_MAR12_NONPRDWRK_NUM'] = Math.round(EMP_MAR12_NUM - TEMP_EMP_PRDWORK)\n                    }\n                } else {\n                    if (TEMP_EMP_PRDWORK > TEMP_EMP_NONPRDWORK) {\n                        record['EMP_MAR12_NONPRDWRK_NUM'] = Math.round(EMP_MAR12_NUM - TEMP_EMP_PRDWORK)\n                    } else if (TEMP_EMP_NONPRDWORK > TEMP_EMP_PRDWORK) {\n                        record['EMP_MAR12_PRDWRK_NUM'] = Math.round(EMP_MAR12_NUM - TEMP_EMP_NONPRDWORK)\n                    }\n                }\n            }\n        } else {\n            record['EMP_MAR12_PRDWRK_NUM_F'] = setCharAt(record['EMP_MAR12_PRDWRK_NUM_F'], 2, 'X');\n            record['EMP_MAR12_NONPRDWRK_NUM_F'] = setCharAt(record['EMP_MAR12_NONPRDWRK_NUM_F'], 2, 'X');\n        }\n    }\n}\n\nrecord['ACTION'] = 'Go To: PAYQTR1'\n// global.set('action', 'Go To: PAYQTR1')\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "f6885c586821c8cd",
        "type": "function",
        "z": "b3b1701e035827dc",
        "name": "NAPCS HDICAT",
        "func": "let record_idx = global.get(\"ptrModuleFacts\");\nlet record = msg.payload.csv[record_idx];\n\nfunction setCharAt(str, index, chr) {\n    if ([null, undefined].includes(str)) {\n        let newstr = ''\n        for (let i = 0; i < index; i++) {\n            newstr = newstr + ' ';\n        }\n        newstr = newstr + chr\n        return newstr;\n    } else {\n        if (index > str.length - 1) {\n            let addstr = index - str.length\n            let newstr = str\n            for (let i = 0; i < addstr; i++) {\n                newstr = newstr + ' ';\n            }\n            newstr = newstr + chr\n            return newstr;\n        } else {\n            return str.substring(0, index) + chr + str.substring(index + 1);\n        }\n    }\n}\nfunction NAPCSHDICAT() {\n    console.log(1)\n   if(record?.TABSTAT == 'Y' && parseFloat(record?.RCPT_TOT_VAL) > 0 && ['20','90'].includes(record?.RECORD_TYP_TXT)){\n       console.log(2)\n        if(record?.NAPCS_IND == 'U'){\n            console.log(3)\n            if(['T','E'].includes(record?.NAPCS_NODONOR)){\n                console.log(4)\n                // setCharAt(record.NAPCS_HDICAT || ' ', 1, 'NC')\n                record.NAPCS_HDICAT = 'NC'\n            }else{\n                console.log(5)\n                // setCharAt(record.NAPCS_HDICAT || ' ', 1, 'C')\n                record.NAPCS_HDICAT = 'C'\n            }\n        }else{\n            console.log(6)\n            // setCharAt(record.NAPCS_HDICAT || ' ', 1, 'F')\n            record.NAPCS_HDICAT = 'F'\n        }\n   }else{\n       console.log(7)\n    record.NAPCS_HDICAT = ' '\n   }\n    console.log(8)\n    record.ACTION = 'END'\n}\nNAPCSHDICAT()\nmsg.payload.csv[record_idx] = record\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "4569aee5c3cfae11",
        "type": "function",
        "z": "4b2a066dec42e6f4",
        "name": "NAPCS: NO DONOR",
        "func": "let record_idx = global.get(\"ptrModuleFacts\");\nlet record = msg.payload.csv[record_idx];\n\nfunction setCharAt(str, index, chr) {\n    if (index > str.length - 1) return str.padEnd(index, ' ') + chr;\n    return str.substring(0, index) + chr + str.substring(index + 1);\n}\n\nfunction NAPCSNODONOR() {\n    if (record?.SURVEYID_FROM_M_GOCO && record?.parentH_ID_Mustaskas) {\n        // Call M_GOCO module\n    } else if (['T', 'B'].includes(record?.NAPCS_NODONOR) && ['20', '90'].includes(record?.RECORD_TYP_TXT)) {\n        // Condition is met, further actions should be defined here\n    } else {\n        record.NAPCS_NODONOR = 'I';\n        if (record?.NAPCS_IND === 'U' && parseFloat(record?.RCPT_VAL_TOT) > 0) {\n            if (record?.NAPCS_CODE_OLD && record?.NAPCS_CODE_OLD.trim() in ['NAPCS_NODONOR_CUTOFF', 'NAPCS_NODONOR', 'NAPCS_OTHER_RCPT_TOT_VAL']) {\n                record.TABSTAT = 'N';\n                record.NONTABLE_F = 'R';\n            } else {\n                let sumOfProdCodeVal = calculateSumOfProdCodeVal(record);\n                let prodCodeCutoff = record.NAPCSOTH / record.RCPT_TOT_VAL >= 0.50;\n                if (prodCodeCutoff) {\n                    // Condition is met, further actions should be defined here\n                } else {\n                    let anotherSumOfProdCodeVal = calculateAnotherSumOfProdCodeVal(record);\n                    if (anotherSumOfProdCodeVal >= 0.50) {\n                        // Condition is met, further actions should be defined here\n                    } else if (record?.NAPCS_IMP === 'Y') {\n                        // Condition is met, further actions should be defined here\n                    }\n                }\n            }\n        }\n    }\n}\n\nfunction calculateSumOfProdCodeVal(record) {\n    return 0;\n}\n\nfunction calculateAnotherSumOfProdCodeVal(record) {\n    return 0;\n}\n\nNAPCSNODONOR();\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "e07677c8e679affd",
        "type": "function",
        "z": "e77217f4bfc52a38",
        "name": "napcs_recalculate_napcs_fields",
        "func": "try{\n    let record_idx = global.get(\"ptrModuleFacts\");\n    let record = msg.payload.csv[record_idx];\n\n    msg.cache = global.get(\"lookupCache\")\n        .data.find(\n            item =>\n                item.module === \"napcs\" &&\n                item.param === 'napcs_balance' &&\n                item.program === \"aies\" &&\n                item.unit_type === \"all\"\n        )?.json_values;\n\n    var jsonData = msg.cache\n\n    const jsonD = jsonData.NAPCS_BALANCE\n\n    function calculateNAPCS(jsonD) {\n        let NAPCS_BLTOT = jsonD.reduce((acc, item) => {\n            if (item.PROD_CODE.substr(6, 3) === '000') {\n                return acc + item.PROD_CODE_VAL;\n            }\n            return acc;\n        }, 0);\n\n        let NAPCS_BAL = record.RCPT_TOT_VAL - NAPCS_BLTOT;\n\n        let NAPCS_PRM = jsonD.reduce((acc, item) => {\n            if (item.PROD_CODE.startsWith('2')) {\n                return acc + item.PROD_CODE_VAL;\n            }\n            return acc;\n        }, 0);\n\n        let NAPCS_OTH_1 = jsonD.reduce((acc, item) => {\n            if (!item.PROD_CODE.startsWith('2')) {\n                return acc + item.PROD_CODE_VAL;\n            }\n            return acc;\n        }, 0);\n\n        let NAPCS_OTH_2 = jsonD.reduce((acc, item) => {\n            if (item.PROD_CODE.substr(0, 7) === '9000000') {\n                return acc + item.PROD_CODE_VAL;\n            }\n            return acc;\n        }, 0);\n\n        let NAPCS_OTH = NAPCS_OTH_1 - NAPCS_OTH_2\n\n        return { NAPCS_BLTOT, NAPCS_BAL, NAPCS_PRM, NAPCS_OTH };\n    }\n\n    record = { ...record, ...calculateNAPCS(jsonD) }\n\n    msg.payload.csv[record_idx] = record\n    return msg\n\n}catch(e){\n    return msg\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "b2afff84193f1485",
        "type": "function",
        "z": "fbb1e70dfe5fe82f",
        "name": "NAPCS BL ROUNDING",
        "func": "let record_idx = global.get(\"ptrModuleFacts\");\nlet record = msg.payload.csv[record_idx];\n\nfunction setCharAt(str, index, chr) {\n    if ([null, undefined].includes(str)) {\n        let newstr = ''\n        for (let i = 0; i < index; i++) {\n            newstr = newstr + ' ';\n        }\n        newstr = newstr + chr\n        return newstr;\n    } else {\n        if (index > str.length - 1) {\n            let addstr = index - str.length\n            let newstr = str\n            for (let i = 0; i < addstr; i++) {\n                newstr = newstr + ' ';\n            }\n            newstr = newstr + chr\n            return newstr;\n        } else {\n            return str.substring(0, index) + chr + str.substring(index + 1);\n        }\n    }\n}\nfunction NAPCSBLRounding() {\n    // Create Table \n    record?.PROD_CODE \n    record?.RCPT_TOT_VAL\n    record?.PROD_CODE_MF\n    \n    record.ACTION = 'Return to Evaluate Details Valuation Methods'\n}\n\nNAPCSBLRounding()\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "1fe10b7b2609c70b",
        "type": "function",
        "z": "c706d1ca2706f3bf",
        "name": "Balancing",
        "func": "// let record_idx = global.get(\"ptrModuleFacts\");\n// let record = msg.payload.csv[record_idx];\n\n\n// let cache = global.get(\"lookupCache\");\n\n// let naics_tolerance_file = cache.data.find(\n//     item =>\n//         item.module === \"naics\" &&\n//         item.param === 'naics_tolerance' &&\n//         item.program === \"aies\" &&\n//         item.unit_type === \"all\"\n// )?.json_values;\n// msg.test = naics_tolerance_file\n// let params = {\n//     UL: 0,\n//     LL: 0\n// }\n// const setCharAt = (str, index, char) => {\n//     if (index > str.length - 1) return str.padEnd(index, ' ') + char;\n//     return str.substr(0, index) + char + str.substr(index + char.length);\n// };\n\n// function Balancing(){\n//     if (parseInt(record?.RCPT_TOT_VAL) > 0){\n//         if([/*parameter table */].includes(record?.NAICS_OLD_CODE)){\n//             record.TABSTAT = 'N'\n//             record.NONTABFL = 'R'\n//             record.STOP = 'T'\n//             record.MIS_NAICSOLD_NAICSTOLERANCE = 'Y' // need to check what neeeds to set here\n//             balancePathA()\n//         }else if(record.NAPCS_BLTOT == record.RCPT_TOT_VAL ){\n//             balancePathA()\n//         } else if (params.LL <= parseFloat(record?.NAPCS_BLTOT) && parseFloat(record?.RCPT_TOT_VAL) <= params.UL){\n//             // need to check from where this variables are comming from\n//             record.PROD_CODE_VAL = (parseFloat(record?.PROD_CODE_VAL) / parseFloat(record?.NAPCS_BLTOT) * parseFloat(record?.RCPT_TOT_VAL))\n//             record.PROD_CODE_F = setCharAt(record?.PROD_CODE_F || '  ', 2, 'K')\n//             balancePathA()\n//             // from where this PI comming from \n//         } else if ((parseFloat(record?.RCPT_TOT_VAL) == parseFloat(record?.RCPT_TOT_VAL_PI)) || (parseFloat(record?.RCPT_TOT_VAL_PI) == 0)){\n//             balancePathB()\n//             // where this PI is comming from\n//         } else if (params.LL <= parseFloat(record?.NAPCS_BLTOT) && parseFloat(record?.RCPT_TOT_VAL_PI) <= params.UL) {\n//             record.PROD_CODE_VAL = (parseFloat(record?.PROD_CODE_VAL) / parseFloat(record?.NAPCS_BLTOT) * parseFloat(record?.RCPT_TOT_VAL))\n//             record.PROD_CODE_F = setCharAt(record?.PROD_CODE_F || '  ', 2, 'K')\n//         }else{\n//             balancePathB()\n//         }\n//     }else{\n//         balancePathB()\n//     }\n// }\n// function balancePathA(){\n//     msg.payload.csv[record_idx] = record;\n//     return msg\n// }\n// function balancePathB(){\n//     record.NAPCS_IND = 'N'\n//     balancePathA()\n// }\n// Balancing()\n\n\n\nlet record_idx = global.get(\"ptrModuleFacts\");\nlet record = msg.payload.csv[record_idx];\n\n//The napcs balancing module uses naics_tolerance params \nmsg.cache = global.get(\"lookupCache\")\n    .data.find(\n        item =>\n            item.module === 'naics' &&\n            item.param === 'naics_tolerance' &&\n            item.program === 'aies' &&\n            item.unit_type === 'all'\n    )?.json_values;\n\nconsole.log({\n    msg: msg.cache['NAICS_TOLERANCE']\n})\n\nvar jsonData = msg.cache\n\n// can remove the console logs after\nconsole.log('blahbahblah', msg.cache, 'json man') // prints naics_tolerance json as is\nconsole.log('I can get csv naics', record.NAICS_CODE_OLD)\n\nconst setCharAt = (str, index, char) => {\n    if (index > str.length - 1) return str.padEnd(index, ' ') + char;\n    return str.substr(0, index) + char + str.substr(index + char.length);\n};\n\nfunction naicsFind() {\n    let found = false;\n    for (let i = 0; i < jsonData.NAICS_TOLERANCE.length; i++) {\n        if (jsonData.NAICS_TOLERANCE[i].NAICS !== record.NAICS_CODE_OLD) {\n            found = true;\n        }\n        else {\n            break;\n        }\n    }\n\n    if (found) {\n        console.log('Lets see if this is the found', found)\n        record.TABSTAT = 'N'\n        record.NONTABFL = 'R'\n        record.STOP = 'T'\n        record.REFERRAL_FLAG = 'MIS_NAICSOLD_NAICSTOLERANCE' // checked with Census\n        balancePathA()\n    }\n    else if (record.NAPCS_BLTOT == record.RCPT_TOT_VAL) {\n        balancePathA()\n    } else if (record.NAPCS_BLTOT != record.RCPT_TOT_VAL) {\n        setProdCodeVal()\n    }\n\n}\n\nfunction setProdCodeVal() {\n    let found1 = false;\n    for (let i = 0; i < jsonData.NAICS_TOLERANCE.length; i++) {\n        if (jsonData.NAICS_TOLERANCE[i].LL <= parseFloat(record.NAPCSBLTOT) || jsonData.NAICS_TOLERANCE[i].UL >= parseFloat(record.RCPT_TOT_VAL)) {\n            found1 = true;\n        }\n        else {\n            break;\n        }\n    }\n    if (found1) {\n        record.PROD_CODE_VAL = (parseFloat(record.PROD_CODE_VAL) / parseFloat(record.NAPCSBLTOT) * parseFloat(record.RCPT_TOT_VAL))\n        record.PROD_CODE_F = setCharAt(record?.PROD_CODE_F || '  ', 2, 'K')\n        balancePathA()\n    }\n    else if ((parseFloat(record?.RCPT_TOT_VAL) == parseFloat(record?.RCPT_TOT_VAL_PI)) || (parseFloat(record?.RCPT_TOT_VAL_PI) == 0)) {\n        balancePathB()\n    }\n    else if ((parseFloat(record?.RCPT_TOT_VAL) != parseFloat(record?.RCPT_TOT_VAL_PI)) && (parseFloat(record?.RCPT_TOT_VAL_PI) != 0)) {\n        setProdCodeValPi()\n    }\n}\n\nfunction setProdCodeValPi() {\n    let found1 = false;\n    for (let i = 0; i < jsonData.NAICS_TOLERANCE.length; i++) {\n        if (jsonData.NAICS_TOLERANCE[i].LL <= parseFloat(record.NAPCSBLTOT) || jsonData.NAICS_TOLERANCE[i].UL >= parseFloat(record.RCPT_TOT_VAL_PI)) {\n            found1 = true;\n        }\n        else {\n            break;\n        }\n    }\n    if (found1) {\n        record.PROD_CODE_VAL = (parseFloat(record.PROD_CODE_VAL) / parseFloat(record.NAPCSBLTOT) * parseFloat(record.RCPT_TOT_VAL))\n        record.PROD_CODE_F = setCharAt(record?.PROD_CODE_F || '  ', 2, 'K')\n        balancePathA()\n    } else {\n        balancePathB()\n    }\n}\n\nif (parseInt(record?.RCPT_TOT_VAL) > 0) {\n    naicsFind()\n} else {\n    balancePathB()\n}\n\nfunction balancePathA() {\n    record['ACTION is for A '] = 'This is path A'\n    msg.payload.csv[record_idx] = record;\n    return msg\n}\nfunction balancePathB() {\n    record.NAPCS_IND = 'N'\n    balancePathA()\n    record['ACTION is for B'] = 'This is path B'\n}\n\nmsg.payload.csv[record_idx] = record\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "401fdae063b57aa5",
        "type": "function",
        "z": "d32a58c0544f501c",
        "name": "NAPCS Balance",
        "func": "try{\n    let record_idx = global.get(\"ptrModuleFacts\");\n    let record = msg.payload.csv[record_idx];\n\n    const setCharAt = (str, index, char) => {\n        if (index > str.length - 1) return str.padEnd(index, ' ') + char;\n        return str.substr(0, index) + char + str.substr(index + char.length);\n    };\n\n    msg.cache = global.get(\"lookupCache\")\n        .data.find(\n            item =>\n                item.module === \"napcs\" &&\n                item.param === 'napcs_balance' &&\n                item.program === \"aies\" &&\n                item.unit_type === \"all\"\n        )?.json_values;\n\n    var jsonData = msg.cache\n\n    function NAPCSBalancing() {\n        try {\n            if (record.NAICS_SECTOR === '31' && record.SUBSAMP_IND_TXT !== 'MC') {\n                if (record.NAPCS_IND === undefined || record.NAPCS_IND === null) {\n                    if (record.HISTSTAT === 'Y' &&\n                        record.EC_NAPCS_IND === 'U' &&\n                        (parseInt(record.EC_NAPCS_BLTOT) > 0) &&\n                        (parseInt(record.EC_RCPT_TOT_VAL) > 0) &&\n                        (parseInt(record.RCPT_TOT_VAL) > 0) &&\n                        record.NAPCSIMP === 'Y') {\n                        if (record.EC_REPORTING_ID === record.REPORTING_ID &&\n                            record.EC_REF_PER === '2022U1' &&\n                            (record.EC_NAPCS_USABLE !== 'I' || record.EC_NAPCS_USABLE !== 'D' || record.EC_NAPCS_USABLE !== 'X') &&\n                            (parseInt(record.EC_NAPCS_PROD_CODE_VAL) > 0) &&\n                            record['EC_NAPCS_PROD_CODE'].substring(0, 7) !== '9000000') {\n                            record.NAPCSIND = 'U'\n                            record.NAPCSIMP = 'Y'\n                            record.PROD_CODE = record.EC_NAPCS_PROD_CODE\n                            record.USABLE = 'U'\n                            record.PROD_CODE_VAL = (parseFloat(record.EC_NAPCS_PROD_CODE_VAL) * (\n                                parseFloat(record.RCPT_TOT_VAL)) /\n                                parseFloat(record.EC_RCPT_TOT_VAL))\n                            record.REPORTING_ID = record.REPORTING_ID\n                            record.REF_PER = record.REF_PER\n                            record.PROD_CODE_F = setCharAt(record.PROD_CODE_F.toString(), 2, 'H');\n                        }\n                        if ((parseInt(record.EC_NAPCS_PROD_CODE_VAL) > 0) &&\n                            record['EC_NAPCS_PROD_CODE'].substring(0, 7) === '9000000') {\n                            record.NAPCS_IND = 'U'\n                            record.NAPCS_IMP = 'Y'\n                            record.PROD_CODE = record.EC_NAPCS_PROD_CODE\n                            record.USABLE = 'J'\n                            record.PROD_CODE_VAL = (parseFloat(record.EC_NAPCS_PROD_CODE_VAL) *\n                                (parseFloat(record.RCPT_TOT_VAL)) / parseFloat(record.EC_RCPT_TOT_VAL))\n                            record.REPORTING_ID = record.REPORTING_ID\n                            record.REF_PER = record.REF_PER\n                            record.PROD_CODE_F = setCharAt(record.PROD_CODE_F.toString(), 2, 'H');\n                        }\n                        NapcsSum()\n                    }\n                    else {\n                        NAPCSBalancepathB()\n                    }\n                }\n                else {\n                    NAPCSBalancepathA()\n                }\n            }\n            else {\n                record['ACTION'] = 'Go To main Routing'\n            }\n        }\n        catch (e) {\n            if (!(e instanceof Error)) {\n                e = new Error(e)\n            }\n            console.error(e.message)\n        }\n    }\n\n    function NapcsSum() {\n        for (let index = 0; index < jsonData.NAPCS_BALANCE.length; index++) {\n            if (jsonData.NAPCS_BALANCE[index].PROD_CODE.substr(7, 3) === '000') {\n                record.NAPCS_BLTOT = parseInt(record.NAPCS_BLTOT) + parseInt(jsonData.NAPCS_BALANCE[index].PROD_CODE_VAL)\n            }\n            else {\n                break;\n            }\n        }\n        NAPCSBalancepathA()\n    }\n\n    function NAPCSBalancepathA() {\n        // call Balancing Module\n        if (record.NAPCS_IND === 'U') {\n            // call BL Rounding Module\n        }\n        // for Each Prod_code on record\n        if (parseInt(record.PROD_CODE_VAL) === 0) {\n            record.USABLE = 'D'\n        }\n        // Recalculate NAPCS Field Module\n        if (parseInt(record.NAPCS_BAL) !== 0 || record.NAPCS_IND === 'U') {\n            record.NAPCS_IND = 'N'\n        }\n        record['ACTION'] = 'This is path A'\n        NAPCSBalancepathB()\n    }\n    function NAPCSBalancepathB() {\n        // call NO DONOR\n        // call HDICAT\n        // END\n        record['ACTION'] = 'This is path B'\n\n    }\n\n    NAPCSBalancing()\n    msg.payload.csv[record_idx] = record\n    return msg;\n}catch(e){\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "5c958e901a16d2a1",
        "type": "function",
        "z": "6f23d11cf5bb4bde",
        "name": "MIV: NonLIFORANDOMModule",
        "func": "let record_idx = global.get(\"ptrModuleFacts\");\nlet record = msg.payload.csv[record_idx];\n\nfunction setCharAt(str, index, chr) {\n    if ([null, undefined].includes(str)) {\n        let newstr = ''\n        for (let i = 0; i < index; i++) {\n            newstr = newstr + ' ';\n        }\n        newstr = newstr + chr\n        return newstr;\n    } else {\n        if (index > str.length - 1) {\n            let addstr = index - str.length\n            let newstr = str\n            for (let i = 0; i < addstr; i++) {\n                newstr = newstr + ' ';\n            }\n            newstr = newstr + chr\n            return newstr;\n        } else {\n            return str.substring(0, index) + chr + str.substring(index + 1);\n        }\n    }\n}\n\nfunction NonLIFORANDOMModulePath(variable) {\n    let avg = ''\n    let avg_f = ''\n    let fifo = ''\n    let fifo_f = ''\n    let std = ''\n    let std_f = ''\n    let othnl = ''\n    let othnl_f = ''\n    let ival_tot = ''\n    let nl_tot = ''\n    let nl_tot_f = ''\n    let lifo = ''\n    if (variable == 'E') {\n        avg = 'INV_E_AVG_VAL'\n        avg_f = 'INV_E_AVG_VAL_F'\n        fifo = 'INV_E_FIFO_VAL'\n        fifo_f = 'INV_E_FIFO_VAL_F'\n        std = 'INV_E_STD_VAL'\n        std_f = 'INV_E_STD_VAL_F'\n        othnl = 'INV_E_OTHNL_VAL'\n        othnl_f = 'INV_E_OTHNL_VAL_F'\n        ival_tot = 'INV_E_IVAL_TOT_DVAL'\n        nl_tot = 'INV_E_NL_TOT_DVAL'\n        nl_tot_f = 'INV_E_NL_TOT_DVAL_F'\n        lifo = 'INV_E_LIFO_VAL'\n    } else if (variable == 'B') {\n        avg = 'INV_B_AVG_VAL'\n        avg_f = 'INV_B_AVG_VAL_F'\n        fifo = 'INV_B_FIFO_VAL'\n        fifo_f = 'INV_B_FIFO_VAL_F'\n        std = 'INV_B_STD_VAL'\n        std_f = 'INV_B_STD_VAL_F'\n        othnl = 'INV_B_OTHNL_VAL'\n        othnl_f = 'INV_B_OTHNL_VAL_F'\n        ival_tot = 'INV_B_IVAL_TOT_DVAL'\n        nl_tot = 'INV_B_NL_TOT_DVAL'\n        nl_tot_f = 'INV_B_NL_TOT_DVAL_F'\n        lifo = 'INV_B_LIFO_VAL'\n    }\n    if ((0 <= parseInt(record?.NLFLO)) && (30 >= parseInt(record?.NLFLO))) {\n        record[std] = parseFloat(record?.[ival_tot]) - parseFloat(record?.[lifo])\n        record[std_f] = setCharAt(record?.[std_f], 2, 'J')\n        record[fifo] = 0\n        record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'J')\n        record[avg] = 0\n        record[avg_f] = setCharAt(record?.[avg_f], 2, 'J')\n        record[othnl] = 0\n        record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'J')\n\n    } else if ((31 <= parseInt(record?.NLFLO)) && (40 >= parseInt(record?.NLFLO))) {\n        record[avg] = parseFloat(record?.[ival_tot]) - parseFloat(record?.[lifo])\n        record[avg_f] = setCharAt(record?.[avg_f], 2, 'J')\n        record[fifo] = 0\n        record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'J')\n        record[std] = 0\n        record[std_f] = setCharAt(record?.[std_f], 2, 'J')\n        record[othnl] = 0\n        record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'J')\n\n    } else if ((41 <= parseInt(record?.NLFLO)) && (50 >= parseInt(record?.NLFLO))) {\n        record[othnl] = parseFloat(record?.[ival_tot]) - parseFloat(record?.[lifo])\n        record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'J')\n        record[fifo] = 0\n        record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'J')\n        record[std] = 0\n        record[std_f] = setCharAt(record?.[std_f], 2, 'J')\n        record[avg] = 0\n        record[avg_f] = setCharAt(record?.[avg_f], 2, 'J')\n\n    } else {\n        record[fifo] = parseFloat(record?.[ival_tot]) - parseFloat(record?.[lifo])\n        record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'J')\n        record[avg] = 0\n        record[avg_f] = setCharAt(record?.[avg_f], 2, 'J')\n        record[std] = 0\n        record[std_f] = setCharAt(record?.[std_f], 2, 'J')\n        record[othnl] = 0\n        record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'J')\n    }\n    record[nl_tot] = parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std]) + parseFloat(record?.[othnl])\n    record[nl_tot_f] = setCharAt(record?.[nl_tot_f], 2, 'J')\n}\nfunction NonLIFORANDOMModule() {\n    record.NLFLO = 0\n    record.NLFLO = parseInt(Math.floor(Math.random() * 100))\n    if (record.NLFLO < 10) {\n        record.NLFLO = '0' + record.NLFLO\n    } else {\n        record.NLFLO = '' + record.NLFLO\n    }\n    NonLIFORANDOMModulePath('B')\n    NonLIFORANDOMModulePath('E')\n    record.ACTION = 'Return to Evaluate Details Valuation Methods'\n}\n\nNonLIFORANDOMModule()\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "2bda237fe1cd2f49",
        "type": "function",
        "z": "625b8c982fed66b7",
        "name": "MIV: EvaluateNoNLIFOValuationMethodModule",
        "func": "try{\n    let record_idx = global.get(\"ptrModuleFacts\");\n    let record = msg.payload.csv[record_idx];\n\n    function setCharAt(str, index, chr) {\n        if ([null, undefined].includes(str)) {\n            let newstr = ''\n            for (let i = 0; i < index; i++) {\n                newstr = newstr + ' ';\n            }\n            newstr = newstr + chr\n            return newstr;\n        } else {\n            if (index > str.length - 1) {\n                let addstr = index - str.length\n                let newstr = str\n                for (let i = 0; i < addstr; i++) {\n                    newstr = newstr + ' ';\n                }\n                newstr = newstr + chr\n                return newstr;\n            } else {\n                return str.substring(0, index) + chr + str.substring(index + 1);\n            }\n        }\n    }\n\n    function EvaluateNoNLIFOValuationMethod(variable) {\n        let avg = ''\n        let avg_f = ''\n        let fifo = ''\n        let fifo_f = ''\n        let std = ''\n        let std_f = ''\n        let othnl = ''\n        let othnl_f = ''\n        let ival_tot = ''\n        let nl_tot = ''\n        if (variable == 'E') {\n            avg = 'INV_E_AVG_VAL'\n            avg_f = 'INV_E_AVG_VAL_F'\n            fifo = 'INV_E_FIFO_VAL'\n            fifo_f = 'INV_E_FIFO_VAL_F'\n            std = 'INV_E_STD_VAL'\n            std_f = 'INV_E_STD_VAL_F'\n            othnl = 'INV_E_OTHNL_VAL'\n            othnl_f = 'INV_E_OTHNL_VAL_F'\n            ival_tot = 'INV_E_IVAL_TOT_DVAL'\n            nl_tot = 'INV_E_NL_TOT_DVAL'\n        } else if (variable == 'B') {\n            avg = 'INV_B_AVG_VAL'\n            avg_f = 'INV_B_AVG_VAL_F'\n            fifo = 'INV_B_FIFO_VAL'\n            fifo_f = 'INV_B_FIFO_VAL_F'\n            std = 'INV_B_STD_VAL'\n            std_f = 'INV_B_STD_VAL_F'\n            othnl = 'INV_B_OTHNL_VAL'\n            othnl_f = 'INV_B_OTHNL_VAL_F'\n            ival_tot = 'INV_B_IVAL_TOT_DVAL'\n            nl_tot = 'INV_B_NL_TOT_DVAL'\n        }\n        if (parseFloat(record?.[fifo]) > 0) {\n            if (0 == (parseFloat(record?.[avg]) + parseFloat(record?.[std]) + parseFloat(record?.[othnl]))) {\n                if (parseFloat(record?.[fifo]) != parseFloat(record?.[ival_tot])) {\n                    record[fifo] = record?.[ival_tot]\n                    record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'L')\n                }\n            } else {\n                console.log(record[nl_tot], record[ival_tot])\n                record[fifo] = Math.round((parseFloat(record?.[fifo]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'K')\n                record[avg] = Math.round((parseFloat(record?.[avg]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[avg_f] = setCharAt(record?.[avg_f], 2, 'K')\n                record[std] = Math.round((parseFloat(record?.[std]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[std_f] = setCharAt(record?.[std_f], 2, 'K')\n                record[othnl] = Math.round(parseFloat(record?.[ival_tot]) - (parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std])))\n                record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'K')\n            }\n        } else if (parseFloat(record?.[avg]) > 0) {\n            if ((parseFloat(record?.[std]) + parseFloat(record?.[othnl])) == 0) {\n                if (parseFloat(record?.[avg]) != parseFloat(record?.[ival_tot])) {\n                    record[avg] = record?.[ival_tot]\n                    record[avg_f] = setCharAt(record?.[avg_f], 2, 'L')\n                }\n            } else {\n                record[avg] = Math.round((parseFloat(record?.[avg]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[avg_f] = setCharAt(record?.[avg_f], 2, 'K')\n                record[std] = Math.round((parseFloat(record?.[std]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[std_f] = setCharAt(record?.[std_f], 2, 'K')\n                record[othnl] = Math.round(parseFloat(record?.[ival_tot]) - (parseFloat(record?.[avg]) + parseFloat(record?.[std])))\n                record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'K')\n            }\n\n        } else if (parseFloat(record?.[std]) > 0) {\n            if (parseFloat(record?.[othnl]) == 0) {\n                if (parseFloat(record?.[std]) != parseFloat(record?.[ival_tot])) {\n                    record[std] = record?.[ival_tot]\n                    record[std_f] = setCharAt(record?.[std_f], 2, 'L')\n                }\n            } else {\n                record[std] = Math.round((parseFloat(record?.[std]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[std_f] = setCharAt(record?.[std_f], 2, 'K')\n                record[othnl] = Math.round(parseFloat(record?.[ival_tot]) - parseFloat(record?.[std]))\n                record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'K')\n            }\n        } else if (parseFloat(record?.[othnl]) == parseFloat(record?.[ival_tot])) {\n        } else {\n            record[othnl] = parseFloat(record?.[ival_tot])\n            record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'L')\n        }\n    }\n\n    function EvaluateNoNLIFOValuationMethodModule() {\n        EvaluateNoNLIFOValuationMethod('B')\n        EvaluateNoNLIFOValuationMethod('E')\n    }\n\n    EvaluateNoNLIFOValuationMethodModule()\n    return msg\n}catch(e){\n    return msg\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "7c98b0321d9624dd",
        "type": "function",
        "z": "3e0275f580e2d77c",
        "name": "MIV: EvaluateDetailValuationMethods",
        "func": "try{\n    let record_idx = global.get(\"ptrModuleFacts\");\n    let record = msg.payload.csv[record_idx];\n\n    function setCharAt(str, index, chr) {\n        if ([null, undefined].includes(str)) {\n            let newstr = ''\n            for (let i = 0; i < index; i++) {\n                newstr = newstr + ' ';\n            }\n            newstr = newstr + chr\n            return newstr;\n        } else {\n            if (index > str.length - 1) {\n                let addstr = index - str.length\n                let newstr = str\n                for (let i = 0; i < addstr; i++) {\n                    newstr = newstr + ' ';\n                }\n                newstr = newstr + chr\n                return newstr;\n            } else {\n                return str.substring(0, index) + chr + str.substring(index + 1);\n            }\n        }\n    }\n\n    function NonLIFORANDOMModulePath(variable) {\n        let avg = ''\n        let avg_f = ''\n        let fifo = ''\n        let fifo_f = ''\n        let std = ''\n        let std_f = ''\n        let othnl = ''\n        let othnl_f = ''\n        let ival_tot = ''\n        let nl_tot = ''\n        let nl_tot_f = ''\n        let lifo = ''\n        if (variable == 'E') {\n            avg = 'INV_E_AVG_VAL'\n            avg_f = 'INV_E_AVG_VAL_F'\n            fifo = 'INV_E_FIFO_VAL'\n            fifo_f = 'INV_E_FIFO_VAL_F'\n            std = 'INV_E_STD_VAL'\n            std_f = 'INV_E_STD_VAL_F'\n            othnl = 'INV_E_OTHNL_VAL'\n            othnl_f = 'INV_E_OTHNL_VAL_F'\n            ival_tot = 'INV_E_IVAL_TOT_DVAL'\n            nl_tot = 'INV_E_NL_TOT_DVAL'\n            nl_tot_f = 'INV_E_NL_TOT_DVAL_F'\n            lifo = 'INV_E_LIFO_VAL'\n        } else if (variable == 'B') {\n            avg = 'INV_B_AVG_VAL'\n            avg_f = 'INV_B_AVG_VAL_F'\n            fifo = 'INV_B_FIFO_VAL'\n            fifo_f = 'INV_B_FIFO_VAL_F'\n            std = 'INV_B_STD_VAL'\n            std_f = 'INV_B_STD_VAL_F'\n            othnl = 'INV_B_OTHNL_VAL'\n            othnl_f = 'INV_B_OTHNL_VAL_F'\n            ival_tot = 'INV_B_IVAL_TOT_DVAL'\n            nl_tot = 'INV_B_NL_TOT_DVAL'\n            nl_tot_f = 'INV_B_NL_TOT_DVAL_F'\n            lifo = 'INV_B_LIFO_VAL'\n        }\n        if ((0 <= parseInt(record?.NLFLO)) && (30 >= parseInt(record?.NLFLO))) {\n            record[std] = parseFloat(record?.[ival_tot]) - parseFloat(record?.[lifo])\n            record[std_f] = setCharAt(record?.[std_f], 2, 'J')\n            record[fifo] = 0\n            record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'J')\n            record[avg] = 0\n            record[avg_f] = setCharAt(record?.[avg_f], 2, 'J')\n            record[othnl] = 0\n            record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'J')\n\n        } else if ((31 <= parseInt(record?.NLFLO)) && (40 >= parseInt(record?.NLFLO))) {\n            record[avg] = parseFloat(record?.[ival_tot]) - parseFloat(record?.[lifo])\n            record[avg_f] = setCharAt(record?.[avg_f], 2, 'J')\n            record[fifo] = 0\n            record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'J')\n            record[std] = 0\n            record[std_f] = setCharAt(record?.[std_f], 2, 'J')\n            record[othnl] = 0\n            record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'J')\n\n        } else if ((41 <= parseInt(record?.NLFLO)) && (50 >= parseInt(record?.NLFLO))) {\n            record[othnl] = parseFloat(record?.[ival_tot]) - parseFloat(record?.[lifo])\n            record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'J')\n            record[fifo] = 0\n            record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'J')\n            record[std] = 0\n            record[std_f] = setCharAt(record?.[std_f], 2, 'J')\n            record[avg] = 0\n            record[avg_f] = setCharAt(record?.[avg_f], 2, 'J')\n\n        } else {\n            record[fifo] = parseFloat(record?.[ival_tot]) - parseFloat(record?.[lifo])\n            record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'J')\n            record[avg] = 0\n            record[avg_f] = setCharAt(record?.[avg_f], 2, 'J')\n            record[std] = 0\n            record[std_f] = setCharAt(record?.[std_f], 2, 'J')\n            record[othnl] = 0\n            record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'J')\n        }\n        record[nl_tot] = parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std]) + parseFloat(record?.[othnl])\n        record[nl_tot_f] = setCharAt(record?.[nl_tot_f], 2, 'J')\n    }\n    function NonLIFORANDOMModule(variable, NLFLO) {\n        record.NLFLO = NLFLO\n        NonLIFORANDOMModulePath(variable)\n    }\n\n    function EvaluateNoNLIFOValuationMethod(variable) {\n        let avg = ''\n        let avg_f = ''\n        let fifo = ''\n        let fifo_f = ''\n        let std = ''\n        let std_f = ''\n        let othnl = ''\n        let othnl_f = ''\n        let ival_tot = ''\n        let nl_tot = ''\n        if (variable == 'E') {\n            avg = 'INV_E_AVG_VAL'\n            avg_f = 'INV_E_AVG_VAL_F'\n            fifo = 'INV_E_FIFO_VAL'\n            fifo_f = 'INV_E_FIFO_VAL_F'\n            std = 'INV_E_STD_VAL'\n            std_f = 'INV_E_STD_VAL_F'\n            othnl = 'INV_E_OTHNL_VAL'\n            othnl_f = 'INV_E_OTHNL_VAL_F'\n            ival_tot = 'INV_E_IVAL_TOT_DVAL'\n            nl_tot = 'INV_E_NL_TOT_DVAL'\n        } else if (variable == 'B') {\n            avg = 'INV_B_AVG_VAL'\n            avg_f = 'INV_B_AVG_VAL_F'\n            fifo = 'INV_B_FIFO_VAL'\n            fifo_f = 'INV_B_FIFO_VAL_F'\n            std = 'INV_B_STD_VAL'\n            std_f = 'INV_B_STD_VAL_F'\n            othnl = 'INV_B_OTHNL_VAL'\n            othnl_f = 'INV_B_OTHNL_VAL_F'\n            ival_tot = 'INV_B_IVAL_TOT_DVAL'\n            nl_tot = 'INV_B_NL_TOT_DVAL'\n        }\n        if (parseFloat(record?.[fifo]) > 0) {\n            if (0 == (parseFloat(record?.[avg]) + parseFloat(record?.[std]) + parseFloat(record?.[othnl]))) {\n                if (parseFloat(record?.[fifo]) != parseFloat(record?.[ival_tot])) {\n                    record[fifo] = record?.[ival_tot]\n                    record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'L')\n                }\n            } else {\n                console.log(record[nl_tot], record[ival_tot])\n                record[fifo] = Math.round((parseFloat(record?.[fifo]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'K')\n                record[avg] = Math.round((parseFloat(record?.[avg]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[avg_f] = setCharAt(record?.[avg_f], 2, 'K')\n                record[std] = Math.round((parseFloat(record?.[std]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[std_f] = setCharAt(record?.[std_f], 2, 'K')\n                record[othnl] = Math.round(parseFloat(record?.[ival_tot]) - (parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std])))\n                record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'K')\n            }\n        } else if (parseFloat(record?.[avg]) > 0) {\n            if ((parseFloat(record?.[std]) + parseFloat(record?.[othnl])) == 0) {\n                if (parseFloat(record?.[avg]) != parseFloat(record?.[ival_tot])) {\n                    record[avg] = record?.[ival_tot]\n                    record[avg_f] = setCharAt(record?.[avg_f], 2, 'L')\n                }\n            } else {\n                record[avg] = Math.round((parseFloat(record?.[avg]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[avg_f] = setCharAt(record?.[avg_f], 2, 'K')\n                record[std] = Math.round((parseFloat(record?.[std]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[std_f] = setCharAt(record?.[std_f], 2, 'K')\n                record[othnl] = Math.round(parseFloat(record?.[ival_tot]) - (parseFloat(record?.[avg]) + parseFloat(record?.[std])))\n                record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'K')\n            }\n\n        } else if (parseFloat(record?.[std]) > 0) {\n            if (parseFloat(record?.[othnl]) == 0) {\n                if (parseFloat(record?.[std]) != parseFloat(record?.[ival_tot])) {\n                    record[std] = record?.[ival_tot]\n                    record[std_f] = setCharAt(record?.[std_f], 2, 'L')\n                }\n            } else {\n                record[std] = Math.round((parseFloat(record?.[std]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[std_f] = setCharAt(record?.[std_f], 2, 'K')\n                record[othnl] = Math.round(parseFloat(record?.[ival_tot]) - parseFloat(record?.[std]))\n                record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'K')\n            }\n        } else if (parseFloat(record?.[othnl]) == parseFloat(record?.[ival_tot])) {\n        } else {\n            record[othnl] = parseFloat(record?.[ival_tot])\n            record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'L')\n        }\n    }\n\n    function EvaluateDetailValuationMethodsPathA(variable) {\n        let othnl = ''\n        let avg = ''\n        let fifo = ''\n        let std = ''\n        let nl_tot = ''\n        let nl_tot_f = ''\n        if (variable == 'E') {\n            avg = 'INV_E_AVG_VAL'\n            fifo = 'INV_E_FIFO_VAL'\n            std = 'INV_E_STD_VAL'\n            othnl = 'INV_E_OTHNL_VAL'\n            nl_tot = 'INV_E_NL_TOT_DVAL'\n            nl_tot_f = 'INV_E_NL_TOT_DVAL_F'\n        } else if (variable == 'B') {\n            avg = 'INV_B_AVG_VAL'\n            fifo = 'INV_B_FIFO_VAL'\n            std = 'INV_B_STD_VAL'\n            othnl = 'INV_B_OTHNL_VAL'\n            nl_tot = 'INV_B_NL_TOT_DVAL'\n            nl_tot_f = 'INV_B_NL_TOT_DVAL_F'\n        }\n        if (parseFloat(record?.[nl_tot]) != (parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std]) + parseFloat(record?.[othnl]))) {\n            record[nl_tot] = parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std]) + parseFloat(record?.[othnl])\n            record[nl_tot_f] = setCharAt(record?.[nl_tot_f], 2, 'L')\n        }\n    }\n    function EvaluateDetailValuationMethodsPathC(variable) {\n        let othnl = ''\n        let avg = ''\n        let fifo = ''\n        let std = ''\n        let othnl_f = ''\n        if (variable == 'E') {\n            avg = 'INV_E_AVG_VAL'\n            fifo = 'INV_E_FIFO_VAL'\n            std = 'INV_E_STD_VAL'\n            othnl = 'INV_E_OTHNL_VAL'\n            othnl_f = 'INV_E_OTHNL_VAL_F'\n        } else if (variable == 'B') {\n            avg = 'INV_B_AVG_VAL'\n            fifo = 'INV_B_FIFO_VAL'\n            std = 'INV_B_STD_VAL'\n            othnl = 'INV_B_OTHNL_VAL'\n            othnl_f = 'INV_B_OTHNL_VAL_F'\n        }\n        if (parseFloat(record?.[othnl]) < 0) {\n            record[othnl] = Math.abs(record?.[othnl])\n\n            var max = Math.max(...[parseFloat(record?.[fifo]), parseFloat(record?.[avg]), parseFloat(record?.[std])])\n            if (parseFloat(record?.[fifo]) == max) {\n                record[fifo] = record?.[fifo] - record?.[othnl]\n            } else if (parseFloat(record?.[avg]) == max) {\n                record[avg] = record?.[avg] - record?.[othnl]\n            } else {\n                record[std] = record?.[std] - record?.[othnl]\n            }\n            record[othnl] = 0\n            record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'Z');\n        }\n        EvaluateDetailValuationMethodsPathA(variable)\n    }\n    function EvaluateDetailValuationMethods(variable, NLFLO) {\n        let avg = ''\n        let avg_f = ''\n        let fifo = ''\n        let fifo_f = ''\n        let std = ''\n        let std_f = ''\n        let othnl = ''\n        let othnl_f = ''\n        let ival_tot = ''\n        let nl_tot = ''\n        let nl_tot_f = ''\n        let lifo = ''\n        let lifo_f = ''\n        let invvsum = ''\n        let invdiff = ''\n        let ec_std = ''\n        let ec_avg = ''\n        let ec_fifo = ''\n        let ec_ival_tot = ''\n\n        if (variable == 'E') {\n            avg = 'INV_E_AVG_VAL'\n            avg_f = 'INV_E_AVG_VAL_F'\n            fifo = 'INV_E_FIFO_VAL'\n            fifo_f = 'INV_E_FIFO_VAL_F'\n            std = 'INV_E_STD_VAL'\n            std_f = 'INV_E_STD_VAL_F'\n            othnl = 'INV_E_OTHNL_VAL'\n            othnl_f = 'INV_E_OTHNL_VAL_F'\n            ival_tot = 'INV_E_IVAL_TOT_DVAL'\n            nl_tot = 'INV_E_NL_TOT_DVAL'\n            nl_tot_f = 'INV_E_NL_TOT_DVAL_F'\n            lifo = 'INV_E_LIFO_VAL'\n            lifo_f = 'INV_E_LIFO_VAL_F'\n            invvsum = 'INVVSUME'\n            invdiff = 'INVDIFFE'\n            ec_std = 'EC_INV_E_STD_VAL'\n            ec_avg = 'EC_INV_E_AVG_VAL'\n            ec_fifo = 'EC_INV_E_FIFO_VAL'\n            ec_ival_tot = 'EC_INV_E_IVAL_TOT_DVAL'\n        } else if (variable == 'B') {\n            avg = 'INV_B_AVG_VAL'\n            avg_f = 'INV_B_AVG_VAL_F'\n            fifo = 'INV_B_FIFO_VAL'\n            fifo_f = 'INV_B_FIFO_VAL_F'\n            std = 'INV_B_STD_VAL'\n            std_f = 'INV_B_STD_VAL_F'\n            othnl = 'INV_B_OTHNL_VAL'\n            othnl_f = 'INV_B_OTHNL_VAL_F'\n            ival_tot = 'INV_B_IVAL_TOT_DVAL'\n            nl_tot = 'INV_B_NL_TOT_DVAL'\n            nl_tot_f = 'INV_B_NL_TOT_DVAL_F'\n            lifo = 'INV_B_LIFO_VAL'\n            lifo_f = 'INV_B_LIFO_VAL_F'\n            invvsum = 'INVVSUMB'\n            invdiff = 'INVDIFFB'\n            ec_std = 'EC_INV_B_STD_VAL'\n            ec_avg = 'EC_INV_B_AVG_VAL'\n            ec_fifo = 'EC_INV_B_FIFO_VAL'\n            ec_ival_tot = 'EC_INV_B_IVAL_TOT_DVAL'\n        }\n\n        if (parseFloat(record?.[lifo]) == 0) {\n            if (parseFloat(record?.[invvsum]) == 0) {\n                if (parseFloat(record?.[ec_ival_tot]) == 0) {\n                    NonLIFORANDOMModule(variable, NLFLO)\n                } else {\n                    record[fifo] = Math.round((parseFloat(record?.[ec_fifo]) / parseFloat(record?.[ec_ival_tot])) * parseFloat(record?.[ival_tot]))\n                    record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'H')\n                    record[avg] = Math.round((parseFloat(record?.[ec_avg]) / parseFloat(record?.[ec_ival_tot])) * parseFloat(record?.[ival_tot]))\n                    record[avg_f] = setCharAt(record?.[avg_f], 2, 'H')\n                    record[std] = Math.round((parseFloat(record?.[ec_std]) / parseFloat(record?.[ec_ival_tot])) * parseFloat(record?.[ival_tot]))\n                    record[std_f] = setCharAt(record?.[std_f], 2, 'H')\n                    record[othnl] = Math.round(parseFloat(record?.[ival_tot]) -\n                        (\n                            parseFloat(record?.[lifo]) + parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std])\n                        ))\n                    record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'H')\n                    EvaluateDetailValuationMethodsPathC(variable)\n                }\n            } else {\n                EvaluateNoNLIFOValuationMethod(variable)\n                EvaluateDetailValuationMethodsPathC(variable)\n            }\n        } else if (parseFloat(record?.[invvsum]) == 0) {\n            if (parseFloat(record?.[lifo]) == parseFloat(record?.[ival_tot])) {\n                EvaluateDetailValuationMethodsPathA(variable)\n            } else {\n                record[lifo] = record?.[ival_tot]\n                record[lifo_f] = setCharAt(record?.[lifo_f], 2, 'L')\n                EvaluateDetailValuationMethodsPathA(variable)\n            }\n        } else {\n            record[fifo] = Math.round((parseFloat(record?.[fifo]) / parseFloat(record?.[invvsum])) * parseFloat(record?.[invdiff]))\n            record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'K')\n\n            record[avg] = Math.round((parseFloat(record?.[ec_avg]) / parseFloat(record?.[invvsum])) * parseFloat(record?.[invdiff]));\n            record[avg_f] = setCharAt(record?.[avg_f], 2, 'K');\n\n            record[std] = Math.round((parseFloat(record?.[ec_std]) / parseFloat(record?.[invvsum])) * parseFloat(record?.[invdiff]));\n            record[std_f] = setCharAt(record?.[std_f], 2, 'K');\n\n            record[othnl] = Math.round(parseFloat(record?.[ival_tot]) - (parseFloat(record?.[lifo]) + parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std])));\n            record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'K');\n\n            EvaluateDetailValuationMethodsPathC(variable)\n        }\n    }\n    function EvaluateDetailValuationMethodsModule() {\n        let NLFLO = 0\n        NLFLO = parseInt(Math.floor(Math.random() * 100))\n        if (NLFLO < 10) {\n            NLFLO = '0' + NLFLO\n        } else {\n            NLFLO = '' + NLFLO\n        }\n\n        EvaluateDetailValuationMethods('B', NLFLO)\n        EvaluateDetailValuationMethods('E', NLFLO)\n    }\n    EvaluateDetailValuationMethodsModule()\n    return msg\n}catch(e){\n    return msg\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "9f9833d11c2323e2",
        "type": "function",
        "z": "0ab9d9d713d5103c",
        "name": "MIV: EvaluateNoNLIFOValuationMethodsModule",
        "func": "try{\n    let record_idx = global.get(\"ptrModuleFacts\");\n    let record = msg.payload.csv[record_idx];\n\n    function setCharAt(str, index, chr) {\n        if ([null, undefined].includes(str)) {\n            let newstr = ''\n            for (let i = 0; i < index; i++) {\n                newstr = newstr + ' ';\n            }\n            newstr = newstr + chr\n            return newstr;\n        } else {\n            if (index > str.length - 1) {\n                let addstr = index - str.length\n                let newstr = str\n                for (let i = 0; i < addstr; i++) {\n                    newstr = newstr + ' ';\n                }\n                newstr = newstr + chr\n                return newstr;\n            } else {\n                return str.substring(0, index) + chr + str.substring(index + 1);\n            }\n        }\n    }\n\n    function NonLIFORANDOMModulePath(variable) {\n        let avg = ''\n        let avg_f = ''\n        let fifo = ''\n        let fifo_f = ''\n        let std = ''\n        let std_f = ''\n        let othnl = ''\n        let othnl_f = ''\n        let ival_tot = ''\n        let nl_tot = ''\n        let nl_tot_f = ''\n        let lifo = ''\n        if (variable == 'E') {\n            avg = 'INV_E_AVG_VAL'\n            avg_f = 'INV_E_AVG_VAL_F'\n            fifo = 'INV_E_FIFO_VAL'\n            fifo_f = 'INV_E_FIFO_VAL_F'\n            std = 'INV_E_STD_VAL'\n            std_f = 'INV_E_STD_VAL_F'\n            othnl = 'INV_E_OTHNL_VAL'\n            othnl_f = 'INV_E_OTHNL_VAL_F'\n            ival_tot = 'INV_E_IVAL_TOT_DVAL'\n            nl_tot = 'INV_E_NL_TOT_DVAL'\n            nl_tot_f = 'INV_E_NL_TOT_DVAL_F'\n            lifo = 'INV_E_LIFO_VAL'\n        } else if (variable == 'B') {\n            avg = 'INV_B_AVG_VAL'\n            avg_f = 'INV_B_AVG_VAL_F'\n            fifo = 'INV_B_FIFO_VAL'\n            fifo_f = 'INV_B_FIFO_VAL_F'\n            std = 'INV_B_STD_VAL'\n            std_f = 'INV_B_STD_VAL_F'\n            othnl = 'INV_B_OTHNL_VAL'\n            othnl_f = 'INV_B_OTHNL_VAL_F'\n            ival_tot = 'INV_B_IVAL_TOT_DVAL'\n            nl_tot = 'INV_B_NL_TOT_DVAL'\n            nl_tot_f = 'INV_B_NL_TOT_DVAL_F'\n            lifo = 'INV_B_LIFO_VAL'\n        }\n        if ((0 <= parseInt(record?.NLFLO)) && (30 >= parseInt(record?.NLFLO))) {\n            record[std] = parseFloat(record?.[ival_tot]) - parseFloat(record?.[lifo])\n            record[std_f] = setCharAt(record?.[std_f], 2, 'J')\n            record[fifo] = 0\n            record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'J')\n            record[avg] = 0\n            record[avg_f] = setCharAt(record?.[avg_f], 2, 'J')\n            record[othnl] = 0\n            record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'J')\n\n        } else if ((31 <= parseInt(record?.NLFLO)) && (40 >= parseInt(record?.NLFLO))) {\n            record[avg] = parseFloat(record?.[ival_tot]) - parseFloat(record?.[lifo])\n            record[avg_f] = setCharAt(record?.[avg_f], 2, 'J')\n            record[fifo] = 0\n            record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'J')\n            record[std] = 0\n            record[std_f] = setCharAt(record?.[std_f], 2, 'J')\n            record[othnl] = 0\n            record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'J')\n\n        } else if ((41 <= parseInt(record?.NLFLO)) && (50 >= parseInt(record?.NLFLO))) {\n            record[othnl] = parseFloat(record?.[ival_tot]) - parseFloat(record?.[lifo])\n            record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'J')\n            record[fifo] = 0\n            record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'J')\n            record[std] = 0\n            record[std_f] = setCharAt(record?.[std_f], 2, 'J')\n            record[avg] = 0\n            record[avg_f] = setCharAt(record?.[avg_f], 2, 'J')\n\n        } else {\n            record[fifo] = parseFloat(record?.[ival_tot]) - parseFloat(record?.[lifo])\n            record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'J')\n            record[avg] = 0\n            record[avg_f] = setCharAt(record?.[avg_f], 2, 'J')\n            record[std] = 0\n            record[std_f] = setCharAt(record?.[std_f], 2, 'J')\n            record[othnl] = 0\n            record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'J')\n        }\n        record[nl_tot] = parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std]) + parseFloat(record?.[othnl])\n        record[nl_tot_f] = setCharAt(record?.[nl_tot_f], 2, 'J')\n    }\n    function NonLIFORANDOMModule(variable, NLFLO) {\n        record.NLFLO = NLFLO\n        NonLIFORANDOMModulePath(variable)\n    }\n\n    function EvaluateNoNLIFOValuationMethod(variable) {\n        let avg = ''\n        let avg_f = ''\n        let fifo = ''\n        let fifo_f = ''\n        let std = ''\n        let std_f = ''\n        let othnl = ''\n        let othnl_f = ''\n        let ival_tot = ''\n        let nl_tot = ''\n        if (variable == 'E') {\n            avg = 'INV_E_AVG_VAL'\n            avg_f = 'INV_E_AVG_VAL_F'\n            fifo = 'INV_E_FIFO_VAL'\n            fifo_f = 'INV_E_FIFO_VAL_F'\n            std = 'INV_E_STD_VAL'\n            std_f = 'INV_E_STD_VAL_F'\n            othnl = 'INV_E_OTHNL_VAL'\n            othnl_f = 'INV_E_OTHNL_VAL_F'\n            ival_tot = 'INV_E_IVAL_TOT_DVAL'\n            nl_tot = 'INV_E_NL_TOT_DVAL'\n        } else if (variable == 'B') {\n            avg = 'INV_B_AVG_VAL'\n            avg_f = 'INV_B_AVG_VAL_F'\n            fifo = 'INV_B_FIFO_VAL'\n            fifo_f = 'INV_B_FIFO_VAL_F'\n            std = 'INV_B_STD_VAL'\n            std_f = 'INV_B_STD_VAL_F'\n            othnl = 'INV_B_OTHNL_VAL'\n            othnl_f = 'INV_B_OTHNL_VAL_F'\n            ival_tot = 'INV_B_IVAL_TOT_DVAL'\n            nl_tot = 'INV_B_NL_TOT_DVAL'\n        }\n        if (parseFloat(record?.[fifo]) > 0) {\n            if (0 == (parseFloat(record?.[avg]) + parseFloat(record?.[std]) + parseFloat(record?.[othnl]))) {\n                if (parseFloat(record?.[fifo]) != parseFloat(record?.[ival_tot])) {\n                    record[fifo] = record?.[ival_tot]\n                    record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'L')\n                }\n            } else {\n                console.log(record[nl_tot], record[ival_tot])\n                record[fifo] = Math.round((parseFloat(record?.[fifo]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'K')\n                record[avg] = Math.round((parseFloat(record?.[avg]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[avg_f] = setCharAt(record?.[avg_f], 2, 'K')\n                record[std] = Math.round((parseFloat(record?.[std]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[std_f] = setCharAt(record?.[std_f], 2, 'K')\n                record[othnl] = Math.round(parseFloat(record?.[ival_tot]) - (parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std])))\n                record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'K')\n            }\n        } else if (parseFloat(record?.[avg]) > 0) {\n            if ((parseFloat(record?.[std]) + parseFloat(record?.[othnl])) == 0) {\n                if (parseFloat(record?.[avg]) != parseFloat(record?.[ival_tot])) {\n                    record[avg] = record?.[ival_tot]\n                    record[avg_f] = setCharAt(record?.[avg_f], 2, 'L')\n                }\n            } else {\n                record[avg] = Math.round((parseFloat(record?.[avg]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[avg_f] = setCharAt(record?.[avg_f], 2, 'K')\n                record[std] = Math.round((parseFloat(record?.[std]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[std_f] = setCharAt(record?.[std_f], 2, 'K')\n                record[othnl] = Math.round(parseFloat(record?.[ival_tot]) - (parseFloat(record?.[avg]) + parseFloat(record?.[std])))\n                record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'K')\n            }\n\n        } else if (parseFloat(record?.[std]) > 0) {\n            if (parseFloat(record?.[othnl]) == 0) {\n                if (parseFloat(record?.[std]) != parseFloat(record?.[ival_tot])) {\n                    record[std] = record?.[ival_tot]\n                    record[std_f] = setCharAt(record?.[std_f], 2, 'L')\n                }\n            } else {\n                record[std] = Math.round((parseFloat(record?.[std]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[std_f] = setCharAt(record?.[std_f], 2, 'K')\n                record[othnl] = Math.round(parseFloat(record?.[ival_tot]) - parseFloat(record?.[std]))\n                record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'K')\n            }\n        } else if (parseFloat(record?.[othnl]) == parseFloat(record?.[ival_tot])) {\n        } else {\n            record[othnl] = parseFloat(record?.[ival_tot])\n            record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'L')\n        }\n    }\n\n    function EvaluateDetailValuationMethodsPathA(variable) {\n        let othnl = ''\n        let avg = ''\n        let fifo = ''\n        let std = ''\n        let nl_tot = ''\n        let nl_tot_f = ''\n        if (variable == 'E') {\n            avg = 'INV_E_AVG_VAL'\n            fifo = 'INV_E_FIFO_VAL'\n            std = 'INV_E_STD_VAL'\n            othnl = 'INV_E_OTHNL_VAL'\n            nl_tot = 'INV_E_NL_TOT_DVAL'\n            nl_tot_f = 'INV_E_NL_TOT_DVAL_F'\n        } else if (variable == 'B') {\n            avg = 'INV_B_AVG_VAL'\n            fifo = 'INV_B_FIFO_VAL'\n            std = 'INV_B_STD_VAL'\n            othnl = 'INV_B_OTHNL_VAL'\n            nl_tot = 'INV_B_NL_TOT_DVAL'\n            nl_tot_f = 'INV_B_NL_TOT_DVAL_F'\n        }\n        if (parseFloat(record?.[nl_tot]) != (parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std]) + parseFloat(record?.[othnl]))) {\n            record[nl_tot] = parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std]) + parseFloat(record?.[othnl])\n            record[nl_tot_f] = setCharAt(record?.[nl_tot_f], 2, 'L')\n        }\n    }\n    function EvaluateDetailValuationMethodsPathC(variable) {\n        let othnl = ''\n        let avg = ''\n        let fifo = ''\n        let std = ''\n        let othnl_f = ''\n        if (variable == 'E') {\n            avg = 'INV_E_AVG_VAL'\n            fifo = 'INV_E_FIFO_VAL'\n            std = 'INV_E_STD_VAL'\n            othnl = 'INV_E_OTHNL_VAL'\n            othnl_f = 'INV_E_OTHNL_VAL_F'\n        } else if (variable == 'B') {\n            avg = 'INV_B_AVG_VAL'\n            fifo = 'INV_B_FIFO_VAL'\n            std = 'INV_B_STD_VAL'\n            othnl = 'INV_B_OTHNL_VAL'\n            othnl_f = 'INV_B_OTHNL_VAL_F'\n        }\n        if (parseFloat(record?.[othnl]) < 0) {\n            record[othnl] = Math.abs(record?.[othnl])\n\n            var max = Math.max(...[parseFloat(record?.[fifo]), parseFloat(record?.[avg]), parseFloat(record?.[std])])\n            if (parseFloat(record?.[fifo]) == max) {\n                record[fifo] = record?.[fifo] - record?.[othnl]\n            } else if (parseFloat(record?.[avg]) == max) {\n                record[avg] = record?.[avg] - record?.[othnl]\n            } else {\n                record[std] = record?.[std] - record?.[othnl]\n            }\n            record[othnl] = 0\n            record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'Z');\n        }\n        EvaluateDetailValuationMethodsPathA(variable)\n    }\n    function EvaluateDetailValuationMethods(variable, NLFLO, INVVSUMx, INVDIFFx) {\n        let avg = ''\n        let avg_f = ''\n        let fifo = ''\n        let fifo_f = ''\n        let std = ''\n        let std_f = ''\n        let othnl = ''\n        let othnl_f = ''\n        let ival_tot = ''\n        let nl_tot = ''\n        let nl_tot_f = ''\n        let lifo = ''\n        let lifo_f = ''\n        var invvsum = INVVSUMx\n        var invdiff = INVDIFFx\n        let ec_std = ''\n        let ec_avg = ''\n        let ec_fifo = ''\n        let ec_ival_tot = ''\n\n        if (variable == 'E') {\n            avg = 'INV_E_AVG_VAL'\n            avg_f = 'INV_E_AVG_VAL_F'\n            fifo = 'INV_E_FIFO_VAL'\n            fifo_f = 'INV_E_FIFO_VAL_F'\n            std = 'INV_E_STD_VAL'\n            std_f = 'INV_E_STD_VAL_F'\n            othnl = 'INV_E_OTHNL_VAL'\n            othnl_f = 'INV_E_OTHNL_VAL_F'\n            ival_tot = 'INV_E_IVAL_TOT_DVAL'\n            nl_tot = 'INV_E_NL_TOT_DVAL'\n            nl_tot_f = 'INV_E_NL_TOT_DVAL_F'\n            lifo = 'INV_E_LIFO_VAL'\n            lifo_f = 'INV_E_LIFO_VAL_F'\n            ec_std = 'EC_INV_E_STD_VAL'\n            ec_avg = 'EC_INV_E_AVG_VAL'\n            ec_fifo = 'EC_INV_E_FIFO_VAL'\n            ec_ival_tot = 'EC_INV_E_IVAL_TOT_DVAL'\n        } else if (variable == 'B') {\n            avg = 'INV_B_AVG_VAL'\n            avg_f = 'INV_B_AVG_VAL_F'\n            fifo = 'INV_B_FIFO_VAL'\n            fifo_f = 'INV_B_FIFO_VAL_F'\n            std = 'INV_B_STD_VAL'\n            std_f = 'INV_B_STD_VAL_F'\n            othnl = 'INV_B_OTHNL_VAL'\n            othnl_f = 'INV_B_OTHNL_VAL_F'\n            ival_tot = 'INV_B_IVAL_TOT_DVAL'\n            nl_tot = 'INV_B_NL_TOT_DVAL'\n            nl_tot_f = 'INV_B_NL_TOT_DVAL_F'\n            lifo = 'INV_B_LIFO_VAL'\n            lifo_f = 'INV_B_LIFO_VAL_F'\n            ec_std = 'EC_INV_B_STD_VAL'\n            ec_avg = 'EC_INV_B_AVG_VAL'\n            ec_fifo = 'EC_INV_B_FIFO_VAL'\n            ec_ival_tot = 'EC_INV_B_IVAL_TOT_DVAL'\n        }\n\n        if (parseFloat(record?.[lifo]) == 0) {\n            if (parseFloat(invvsum) == 0) {\n                if (parseFloat(record?.[ec_ival_tot]) == 0) {\n                    NonLIFORANDOMModule(variable, NLFLO)\n                } else {\n                    record[fifo] = Math.round((parseFloat(record?.[ec_fifo]) / parseFloat(record?.[ec_ival_tot])) * parseFloat(record?.[ival_tot]))\n                    record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'H')\n                    record[avg] = Math.round((parseFloat(record?.[ec_avg]) / parseFloat(record?.[ec_ival_tot])) * parseFloat(record?.[ival_tot]))\n                    record[avg_f] = setCharAt(record?.[avg_f], 2, 'H')\n                    record[std] = Math.round((parseFloat(record?.[ec_std]) / parseFloat(record?.[ec_ival_tot])) * parseFloat(record?.[ival_tot]))\n                    record[std_f] = setCharAt(record?.[std_f], 2, 'H')\n                    record[othnl] = Math.round(parseFloat(record?.[ival_tot]) -\n                        (\n                            parseFloat(record?.[lifo]) + parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std])\n                        ))\n                    record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'H')\n                    EvaluateDetailValuationMethodsPathC(variable)\n                }\n            } else {\n                EvaluateNoNLIFOValuationMethod(variable)\n                EvaluateDetailValuationMethodsPathC(variable)\n            }\n        } else if (parseFloat(invvsum) == 0) {\n            if (parseFloat(record?.[lifo]) == parseFloat(record?.[ival_tot])) {\n                EvaluateDetailValuationMethodsPathA(variable)\n            } else {\n                record[lifo] = record?.[ival_tot]\n                record[lifo_f] = setCharAt(record?.[lifo_f], 2, 'L')\n                EvaluateDetailValuationMethodsPathA(variable)\n            }\n        } else {\n            record[fifo] = Math.round((parseFloat(record?.[fifo]) / parseFloat(invvsum)) * parseFloat(invdiff))\n            record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'K')\n\n            record[avg] = Math.round((parseFloat(record?.[ec_avg]) / parseFloat(invvsum)) * parseFloat(invdiff));\n            record[avg_f] = setCharAt(record?.[avg_f], 2, 'K');\n\n            record[std] = Math.round((parseFloat(record?.[ec_std]) / parseFloat(invvsum)) * parseFloat(invdiff));\n            record[std_f] = setCharAt(record?.[std_f], 2, 'K');\n\n            record[othnl] = Math.round(parseFloat(record?.[ival_tot]) - (parseFloat(record?.[lifo]) + parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std])));\n            record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'K');\n\n            EvaluateDetailValuationMethodsPathC(variable)\n        }\n    }\n\n\n    function EvaluateNoNLIFOValuationMethodsModulePathA(variable, INVVSUMx, NLFLO) {\n        let ival_tot = ''\n        let lifo = ''\n        if (variable == 'E') {\n            ival_tot = 'INV_E_IVAL_TOT_DVAL'\n            lifo = 'INV_E_LIFO_VAL'\n        } else if (variable == 'B') {\n            ival_tot = 'INV_B_IVAL_TOT_DVAL'\n            lifo = 'INV_B_LIFO_VAL'\n        }\n        var INVDIFFx = parseFloat(record?.[ival_tot]) - parseFloat(record?.[lifo])\n        EvaluateDetailValuationMethods(variable, NLFLO, INVVSUMx, INVDIFFx)\n    }\n\n    function EvaluateValuationMethods(variable, NLFLO) {\n        let avg = ''\n        let avg_f = ''\n        let fifo = ''\n        let fifo_f = ''\n        let std = ''\n        let std_f = ''\n        let othnl = ''\n        let othnl_f = ''\n        let tot = ''\n        let ival_tot = ''\n        let ival_tot_f = ''\n        let nl_tot = ''\n        let nl_tot_f = ''\n        let lifo = ''\n        let lifo_f = ''\n        let lifo_rsv = ''\n        let lifo_rsv_f = ''\n\n        if (variable == 'E') {\n            avg = 'INV_E_AVG_VAL'\n            avg_f = 'INV_E_AVG_VAL_F'\n            fifo = 'INV_E_FIFO_VAL'\n            fifo_f = 'INV_E_FIFO_VAL_F'\n            std = 'INV_E_STD_VAL'\n            std_f = 'INV_E_STD_VAL_F'\n            othnl = 'INV_E_OTHNL_VAL'\n            othnl_f = 'INV_E_OTHNL_VAL_F'\n            tot = 'INV_E_TOT_VAL'\n            ival_tot = 'INV_E_IVAL_TOT_DVAL'\n            ival_tot_f = 'INV_E_IVAL_TOT_DVAL_F'\n            nl_tot = 'INV_E_NL_TOT_DVAL'\n            nl_tot_f = 'INV_E_NL_TOT_DVAL_F'\n            lifo = 'INV_E_LIFO_VAL'\n            lifo_f = 'INV_E_LIFO_VAL_F'\n            lifo_rsv = 'INV_E_LIFO_RSV_VAL'\n            lifo_rsv_f = 'INV_E_LIFO_RSV_VAL_F'\n        } else if (variable == 'B') {\n            avg = 'INV_B_AVG_VAL'\n            avg_f = 'INV_B_AVG_VAL_F'\n            fifo = 'INV_B_FIFO_VAL'\n            fifo_f = 'INV_B_FIFO_VAL_F'\n            std = 'INV_B_STD_VAL'\n            std_f = 'INV_B_STD_VAL_F'\n            othnl = 'INV_B_OTHNL_VAL'\n            othnl_f = 'INV_B_OTHNL_VAL_F'\n            tot = 'INV_B_TOT_VAL'\n            ival_tot = 'INV_B_IVAL_TOT_DVAL'\n            ival_tot_f = 'INV_B_IVAL_TOT_DVAL_F'\n            nl_tot = 'INV_B_NL_TOT_DVAL'\n            nl_tot_f = 'INV_B_NL_TOT_DVAL_F'\n            lifo = 'INV_B_LIFO_VAL'\n            lifo_f = 'INV_B_LIFO_VAL_F'\n            lifo_rsv = 'INV_B_LIFO_RSV_VAL'\n            lifo_rsv_f = 'INV_B_LIFO_RSV_VAL_F'\n        }\n        var INVVSUMx = parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std]) + parseFloat(record?.[othnl])\n\n        if (parseInt(record?.[tot]) == 0) {\n            if ((parseFloat(record?.[lifo]) + parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std]) + parseFloat(record?.[othnl]) + parseFloat(record?.[ival_tot]) + parseFloat(record?.[nl_tot])) > 0 || parseInt(record?.[lifo_rsv]) != 0) {\n                record[lifo] = 0;\n                record[lifo_f] = setCharAt(record?.[lifo_f], 2, 'Z');\n                record[fifo] = 0\n                record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'Z');\n                record[avg] = 0;\n                record[avg_f] = setCharAt(record?.[avg_f], 2, 'Z');\n                record[std] = 0;\n                record[std_f] = setCharAt(record?.[std_f], 2, 'Z');\n                record[othnl] = 0;\n                record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'Z');\n                record[ival_tot] = 0;\n                record[ival_tot_f] = setCharAt(record?.[ival_tot_f], 2, 'Z');\n                record[nl_tot] = 0;\n                record[nl_tot_f] = setCharAt(record?.[nl_tot_f], 2, 'Z');\n                record[lifo_rsv] = 0;\n                record[lifo_rsv_f] = setCharAt(record?.[lifo_rsv_f], 2, 'Z');\n            }\n\n        } else if (parseFloat(record?.[tot]) == parseFloat(record?.[ival_tot])) {\n            if (parseFloat(record?.[ival_tot]) == parseFloat(record?.[lifo]) + parseFloat(INVVSUMx)) {\n                if (parseFloat(record?.[nl_tot]) == parseFloat(INVVSUMx)) {\n                } else {\n                    record[nl_tot] = INVVSUMx\n                    record[nl_tot_f] = setCharAt(record?.[nl_tot_f], 2, 'L');\n                }\n            } else {\n                EvaluateNoNLIFOValuationMethodsModulePathA(variable, INVVSUMx, NLFLO)\n            }\n        } else {\n            record[ival_tot] = record[tot]\n            record[ival_tot_f] = setCharAt(record?.[ival_tot_f], 2, 'L')\n            EvaluateNoNLIFOValuationMethodsModulePathA(variable, INVVSUMx, NLFLO)\n        }\n    }\n    function EvaluateValuationMethodsModule() {\n        let NLFLO = 0\n        NLFLO = parseInt(Math.floor(Math.random() * 100))\n        if (NLFLO < 10) {\n            NLFLO = '0' + NLFLO\n        } else {\n            NLFLO = '' + NLFLO\n        }\n        EvaluateValuationMethods('B', NLFLO)\n        EvaluateValuationMethods('E', NLFLO)\n    }\n\n    EvaluateValuationMethodsModule()\n    record.ACTION = 'Return to Non-LIFO Valuation Methods'\n\n    return msg;\n}catch(e){\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "bf9971d8a4012ed3",
        "type": "function",
        "z": "379e12b168b021d1",
        "name": "MIV: NONLIFOValuationMethodsModule",
        "func": "try{\n    let record_idx = global.get(\"ptrModuleFacts\");\n    let record = msg.payload.csv[record_idx];\n\n    function setCharAt(str, index, chr) {\n        if ([null, undefined].includes(str)) {\n            let newstr = ''\n            for (let i = 0; i < index; i++) {\n                newstr = newstr + ' ';\n            }\n            newstr = newstr + chr\n            return newstr;\n        } else {\n            if (index > str.length - 1) {\n                let addstr = index - str.length\n                let newstr = str\n                for (let i = 0; i < addstr; i++) {\n                    newstr = newstr + ' ';\n                }\n                newstr = newstr + chr\n                return newstr;\n            } else {\n                return str.substring(0, index) + chr + str.substring(index + 1);\n            }\n        }\n    }\n\n    function NonLIFORANDOMModulePath(variable) {\n        let avg = ''\n        let avg_f = ''\n        let fifo = ''\n        let fifo_f = ''\n        let std = ''\n        let std_f = ''\n        let othnl = ''\n        let othnl_f = ''\n        let ival_tot = ''\n        let nl_tot = ''\n        let nl_tot_f = ''\n        let lifo = ''\n        if (variable == 'E') {\n            avg = 'INV_E_AVG_VAL'\n            avg_f = 'INV_E_AVG_VAL_F'\n            fifo = 'INV_E_FIFO_VAL'\n            fifo_f = 'INV_E_FIFO_VAL_F'\n            std = 'INV_E_STD_VAL'\n            std_f = 'INV_E_STD_VAL_F'\n            othnl = 'INV_E_OTHNL_VAL'\n            othnl_f = 'INV_E_OTHNL_VAL_F'\n            ival_tot = 'INV_E_IVAL_TOT_DVAL'\n            nl_tot = 'INV_E_NL_TOT_DVAL'\n            nl_tot_f = 'INV_E_NL_TOT_DVAL_F'\n            lifo = 'INV_E_LIFO_VAL'\n        } else if (variable == 'B') {\n            avg = 'INV_B_AVG_VAL'\n            avg_f = 'INV_B_AVG_VAL_F'\n            fifo = 'INV_B_FIFO_VAL'\n            fifo_f = 'INV_B_FIFO_VAL_F'\n            std = 'INV_B_STD_VAL'\n            std_f = 'INV_B_STD_VAL_F'\n            othnl = 'INV_B_OTHNL_VAL'\n            othnl_f = 'INV_B_OTHNL_VAL_F'\n            ival_tot = 'INV_B_IVAL_TOT_DVAL'\n            nl_tot = 'INV_B_NL_TOT_DVAL'\n            nl_tot_f = 'INV_B_NL_TOT_DVAL_F'\n            lifo = 'INV_B_LIFO_VAL'\n        }\n        if ((0 <= parseInt(record?.NLFLO)) && (30 >= parseInt(record?.NLFLO))) {\n            record[std] = parseFloat(record?.[ival_tot]) - parseFloat(record?.[lifo])\n            record[std_f] = setCharAt(record?.[std_f], 2, 'J')\n            record[fifo] = 0\n            record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'J')\n            record[avg] = 0\n            record[avg_f] = setCharAt(record?.[avg_f], 2, 'J')\n            record[othnl] = 0\n            record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'J')\n\n        } else if ((31 <= parseInt(record?.NLFLO)) && (40 >= parseInt(record?.NLFLO))) {\n            record[avg] = parseFloat(record?.[ival_tot]) - parseFloat(record?.[lifo])\n            record[avg_f] = setCharAt(record?.[avg_f], 2, 'J')\n            record[fifo] = 0\n            record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'J')\n            record[std] = 0\n            record[std_f] = setCharAt(record?.[std_f], 2, 'J')\n            record[othnl] = 0\n            record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'J')\n\n        } else if ((41 <= parseInt(record?.NLFLO)) && (50 >= parseInt(record?.NLFLO))) {\n            record[othnl] = parseFloat(record?.[ival_tot]) - parseFloat(record?.[lifo])\n            record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'J')\n            record[fifo] = 0\n            record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'J')\n            record[std] = 0\n            record[std_f] = setCharAt(record?.[std_f], 2, 'J')\n            record[avg] = 0\n            record[avg_f] = setCharAt(record?.[avg_f], 2, 'J')\n\n        } else {\n            record[fifo] = parseFloat(record?.[ival_tot]) - parseFloat(record?.[lifo])\n            record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'J')\n            record[avg] = 0\n            record[avg_f] = setCharAt(record?.[avg_f], 2, 'J')\n            record[std] = 0\n            record[std_f] = setCharAt(record?.[std_f], 2, 'J')\n            record[othnl] = 0\n            record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'J')\n        }\n        record[nl_tot] = parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std]) + parseFloat(record?.[othnl])\n        record[nl_tot_f] = setCharAt(record?.[nl_tot_f], 2, 'J')\n    }\n    function NonLIFORANDOMModule(variable, NLFLO) {\n        record.NLFLO = NLFLO\n        NonLIFORANDOMModulePath(variable)\n    }\n\n    function EvaluateNoNLIFOValuationMethod(variable) {\n        let avg = ''\n        let avg_f = ''\n        let fifo = ''\n        let fifo_f = ''\n        let std = ''\n        let std_f = ''\n        let othnl = ''\n        let othnl_f = ''\n        let ival_tot = ''\n        let nl_tot = ''\n        if (variable == 'E') {\n            avg = 'INV_E_AVG_VAL'\n            avg_f = 'INV_E_AVG_VAL_F'\n            fifo = 'INV_E_FIFO_VAL'\n            fifo_f = 'INV_E_FIFO_VAL_F'\n            std = 'INV_E_STD_VAL'\n            std_f = 'INV_E_STD_VAL_F'\n            othnl = 'INV_E_OTHNL_VAL'\n            othnl_f = 'INV_E_OTHNL_VAL_F'\n            ival_tot = 'INV_E_IVAL_TOT_DVAL'\n            nl_tot = 'INV_E_NL_TOT_DVAL'\n        } else if (variable == 'B') {\n            avg = 'INV_B_AVG_VAL'\n            avg_f = 'INV_B_AVG_VAL_F'\n            fifo = 'INV_B_FIFO_VAL'\n            fifo_f = 'INV_B_FIFO_VAL_F'\n            std = 'INV_B_STD_VAL'\n            std_f = 'INV_B_STD_VAL_F'\n            othnl = 'INV_B_OTHNL_VAL'\n            othnl_f = 'INV_B_OTHNL_VAL_F'\n            ival_tot = 'INV_B_IVAL_TOT_DVAL'\n            nl_tot = 'INV_B_NL_TOT_DVAL'\n        }\n        if (parseFloat(record?.[fifo]) > 0) {\n            if (0 == (parseFloat(record?.[avg]) + parseFloat(record?.[std]) + parseFloat(record?.[othnl]))) {\n                if (parseFloat(record?.[fifo]) != parseFloat(record?.[ival_tot])) {\n                    record[fifo] = record?.[ival_tot]\n                    record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'L')\n                }\n            } else {\n                console.log(record[nl_tot], record[ival_tot])\n                record[fifo] = Math.round((parseFloat(record?.[fifo]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'K')\n                record[avg] = Math.round((parseFloat(record?.[avg]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[avg_f] = setCharAt(record?.[avg_f], 2, 'K')\n                record[std] = Math.round((parseFloat(record?.[std]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[std_f] = setCharAt(record?.[std_f], 2, 'K')\n                record[othnl] = Math.round(parseFloat(record?.[ival_tot]) - (parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std])))\n                record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'K')\n            }\n        } else if (parseFloat(record?.[avg]) > 0) {\n            if ((parseFloat(record?.[std]) + parseFloat(record?.[othnl])) == 0) {\n                if (parseFloat(record?.[avg]) != parseFloat(record?.[ival_tot])) {\n                    record[avg] = record?.[ival_tot]\n                    record[avg_f] = setCharAt(record?.[avg_f], 2, 'L')\n                }\n            } else {\n                record[avg] = Math.round((parseFloat(record?.[avg]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[avg_f] = setCharAt(record?.[avg_f], 2, 'K')\n                record[std] = Math.round((parseFloat(record?.[std]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[std_f] = setCharAt(record?.[std_f], 2, 'K')\n                record[othnl] = Math.round(parseFloat(record?.[ival_tot]) - (parseFloat(record?.[avg]) + parseFloat(record?.[std])))\n                record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'K')\n            }\n\n        } else if (parseFloat(record?.[std]) > 0) {\n            if (parseFloat(record?.[othnl]) == 0) {\n                if (parseFloat(record?.[std]) != parseFloat(record?.[ival_tot])) {\n                    record[std] = record?.[ival_tot]\n                    record[std_f] = setCharAt(record?.[std_f], 2, 'L')\n                }\n            } else {\n                record[std] = Math.round((parseFloat(record?.[std]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[std_f] = setCharAt(record?.[std_f], 2, 'K')\n                record[othnl] = Math.round(parseFloat(record?.[ival_tot]) - parseFloat(record?.[std]))\n                record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'K')\n            }\n        } else if (parseFloat(record?.[othnl]) == parseFloat(record?.[ival_tot])) {\n        } else {\n            record[othnl] = parseFloat(record?.[ival_tot])\n            record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'L')\n        }\n    }\n\n    function EvaluateDetailValuationMethodsPathA(variable) {\n        let othnl = ''\n        let avg = ''\n        let fifo = ''\n        let std = ''\n        let nl_tot = ''\n        let nl_tot_f = ''\n        if (variable == 'E') {\n            avg = 'INV_E_AVG_VAL'\n            fifo = 'INV_E_FIFO_VAL'\n            std = 'INV_E_STD_VAL'\n            othnl = 'INV_E_OTHNL_VAL'\n            nl_tot = 'INV_E_NL_TOT_DVAL'\n            nl_tot_f = 'INV_E_NL_TOT_DVAL_F'\n        } else if (variable == 'B') {\n            avg = 'INV_B_AVG_VAL'\n            fifo = 'INV_B_FIFO_VAL'\n            std = 'INV_B_STD_VAL'\n            othnl = 'INV_B_OTHNL_VAL'\n            nl_tot = 'INV_B_NL_TOT_DVAL'\n            nl_tot_f = 'INV_B_NL_TOT_DVAL_F'\n        }\n        if (parseFloat(record?.[nl_tot]) != (parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std]) + parseFloat(record?.[othnl]))) {\n            record[nl_tot] = parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std]) + parseFloat(record?.[othnl])\n            record[nl_tot_f] = setCharAt(record?.[nl_tot_f], 2, 'L')\n        }\n    }\n    function EvaluateDetailValuationMethodsPathC(variable) {\n        let othnl = ''\n        let avg = ''\n        let fifo = ''\n        let std = ''\n        let othnl_f = ''\n        if (variable == 'E') {\n            avg = 'INV_E_AVG_VAL'\n            fifo = 'INV_E_FIFO_VAL'\n            std = 'INV_E_STD_VAL'\n            othnl = 'INV_E_OTHNL_VAL'\n            othnl_f = 'INV_E_OTHNL_VAL_F'\n        } else if (variable == 'B') {\n            avg = 'INV_B_AVG_VAL'\n            fifo = 'INV_B_FIFO_VAL'\n            std = 'INV_B_STD_VAL'\n            othnl = 'INV_B_OTHNL_VAL'\n            othnl_f = 'INV_B_OTHNL_VAL_F'\n        }\n        if (parseFloat(record?.[othnl]) < 0) {\n            record[othnl] = Math.abs(record?.[othnl])\n\n            var max = Math.max(...[parseFloat(record?.[fifo]), parseFloat(record?.[avg]), parseFloat(record?.[std])])\n            if (parseFloat(record?.[fifo]) == max) {\n                record[fifo] = record?.[fifo] - record?.[othnl]\n            } else if (parseFloat(record?.[avg]) == max) {\n                record[avg] = record?.[avg] - record?.[othnl]\n            } else {\n                record[std] = record?.[std] - record?.[othnl]\n            }\n            record[othnl] = 0\n            record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'Z');\n        }\n        EvaluateDetailValuationMethodsPathA(variable)\n    }\n    function EvaluateDetailValuationMethods(variable, NLFLO, INVVSUMx, INVDIFFx) {\n        let avg = ''\n        let avg_f = ''\n        let fifo = ''\n        let fifo_f = ''\n        let std = ''\n        let std_f = ''\n        let othnl = ''\n        let othnl_f = ''\n        let ival_tot = ''\n        let nl_tot = ''\n        let nl_tot_f = ''\n        let lifo = ''\n        let lifo_f = ''\n        var invvsum = INVVSUMx\n        var invdiff = INVDIFFx\n        let ec_std = ''\n        let ec_avg = ''\n        let ec_fifo = ''\n        let ec_ival_tot = ''\n\n        if (variable == 'E') {\n            avg = 'INV_E_AVG_VAL'\n            avg_f = 'INV_E_AVG_VAL_F'\n            fifo = 'INV_E_FIFO_VAL'\n            fifo_f = 'INV_E_FIFO_VAL_F'\n            std = 'INV_E_STD_VAL'\n            std_f = 'INV_E_STD_VAL_F'\n            othnl = 'INV_E_OTHNL_VAL'\n            othnl_f = 'INV_E_OTHNL_VAL_F'\n            ival_tot = 'INV_E_IVAL_TOT_DVAL'\n            nl_tot = 'INV_E_NL_TOT_DVAL'\n            nl_tot_f = 'INV_E_NL_TOT_DVAL_F'\n            lifo = 'INV_E_LIFO_VAL'\n            lifo_f = 'INV_E_LIFO_VAL_F'\n            ec_std = 'EC_INV_E_STD_VAL'\n            ec_avg = 'EC_INV_E_AVG_VAL'\n            ec_fifo = 'EC_INV_E_FIFO_VAL'\n            ec_ival_tot = 'EC_INV_E_IVAL_TOT_DVAL'\n        } else if (variable == 'B') {\n            avg = 'INV_B_AVG_VAL'\n            avg_f = 'INV_B_AVG_VAL_F'\n            fifo = 'INV_B_FIFO_VAL'\n            fifo_f = 'INV_B_FIFO_VAL_F'\n            std = 'INV_B_STD_VAL'\n            std_f = 'INV_B_STD_VAL_F'\n            othnl = 'INV_B_OTHNL_VAL'\n            othnl_f = 'INV_B_OTHNL_VAL_F'\n            ival_tot = 'INV_B_IVAL_TOT_DVAL'\n            nl_tot = 'INV_B_NL_TOT_DVAL'\n            nl_tot_f = 'INV_B_NL_TOT_DVAL_F'\n            lifo = 'INV_B_LIFO_VAL'\n            lifo_f = 'INV_B_LIFO_VAL_F'\n            ec_std = 'EC_INV_B_STD_VAL'\n            ec_avg = 'EC_INV_B_AVG_VAL'\n            ec_fifo = 'EC_INV_B_FIFO_VAL'\n            ec_ival_tot = 'EC_INV_B_IVAL_TOT_DVAL'\n        }\n\n        if (parseFloat(record?.[lifo]) == 0) {\n            if (parseFloat(invvsum) == 0) {\n                if (parseFloat(record?.[ec_ival_tot]) == 0) {\n                    NonLIFORANDOMModule(variable, NLFLO)\n                } else {\n                    record[fifo] = Math.round((parseFloat(record?.[ec_fifo]) / parseFloat(record?.[ec_ival_tot])) * parseFloat(record?.[ival_tot]))\n                    record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'H')\n                    record[avg] = Math.round((parseFloat(record?.[ec_avg]) / parseFloat(record?.[ec_ival_tot])) * parseFloat(record?.[ival_tot]))\n                    record[avg_f] = setCharAt(record?.[avg_f], 2, 'H')\n                    record[std] = Math.round((parseFloat(record?.[ec_std]) / parseFloat(record?.[ec_ival_tot])) * parseFloat(record?.[ival_tot]))\n                    record[std_f] = setCharAt(record?.[std_f], 2, 'H')\n                    record[othnl] = Math.round(parseFloat(record?.[ival_tot]) -\n                        (\n                            parseFloat(record?.[lifo]) + parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std])\n                        ))\n                    record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'H')\n                    EvaluateDetailValuationMethodsPathC(variable)\n                }\n            } else {\n                EvaluateNoNLIFOValuationMethod(variable)\n                EvaluateDetailValuationMethodsPathC(variable)\n            }\n        } else if (parseFloat(invvsum) == 0) {\n            if (parseFloat(record?.[lifo]) == parseFloat(record?.[ival_tot])) {\n                EvaluateDetailValuationMethodsPathA(variable)\n            } else {\n                record[lifo] = record?.[ival_tot]\n                record[lifo_f] = setCharAt(record?.[lifo_f], 2, 'L')\n                EvaluateDetailValuationMethodsPathA(variable)\n            }\n        } else {\n            record[fifo] = Math.round((parseFloat(record?.[fifo]) / parseFloat(invvsum)) * parseFloat(invdiff))\n            record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'K')\n\n            record[avg] = Math.round((parseFloat(record?.[ec_avg]) / parseFloat(invvsum)) * parseFloat(invdiff));\n            record[avg_f] = setCharAt(record?.[avg_f], 2, 'K');\n\n            record[std] = Math.round((parseFloat(record?.[ec_std]) / parseFloat(invvsum)) * parseFloat(invdiff));\n            record[std_f] = setCharAt(record?.[std_f], 2, 'K');\n\n            record[othnl] = Math.round(parseFloat(record?.[ival_tot]) - (parseFloat(record?.[lifo]) + parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std])));\n            record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'K');\n\n            EvaluateDetailValuationMethodsPathC(variable)\n        }\n    }\n\n\n    function EvaluateNoNLIFOValuationMethodsModulePathA(variable, INVVSUMx, NLFLO) {\n        let ival_tot = ''\n        let lifo = ''\n        if (variable == 'E') {\n            ival_tot = 'INV_E_IVAL_TOT_DVAL'\n            lifo = 'INV_E_LIFO_VAL'\n        } else if (variable == 'B') {\n            ival_tot = 'INV_B_IVAL_TOT_DVAL'\n            lifo = 'INV_B_LIFO_VAL'\n        }\n        var INVDIFFx = parseFloat(record?.[ival_tot]) - parseFloat(record?.[lifo])\n        EvaluateDetailValuationMethods(variable, NLFLO, INVVSUMx, INVDIFFx)\n    }\n\n    function EvaluateValuationMethods(variable, NLFLO) {\n        let avg = ''\n        let avg_f = ''\n        let fifo = ''\n        let fifo_f = ''\n        let std = ''\n        let std_f = ''\n        let othnl = ''\n        let othnl_f = ''\n        let tot = ''\n        let ival_tot = ''\n        let ival_tot_f = ''\n        let nl_tot = ''\n        let nl_tot_f = ''\n        let lifo = ''\n        let lifo_f = ''\n        let lifo_rsv = ''\n        let lifo_rsv_f = ''\n\n        if (variable == 'E') {\n            avg = 'INV_E_AVG_VAL'\n            avg_f = 'INV_E_AVG_VAL_F'\n            fifo = 'INV_E_FIFO_VAL'\n            fifo_f = 'INV_E_FIFO_VAL_F'\n            std = 'INV_E_STD_VAL'\n            std_f = 'INV_E_STD_VAL_F'\n            othnl = 'INV_E_OTHNL_VAL'\n            othnl_f = 'INV_E_OTHNL_VAL_F'\n            tot = 'INV_E_TOT_VAL'\n            ival_tot = 'INV_E_IVAL_TOT_DVAL'\n            ival_tot_f = 'INV_E_IVAL_TOT_DVAL_F'\n            nl_tot = 'INV_E_NL_TOT_DVAL'\n            nl_tot_f = 'INV_E_NL_TOT_DVAL_F'\n            lifo = 'INV_E_LIFO_VAL'\n            lifo_f = 'INV_E_LIFO_VAL_F'\n            lifo_rsv = 'INV_E_LIFO_RSV_VAL'\n            lifo_rsv_f = 'INV_E_LIFO_RSV_VAL_F'\n        } else if (variable == 'B') {\n            avg = 'INV_B_AVG_VAL'\n            avg_f = 'INV_B_AVG_VAL_F'\n            fifo = 'INV_B_FIFO_VAL'\n            fifo_f = 'INV_B_FIFO_VAL_F'\n            std = 'INV_B_STD_VAL'\n            std_f = 'INV_B_STD_VAL_F'\n            othnl = 'INV_B_OTHNL_VAL'\n            othnl_f = 'INV_B_OTHNL_VAL_F'\n            tot = 'INV_B_TOT_VAL'\n            ival_tot = 'INV_B_IVAL_TOT_DVAL'\n            ival_tot_f = 'INV_B_IVAL_TOT_DVAL_F'\n            nl_tot = 'INV_B_NL_TOT_DVAL'\n            nl_tot_f = 'INV_B_NL_TOT_DVAL_F'\n            lifo = 'INV_B_LIFO_VAL'\n            lifo_f = 'INV_B_LIFO_VAL_F'\n            lifo_rsv = 'INV_B_LIFO_RSV_VAL'\n            lifo_rsv_f = 'INV_B_LIFO_RSV_VAL_F'\n        }\n        var INVVSUMx = parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std]) + parseFloat(record?.[othnl])\n\n        if (parseInt(record?.[tot]) == 0) {\n            if ((parseFloat(record?.[lifo]) + parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std]) + parseFloat(record?.[othnl]) + parseFloat(record?.[ival_tot]) + parseFloat(record?.[nl_tot])) > 0 || parseInt(record?.[lifo_rsv]) != 0) {\n                record[lifo] = 0;\n                record[lifo_f] = setCharAt(record?.[lifo_f], 2, 'Z');\n                record[fifo] = 0\n                record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'Z');\n                record[avg] = 0;\n                record[avg_f] = setCharAt(record?.[avg_f], 2, 'Z');\n                record[std] = 0;\n                record[std_f] = setCharAt(record?.[std_f], 2, 'Z');\n                record[othnl] = 0;\n                record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'Z');\n                record[ival_tot] = 0;\n                record[ival_tot_f] = setCharAt(record?.[ival_tot_f], 2, 'Z');\n                record[nl_tot] = 0;\n                record[nl_tot_f] = setCharAt(record?.[nl_tot_f], 2, 'Z');\n                record[lifo_rsv] = 0;\n                record[lifo_rsv_f] = setCharAt(record?.[lifo_rsv_f], 2, 'Z');\n            }\n\n        } else if (parseFloat(record?.[tot]) == parseFloat(record?.[ival_tot])) {\n            if (parseFloat(record?.[ival_tot]) == parseFloat(record?.[lifo]) + parseFloat(INVVSUMx)) {\n                if (parseFloat(record?.[nl_tot]) == parseFloat(INVVSUMx)) {\n                } else {\n                    record[nl_tot] = INVVSUMx\n                    record[nl_tot_f] = setCharAt(record?.[nl_tot_f], 2, 'L');\n                }\n            } else {\n                EvaluateNoNLIFOValuationMethodsModulePathA(variable, INVVSUMx, NLFLO)\n            }\n        } else {\n            record[ival_tot] = record[tot]\n            record[ival_tot_f] = setCharAt(record?.[ival_tot_f], 2, 'L')\n            EvaluateNoNLIFOValuationMethodsModulePathA(variable, INVVSUMx, NLFLO)\n        }\n    }\n    function EvaluateValuationMethodsModule() {\n        let NLFLO = 0\n        NLFLO = parseInt(Math.floor(Math.random() * 100))\n        if (NLFLO < 10) {\n            NLFLO = '0' + NLFLO\n        } else {\n            NLFLO = '' + NLFLO\n        }\n        EvaluateValuationMethods('B', NLFLO)\n        EvaluateValuationMethods('E', NLFLO)\n    }\n\n    EvaluateValuationMethodsModule()\n    record.ACTION = 'Return to Inventories Balance'\n\n    return msg\n}catch(e){\n    return msg\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "b78377ba255063ad",
        "type": "function",
        "z": "c65f463988b11e12",
        "name": "MIV: Evaluate LIFO Module",
        "func": "try{\n    let record_idx = global.get(\"ptrModuleFacts\");\n    let record = msg.payload.csv[record_idx];\n\n    let cache = global.get(\"lookupCache\");\n\n    let inv_reserve_file = cache.data.find(\n        item =>\n            item.module === \"inv_reserve\" &&\n            item.param === 'inv_reserve' &&\n            item.program === \"aies\" &&\n            item.unit_type === \"estab\"\n    )?.json_values;\n\n    function findParam() {\n        let NAICS_CODE = record.NAICS_CODE\n        NAICS_CODE = NAICS_CODE.toString()\n        for (let i in inv_reserve_file['INV_RESERVE']) {\n            let invReserve = inv_reserve_file['INV_RESERVE'][i]\n            let naics = invReserve['NAICSNEW']\n            naics = naics.toString()\n            if (NAICS_CODE.startsWith(naics)) {\n                return (invReserve);\n                break;\n            }\n        }\n    }\n\n    function setCharAt(str, index, chr) {\n        if ([null, undefined].includes(str)) {\n            let newstr = ''\n            for (let i = 0; i < index; i++) {\n                newstr = newstr + ' ';\n            }\n            newstr = newstr + chr\n            return newstr;\n        } else {\n            if (index > str.length - 1) {\n                let addstr = index - str.length\n                let newstr = str\n                for (let i = 0; i < addstr; i++) {\n                    newstr = newstr + ' ';\n                }\n                newstr = newstr + chr\n                return newstr;\n            } else {\n                return str.substring(0, index) + chr + str.substring(index + 1);\n            }\n        }\n    }\n    function EvaluateLIFOModulePathB() {\n        record.ACTION = 'Return to LIFO Valuation Method'\n    }\n\n    function EvaluateLIFOModulePathC(name_lifo, name_tot, name_lifo_f) {\n        if (parseFloat(record?.[name_lifo]) > parseFloat(record?.[name_tot])) {\n            record[name_lifo] = record?.[name_tot]\n            record[name_lifo_f] = setCharAt(record?.[name_lifo_f], 2, 'L')\n        }\n        EvaluateLIFOModulePathB()\n    }\n\n    function EvalLIFO(variable, invReserve) {\n        let name_tot = ''\n        let name_lifo = ''\n        let name_lifo_rsv = ''\n        let name_lifo_f = ''\n        let name_lifo_rsv_f = ''\n        let ec_name_tot = ''\n        let ec_name_lifo = ''\n        let ec_name_lifo_rsv = ''\n        let rsv = ''\n        let beta = ''\n        if (variable == 'E') {\n            name_tot = 'INV_E_TOT_VAL'\n            name_lifo = 'INV_E_LIFO_VAL'\n            name_lifo_rsv = 'INV_E_LIFO_RSV_VAL'\n            name_lifo_f = 'INV_E_LIFO_VAL_F'\n            name_lifo_rsv_f = 'INV_E_LIFO_RSV_VAL_F'\n            ec_name_tot = 'EC_INV_E_TOT_VAL'\n            ec_name_lifo = 'EC_INV_E_LIFO_VAL'\n            ec_name_lifo_rsv = 'EC_INV_E_LIFO_RSV_VAL'\n            rsv = 'RSVE_TOTE_UL'\n            beta = 'BETA_E'\n        } else if (variable == 'B') {\n            name_tot = 'INV_B_TOT_VAL'\n            name_lifo = 'INV_B_LIFO_VAL'\n            name_lifo_rsv = 'INV_B_LIFO_RSV_VAL'\n            name_lifo_f = 'INV_B_LIFO_VAL_F'\n            name_lifo_rsv_f = 'INV_B_LIFO_RSV_VAL_F'\n            ec_name_tot = 'EC_INV_B_TOT_VAL'\n            ec_name_lifo = 'EC_INV_B_LIFO_VAL'\n            ec_name_lifo_rsv = 'EC_INV_B_LIFO_RSV_VAL'\n            rsv = 'RSVB_TOTB_BL'\n            beta = 'BETA_B'\n        }\n        rsv = invReserve[rsv]\n        beta = invReserve[beta]\n\n        if (parseInt(record?.[name_lifo]) == 0) {\n            if (parseInt(record?.[name_lifo_rsv]) == 0) {\n                if (parseInt(record?.[ec_name_lifo]) == 0 || parseInt(record?.[ec_name_tot]) == 0) {\n                    EvaluateLIFOModulePathB()\n                } else if ((record?.[name_lifo_f]?.charAt(0) != ' ' || record?.[name_lifo_f]?.charAt(1) != ' ')\n                    && (record?.[name_lifo_f]?.charAt(0) && record?.[name_lifo_f]?.charAt(1))) {\n                    EvaluateLIFOModulePathB()\n                } else {\n                    record[name_lifo] = Math.round((parseFloat(record?.[ec_name_lifo]) / parseFloat(record?.[ec_name_tot])) * parseFloat(record?.[name_tot]))\n                    record[name_lifo_f] = setCharAt(record?.[name_lifo_f], 2, 'H')\n                    record[name_lifo_rsv] = Math.round((parseFloat(record?.[ec_name_lifo_rsv]) / parseFloat(record?.[ec_name_tot])) * parseFloat(record?.[name_tot]))\n                    record[name_lifo_rsv_f] = setCharAt(record?.[name_lifo_rsv_f], 2, 'H')\n                    EvaluateLIFOModulePathB()\n                }\n\n            } else {\n                record[name_lifo_rsv] = 0\n                record[name_lifo_rsv_f] = setCharAt(record?.[name_lifo_rsv_f], 2, 'B')\n                EvaluateLIFOModulePathC(name_lifo, name_tot, name_lifo_f)\n            }\n        } else if (parseInt(record?.[name_lifo_rsv]) == 0) {\n            record[name_lifo_rsv] = Math.round(parseFloat(beta) * parseFloat(record?.[name_tot]))\n            record[name_lifo_rsv_f] = setCharAt(record?.[name_lifo_rsv_f], 2, 'B')\n            EvaluateLIFOModulePathC(name_lifo, name_tot, name_lifo_f)\n        } else if (parseFloat(record?.[name_lifo]) > Math.abs(parseFloat(record?.[name_lifo_rsv]))) {\n            EvaluateLIFOModulePathC(name_lifo, name_tot, name_lifo_f)\n        } else {\n            if (parseFloat(beta) > 0.70) {\n                record[name_lifo] = 4.0 * Math.abs(parseFloat(record?.[name_lifo_rsv]))\n            } else if (parseFloat(beta) <= 0.70 && parseFloat(beta) >= .50) {\n                record[name_lifo] = 5.0 * Math.abs(parseFloat(record?.[name_lifo_rsv]))\n            } else {\n                record[name_lifo] = 6.0 * Math.abs(parseFloat(record?.[name_lifo_rsv]))\n            }\n            record[name_lifo_f] = setCharAt(record?.[name_lifo_f], 2, 'B')\n            EvaluateLIFOModulePathC(name_lifo, name_tot, name_lifo_f)\n        }\n    }\n\n    function EvaluateLIFOModule() {\n        let invReserve = findParam()\n        EvalLIFO('B', invReserve)\n        EvalLIFO('E', invReserve)\n    }\n    EvaluateLIFOModule()\n    return msg;\n}catch(e){\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "2aefe1848ae82c98",
        "type": "function",
        "z": "17fe2bc799b77fa4",
        "name": "MIV: Evaluate LIFO Reverse Module",
        "func": "try{\n    let record_idx = global.get(\"ptrModuleFacts\");\n    let record = msg.payload.csv[record_idx];\n\n    let cache = global.get(\"lookupCache\");\n\n    let inv_reserve_file = cache.data.find(\n        item =>\n            item.module === \"inv_reserve\" &&\n            item.param === 'inv_reserve' &&\n            item.program === \"aies\" &&\n            item.unit_type === \"estab\"\n    )?.json_values;\n\n    function findParam() {\n        let NAICS_CODE = record.NAICS_CODE\n        NAICS_CODE = NAICS_CODE.toString()\n        for (let i in inv_reserve_file['INV_RESERVE']) {\n            let invReserve = inv_reserve_file['INV_RESERVE'][i]\n            let naics = invReserve['NAICSNEW']\n            naics = naics.toString()\n            if (NAICS_CODE.startsWith(naics)) {\n                return (invReserve);\n                break;\n            }\n        }\n    }\n\n    function setCharAt(str, index, chr) {\n        if ([null, undefined].includes(str)) {\n            let newstr = ''\n            for (let i = 0; i < index; i++) {\n                newstr = newstr + ' ';\n            }\n            newstr = newstr + chr\n            return newstr;\n        } else {\n            if (index > str.length - 1) {\n                let addstr = index - str.length\n                let newstr = str\n                for (let i = 0; i < addstr; i++) {\n                    newstr = newstr + ' ';\n                }\n                newstr = newstr + chr\n                return newstr;\n            } else {\n                return str.substring(0, index) + chr + str.substring(index + 1);\n            }\n        }\n    }\n\n    function EvaluateLifoReserve(variable, invReserve) {\n        let name_tot = ''\n        let name_lifo = ''\n        let name_lifo_rsv = ''\n        let name_lifo_f = ''\n        let name_lifo_rsv_f = ''\n        let rsv = ''\n        let beta = ''\n        if (variable == 'E') {\n            name_tot = 'INV_E_TOT_VAL'\n            name_lifo = 'INV_E_LIFO_VAL'\n            name_lifo_rsv = 'INV_E_LIFO_RSV_VAL'\n            name_lifo_f = 'INV_E_LIFO_VAL_F'\n            name_lifo_rsv_f = 'INV_E_LIFO_RSV_VAL_F'\n            rsv = 'RSVE_TOTE_UL'\n            beta = 'BETA_E'\n        } else if (variable == 'B') {\n            name_tot = 'INV_B_TOT_VAL'\n            name_lifo = 'INV_B_LIFO_VAL'\n            name_lifo_rsv = 'INV_B_LIFO_RSV_VAL'\n            name_lifo_f = 'INV_B_LIFO_VAL_F'\n            name_lifo_rsv_f = 'INV_B_LIFO_RSV_VAL_F'\n            rsv = 'RSVB_TOTB_BL'\n            beta = 'BETA_B'\n        }\n        rsv = invReserve[rsv]\n        beta = invReserve[beta]\n\n        if (parseInt(record?.[name_tot]) == 0) {\n            if (parseInt(record?.[name_lifo]) != 0 || parseInt(record?.[name_lifo_rsv]) != 0) {\n                record[name_lifo] = 0\n                record[name_lifo_f] = setCharAt(record?.[name_lifo_f], 2, 'Z')\n                record[name_lifo_rsv] = 0\n                record[name_lifo_rsv_f] = setCharAt(record?.[name_lifo_rsv_f], 2, 'Z')\n            }\n        } else if (parseInt(record?.[name_lifo_rsv]) < 0 || parseInt(record?.[name_lifo_rsv]) > 0) {\n            if (Math.abs(parseFloat(record?.[name_lifo_rsv])) / parseFloat(record?.[name_tot]) >= parseFloat(rsv)) {\n                record[name_lifo_rsv] = Math.round(parseFloat(beta) * parseFloat(record?.[name_tot]))\n                record[name_lifo_rsv_f] = setCharAt(record?.[name_lifo_rsv_f], 2, 'B')\n            }\n        }\n    }\n\n    function EvaluateLifoReserveModule() {\n        let invReserve = findParam()\n        EvaluateLifoReserve('B', invReserve)\n        EvaluateLifoReserve('E', invReserve)\n        record.ACTION = 'Return to LIFO Valuation Method'\n    }\n\n    EvaluateLifoReserveModule()\n    return msg\n}catch(e){\n    return msg\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "9a63a08fcc6c11c3",
        "type": "function",
        "z": "7d33e2bb432d595f",
        "name": "MIV: LIFO Valuation Method",
        "func": "try{\n    let record_idx = global.get(\"ptrModuleFacts\");\n    let record = msg.payload.csv[record_idx];\n\n    let cache = global.get(\"lookupCache\");\n\n    let inv_reserve_file = cache.data.find(\n        item =>\n            item.module === \"inv_reserve\" &&\n            item.param === 'inv_reserve' &&\n            item.program === \"aies\" &&\n            item.unit_type === \"estab\"\n    )?.json_values;\n\n    function findParam() {\n        let NAICS_CODE = record.NAICS_CODE\n        NAICS_CODE = NAICS_CODE.toString()\n        for (let i in inv_reserve_file['INV_RESERVE']) {\n            let invReserve = inv_reserve_file['INV_RESERVE'][i]\n            let naics = invReserve['NAICSNEW']\n            naics = naics.toString()\n            if (NAICS_CODE.startsWith(naics)) {\n                return (invReserve);\n                break;\n            }\n        }\n    }\n\n    function setCharAt(str, index, chr) {\n        if ([null, undefined].includes(str)) {\n            let newstr = ''\n            for (let i = 0; i < index; i++) {\n                newstr = newstr + ' ';\n            }\n            newstr = newstr + chr\n            return newstr;\n        } else {\n            if (index > str.length - 1) {\n                let addstr = index - str.length\n                let newstr = str\n                for (let i = 0; i < addstr; i++) {\n                    newstr = newstr + ' ';\n                }\n                newstr = newstr + chr\n                return newstr;\n            } else {\n                return str.substring(0, index) + chr + str.substring(index + 1);\n            }\n        }\n    }\n\n    function EvaluateLifoReserve(variable, invReserve) {\n        let name_tot = ''\n        let name_lifo = ''\n        let name_lifo_rsv = ''\n        let name_lifo_f = ''\n        let name_lifo_rsv_f = ''\n        let rsv = ''\n        let beta = ''\n        if (variable == 'E') {\n            name_tot = 'INV_E_TOT_VAL'\n            name_lifo = 'INV_E_LIFO_VAL'\n            name_lifo_rsv = 'INV_E_LIFO_RSV_VAL'\n            name_lifo_f = 'INV_E_LIFO_VAL_F'\n            name_lifo_rsv_f = 'INV_E_LIFO_RSV_VAL_F'\n            rsv = 'RSVE_TOTE_UL'\n            beta = 'BETA_E'\n        } else if (variable == 'B') {\n            name_tot = 'INV_B_TOT_VAL'\n            name_lifo = 'INV_B_LIFO_VAL'\n            name_lifo_rsv = 'INV_B_LIFO_RSV_VAL'\n            name_lifo_f = 'INV_B_LIFO_VAL_F'\n            name_lifo_rsv_f = 'INV_B_LIFO_RSV_VAL_F'\n            rsv = 'RSVB_TOTB_BL'\n            beta = 'BETA_B'\n        }\n        rsv = invReserve[rsv]\n        beta = invReserve[beta]\n\n        if (parseInt(record?.[name_tot]) == 0) {\n            if (parseInt(record?.[name_lifo]) != 0 || parseInt(record?.[name_lifo_rsv]) != 0) {\n                record[name_lifo] = 0\n                record[name_lifo_f] = setCharAt(record?.[name_lifo_f], 2, 'Z')\n                record[name_lifo_rsv] = 0\n                record[name_lifo_rsv_f] = setCharAt(record?.[name_lifo_rsv_f], 2, 'Z')\n            }\n        } else if (parseInt(record?.[name_lifo_rsv]) < 0 || parseInt(record?.[name_lifo_rsv]) > 0) {\n            if (Math.abs(parseFloat(record?.[name_lifo_rsv])) / parseFloat(record?.[name_tot]) >= parseFloat(rsv)) {\n                record[name_lifo_rsv] = Math.round(parseFloat(beta) * parseFloat(record?.[name_tot]))\n                record[name_lifo_rsv_f] = setCharAt(record?.[name_lifo_rsv_f], 2, 'B')\n            }\n        }\n    }\n\n    function EvaluateLIFOModulePathC(name_lifo, name_tot, name_lifo_f) {\n        if (parseFloat(record?.[name_lifo]) > parseFloat(record?.[name_tot])) {\n            record[name_lifo] = record?.[name_tot]\n            record[name_lifo_f] = setCharAt(record?.[name_lifo_f], 2, 'L')\n        }\n    }\n\n    function EvalLIFO(variable, invReserve) {\n        let name_tot = ''\n        let name_lifo = ''\n        let name_lifo_rsv = ''\n        let name_lifo_f = ''\n        let name_lifo_rsv_f = ''\n        let ec_name_tot = ''\n        let ec_name_lifo = ''\n        let ec_name_lifo_rsv = ''\n        let rsv = ''\n        let beta = ''\n        if (variable == 'E') {\n            name_tot = 'INV_E_TOT_VAL'\n            name_lifo = 'INV_E_LIFO_VAL'\n            name_lifo_rsv = 'INV_E_LIFO_RSV_VAL'\n            name_lifo_f = 'INV_E_LIFO_VAL_F'\n            name_lifo_rsv_f = 'INV_E_LIFO_RSV_VAL_F'\n            ec_name_tot = 'EC_INV_E_TOT_VAL'\n            ec_name_lifo = 'EC_INV_E_LIFO_VAL'\n            ec_name_lifo_rsv = 'EC_INV_E_LIFO_RSV_VAL'\n            rsv = 'RSVE_TOTE_UL'\n            beta = 'BETA_E'\n        } else if (variable == 'B') {\n            name_tot = 'INV_B_TOT_VAL'\n            name_lifo = 'INV_B_LIFO_VAL'\n            name_lifo_rsv = 'INV_B_LIFO_RSV_VAL'\n            name_lifo_f = 'INV_B_LIFO_VAL_F'\n            name_lifo_rsv_f = 'INV_B_LIFO_RSV_VAL_F'\n            ec_name_tot = 'EC_INV_B_TOT_VAL'\n            ec_name_lifo = 'EC_INV_B_LIFO_VAL'\n            ec_name_lifo_rsv = 'EC_INV_B_LIFO_RSV_VAL'\n            rsv = 'RSVB_TOTB_BL'\n            beta = 'BETA_B'\n        }\n        rsv = invReserve[rsv]\n        beta = invReserve[beta]\n\n        if (parseInt(record?.[name_lifo]) == 0) {\n            if (parseInt(record?.[name_lifo_rsv]) == 0) {\n                if (parseInt(record?.[ec_name_lifo]) == 0 || parseInt(record?.[ec_name_tot]) == 0) {\n                } else if ((record?.[name_lifo_f]?.charAt(0) != ' ' || record?.[name_lifo_f]?.charAt(1) != ' ')\n                    && (record?.[name_lifo_f]?.charAt(0) && record?.[name_lifo_f]?.charAt(1))) {\n                } else {\n                    record[name_lifo] = Math.round((parseFloat(record?.[ec_name_lifo]) / parseFloat(record?.[ec_name_tot])) * parseFloat(record?.[name_tot]))\n                    record[name_lifo_f] = setCharAt(record?.[name_lifo_f], 2, 'H')\n                    record[name_lifo_rsv] = Math.round((parseFloat(record?.[ec_name_lifo_rsv]) / parseFloat(record?.[ec_name_tot])) * parseFloat(record?.[name_tot]))\n                    record[name_lifo_rsv_f] = setCharAt(record?.[name_lifo_rsv_f], 2, 'H')\n                }\n\n            } else {\n                record[name_lifo_rsv] = 0\n                record[name_lifo_rsv_f] = setCharAt(record?.[name_lifo_rsv_f], 2, 'B')\n                EvaluateLIFOModulePathC(name_lifo, name_tot, name_lifo_f)\n            }\n        } else if (parseInt(record?.[name_lifo_rsv]) == 0) {\n            record[name_lifo_rsv] = Math.round(parseFloat(beta) * parseFloat(record?.[name_tot]))\n            record[name_lifo_rsv_f] = setCharAt(record?.[name_lifo_rsv_f], 2, 'B')\n            EvaluateLIFOModulePathC(name_lifo, name_tot, name_lifo_f)\n        } else if (parseFloat(record?.[name_lifo]) > Math.abs(parseFloat(record?.[name_lifo_rsv]))) {\n            EvaluateLIFOModulePathC(name_lifo, name_tot, name_lifo_f)\n        } else {\n            if (parseFloat(beta) > 0.70) {\n                record[name_lifo] = 4.0 * Math.abs(parseFloat(record?.[name_lifo_rsv]))\n            } else if (parseFloat(beta) <= 0.70 && parseFloat(beta) >= .50) {\n                record[name_lifo] = 5.0 * Math.abs(parseFloat(record?.[name_lifo_rsv]))\n            } else {\n                record[name_lifo] = 6.0 * Math.abs(parseFloat(record?.[name_lifo_rsv]))\n            }\n            record[name_lifo_f] = setCharAt(record?.[name_lifo_f], 2, 'B')\n            EvaluateLIFOModulePathC(name_lifo, name_tot, name_lifo_f)\n        }\n    }\n\n    function LIFOValuationMethod() {\n        let invReserve = findParam()\n        EvaluateLifoReserve('B', invReserve)\n        EvalLIFO('B', invReserve)\n        EvaluateLifoReserve('E', invReserve)\n        EvalLIFO('E', invReserve)\n        record.ACTION = 'Return to Inventories Balance'\n    }\n\n    LIFOValuationMethod()\n    return msg\n}catch(e){\n    return msg\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "29d71411aa13a380",
        "type": "function",
        "z": "75eae7f006cc0f8a",
        "name": "MIV: Inventories Balance",
        "func": "try{\n    let record_idx = global.get(\"ptrModuleFacts\");\n    let record = msg.payload.csv[record_idx];\n\n    let cache = global.get(\"lookupCache\");\n\n    let inv_reserve_file = cache.data.find(\n        item =>\n            item.module === \"inv_reserve\" &&\n            item.param === 'inv_reserve' &&\n            item.program === \"aies\" &&\n            item.unit_type === \"estab\"\n    )?.json_values;\n\n    function findParam() {\n        let NAICS_CODE = record.NAICS_CODE\n        NAICS_CODE = NAICS_CODE.toString()\n        for (let i in inv_reserve_file['INV_RESERVE']) {\n            let invReserve = inv_reserve_file['INV_RESERVE'][i]\n            let naics = invReserve['NAICSNEW']\n            naics = naics.toString()\n            if (NAICS_CODE.startsWith(naics)) {\n                return (invReserve);\n                break;\n            }\n        }\n    }\n\n    function setCharAt(str, index, chr) {\n        if ([null, undefined].includes(str)) {\n            let newstr = ''\n            for (let i = 0; i < index; i++) {\n                newstr = newstr + ' ';\n            }\n            newstr = newstr + chr\n            return newstr;\n        } else {\n            if (index > str.length - 1) {\n                let addstr = index - str.length\n                let newstr = str\n                for (let i = 0; i < addstr; i++) {\n                    newstr = newstr + ' ';\n                }\n                newstr = newstr + chr\n                return newstr;\n            } else {\n                return str.substring(0, index) + chr + str.substring(index + 1);\n            }\n        }\n    }\n\n    function EvaluateLifoReserve(variable, invReserve) {\n        let name_tot = ''\n        let name_lifo = ''\n        let name_lifo_rsv = ''\n        let name_lifo_f = ''\n        let name_lifo_rsv_f = ''\n        let rsv = ''\n        let beta = ''\n        if (variable == 'E') {\n            name_tot = 'INV_E_TOT_VAL'\n            name_lifo = 'INV_E_LIFO_VAL'\n            name_lifo_rsv = 'INV_E_LIFO_RSV_VAL'\n            name_lifo_f = 'INV_E_LIFO_VAL_F'\n            name_lifo_rsv_f = 'INV_E_LIFO_RSV_VAL_F'\n            rsv = 'RSVE_TOTE_UL'\n            beta = 'BETA_E'\n        } else if (variable == 'B') {\n            name_tot = 'INV_B_TOT_VAL'\n            name_lifo = 'INV_B_LIFO_VAL'\n            name_lifo_rsv = 'INV_B_LIFO_RSV_VAL'\n            name_lifo_f = 'INV_B_LIFO_VAL_F'\n            name_lifo_rsv_f = 'INV_B_LIFO_RSV_VAL_F'\n            rsv = 'RSVB_TOTB_BL'\n            beta = 'BETA_B'\n        }\n        rsv = invReserve[rsv]\n        beta = invReserve[beta]\n\n        if (parseInt(record?.[name_tot]) == 0) {\n            if (parseInt(record?.[name_lifo]) != 0 || parseInt(record?.[name_lifo_rsv]) != 0) {\n                record[name_lifo] = 0\n                record[name_lifo_f] = setCharAt(record?.[name_lifo_f], 2, 'Z')\n                record[name_lifo_rsv] = 0\n                record[name_lifo_rsv_f] = setCharAt(record?.[name_lifo_rsv_f], 2, 'Z')\n            }\n        } else if (parseInt(record?.[name_lifo_rsv]) < 0 || parseInt(record?.[name_lifo_rsv]) > 0) {\n            if (Math.abs(parseFloat(record?.[name_lifo_rsv])) / parseFloat(record?.[name_tot]) >= parseFloat(rsv)) {\n                record[name_lifo_rsv] = Math.round(parseFloat(beta) * parseFloat(record?.[name_tot]))\n                record[name_lifo_rsv_f] = setCharAt(record?.[name_lifo_rsv_f], 2, 'B')\n            }\n        }\n    }\n\n    function EvaluateLIFOModulePathC(name_lifo, name_tot, name_lifo_f) {\n        if (parseFloat(record?.[name_lifo]) > parseFloat(record?.[name_tot])) {\n            record[name_lifo] = record?.[name_tot]\n            record[name_lifo_f] = setCharAt(record?.[name_lifo_f], 2, 'L')\n        }\n    }\n\n    function EvalLIFO(variable, invReserve) {\n        let name_tot = ''\n        let name_lifo = ''\n        let name_lifo_rsv = ''\n        let name_lifo_f = ''\n        let name_lifo_rsv_f = ''\n        let ec_name_tot = ''\n        let ec_name_lifo = ''\n        let ec_name_lifo_rsv = ''\n        let rsv = ''\n        let beta = ''\n        if (variable == 'E') {\n            name_tot = 'INV_E_TOT_VAL'\n            name_lifo = 'INV_E_LIFO_VAL'\n            name_lifo_rsv = 'INV_E_LIFO_RSV_VAL'\n            name_lifo_f = 'INV_E_LIFO_VAL_F'\n            name_lifo_rsv_f = 'INV_E_LIFO_RSV_VAL_F'\n            ec_name_tot = 'EC_INV_E_TOT_VAL'\n            ec_name_lifo = 'EC_INV_E_LIFO_VAL'\n            ec_name_lifo_rsv = 'EC_INV_E_LIFO_RSV_VAL'\n            rsv = 'RSVE_TOTE_UL'\n            beta = 'BETA_E'\n        } else if (variable == 'B') {\n            name_tot = 'INV_B_TOT_VAL'\n            name_lifo = 'INV_B_LIFO_VAL'\n            name_lifo_rsv = 'INV_B_LIFO_RSV_VAL'\n            name_lifo_f = 'INV_B_LIFO_VAL_F'\n            name_lifo_rsv_f = 'INV_B_LIFO_RSV_VAL_F'\n            ec_name_tot = 'EC_INV_B_TOT_VAL'\n            ec_name_lifo = 'EC_INV_B_LIFO_VAL'\n            ec_name_lifo_rsv = 'EC_INV_B_LIFO_RSV_VAL'\n            rsv = 'RSVB_TOTB_BL'\n            beta = 'BETA_B'\n        }\n        rsv = invReserve[rsv]\n        beta = invReserve[beta]\n\n        if (parseInt(record?.[name_lifo]) == 0) {\n            if (parseInt(record?.[name_lifo_rsv]) == 0) {\n                if (parseInt(record?.[ec_name_lifo]) == 0 || parseInt(record?.[ec_name_tot]) == 0) {\n                } else if ((record?.[name_lifo_f]?.charAt(0) != ' ' || record?.[name_lifo_f]?.charAt(1) != ' ')\n                    && (record?.[name_lifo_f]?.charAt(0) && record?.[name_lifo_f]?.charAt(1))) {\n                } else {\n                    record[name_lifo] = Math.round((parseFloat(record?.[ec_name_lifo]) / parseFloat(record?.[ec_name_tot])) * parseFloat(record?.[name_tot]))\n                    record[name_lifo_f] = setCharAt(record?.[name_lifo_f], 2, 'H')\n                    record[name_lifo_rsv] = Math.round((parseFloat(record?.[ec_name_lifo_rsv]) / parseFloat(record?.[ec_name_tot])) * parseFloat(record?.[name_tot]))\n                    record[name_lifo_rsv_f] = setCharAt(record?.[name_lifo_rsv_f], 2, 'H')\n                }\n\n            } else {\n                record[name_lifo_rsv] = 0\n                record[name_lifo_rsv_f] = setCharAt(record?.[name_lifo_rsv_f], 2, 'B')\n                EvaluateLIFOModulePathC(name_lifo, name_tot, name_lifo_f)\n            }\n        } else if (parseInt(record?.[name_lifo_rsv]) == 0) {\n            record[name_lifo_rsv] = Math.round(parseFloat(beta) * parseFloat(record?.[name_tot]))\n            record[name_lifo_rsv_f] = setCharAt(record?.[name_lifo_rsv_f], 2, 'B')\n            EvaluateLIFOModulePathC(name_lifo, name_tot, name_lifo_f)\n        } else if (parseFloat(record?.[name_lifo]) > Math.abs(parseFloat(record?.[name_lifo_rsv]))) {\n            EvaluateLIFOModulePathC(name_lifo, name_tot, name_lifo_f)\n        } else {\n            if (parseFloat(beta) > 0.70) {\n                record[name_lifo] = 4.0 * Math.abs(parseFloat(record?.[name_lifo_rsv]))\n            } else if (parseFloat(beta) <= 0.70 && parseFloat(beta) >= .50) {\n                record[name_lifo] = 5.0 * Math.abs(parseFloat(record?.[name_lifo_rsv]))\n            } else {\n                record[name_lifo] = 6.0 * Math.abs(parseFloat(record?.[name_lifo_rsv]))\n            }\n            record[name_lifo_f] = setCharAt(record?.[name_lifo_f], 2, 'B')\n            EvaluateLIFOModulePathC(name_lifo, name_tot, name_lifo_f)\n        }\n    }\n\n    function LIFOValuationMethod() {\n        let invReserve = findParam()\n        EvaluateLifoReserve('B', invReserve)\n        EvalLIFO('B', invReserve)\n        EvaluateLifoReserve('E', invReserve)\n        EvalLIFO('E', invReserve)\n    }\n\n    function NonLIFORANDOMModulePath(variable) {\n        let avg = ''\n        let avg_f = ''\n        let fifo = ''\n        let fifo_f = ''\n        let std = ''\n        let std_f = ''\n        let othnl = ''\n        let othnl_f = ''\n        let ival_tot = ''\n        let nl_tot = ''\n        let nl_tot_f = ''\n        let lifo = ''\n        if (variable == 'E') {\n            avg = 'INV_E_AVG_VAL'\n            avg_f = 'INV_E_AVG_VAL_F'\n            fifo = 'INV_E_FIFO_VAL'\n            fifo_f = 'INV_E_FIFO_VAL_F'\n            std = 'INV_E_STD_VAL'\n            std_f = 'INV_E_STD_VAL_F'\n            othnl = 'INV_E_OTHNL_VAL'\n            othnl_f = 'INV_E_OTHNL_VAL_F'\n            ival_tot = 'INV_E_IVAL_TOT_DVAL'\n            nl_tot = 'INV_E_NL_TOT_DVAL'\n            nl_tot_f = 'INV_E_NL_TOT_DVAL_F'\n            lifo = 'INV_E_LIFO_VAL'\n        } else if (variable == 'B') {\n            avg = 'INV_B_AVG_VAL'\n            avg_f = 'INV_B_AVG_VAL_F'\n            fifo = 'INV_B_FIFO_VAL'\n            fifo_f = 'INV_B_FIFO_VAL_F'\n            std = 'INV_B_STD_VAL'\n            std_f = 'INV_B_STD_VAL_F'\n            othnl = 'INV_B_OTHNL_VAL'\n            othnl_f = 'INV_B_OTHNL_VAL_F'\n            ival_tot = 'INV_B_IVAL_TOT_DVAL'\n            nl_tot = 'INV_B_NL_TOT_DVAL'\n            nl_tot_f = 'INV_B_NL_TOT_DVAL_F'\n            lifo = 'INV_B_LIFO_VAL'\n        }\n        if ((0 <= parseInt(record?.NLFLO)) && (30 >= parseInt(record?.NLFLO))) {\n            record[std] = parseFloat(record?.[ival_tot]) - parseFloat(record?.[lifo])\n            record[std_f] = setCharAt(record?.[std_f], 2, 'J')\n            record[fifo] = 0\n            record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'J')\n            record[avg] = 0\n            record[avg_f] = setCharAt(record?.[avg_f], 2, 'J')\n            record[othnl] = 0\n            record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'J')\n\n        } else if ((31 <= parseInt(record?.NLFLO)) && (40 >= parseInt(record?.NLFLO))) {\n            record[avg] = parseFloat(record?.[ival_tot]) - parseFloat(record?.[lifo])\n            record[avg_f] = setCharAt(record?.[avg_f], 2, 'J')\n            record[fifo] = 0\n            record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'J')\n            record[std] = 0\n            record[std_f] = setCharAt(record?.[std_f], 2, 'J')\n            record[othnl] = 0\n            record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'J')\n\n        } else if ((41 <= parseInt(record?.NLFLO)) && (50 >= parseInt(record?.NLFLO))) {\n            record[othnl] = parseFloat(record?.[ival_tot]) - parseFloat(record?.[lifo])\n            record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'J')\n            record[fifo] = 0\n            record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'J')\n            record[std] = 0\n            record[std_f] = setCharAt(record?.[std_f], 2, 'J')\n            record[avg] = 0\n            record[avg_f] = setCharAt(record?.[avg_f], 2, 'J')\n\n        } else {\n            record[fifo] = parseFloat(record?.[ival_tot]) - parseFloat(record?.[lifo])\n            record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'J')\n            record[avg] = 0\n            record[avg_f] = setCharAt(record?.[avg_f], 2, 'J')\n            record[std] = 0\n            record[std_f] = setCharAt(record?.[std_f], 2, 'J')\n            record[othnl] = 0\n            record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'J')\n        }\n        record[nl_tot] = parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std]) + parseFloat(record?.[othnl])\n        record[nl_tot_f] = setCharAt(record?.[nl_tot_f], 2, 'J')\n    }\n    function NonLIFORANDOMModule(variable, NLFLO) {\n        record.NLFLO = NLFLO\n        NonLIFORANDOMModulePath(variable)\n    }\n\n    function EvaluateNoNLIFOValuationMethod(variable) {\n        let avg = ''\n        let avg_f = ''\n        let fifo = ''\n        let fifo_f = ''\n        let std = ''\n        let std_f = ''\n        let othnl = ''\n        let othnl_f = ''\n        let ival_tot = ''\n        let nl_tot = ''\n        if (variable == 'E') {\n            avg = 'INV_E_AVG_VAL'\n            avg_f = 'INV_E_AVG_VAL_F'\n            fifo = 'INV_E_FIFO_VAL'\n            fifo_f = 'INV_E_FIFO_VAL_F'\n            std = 'INV_E_STD_VAL'\n            std_f = 'INV_E_STD_VAL_F'\n            othnl = 'INV_E_OTHNL_VAL'\n            othnl_f = 'INV_E_OTHNL_VAL_F'\n            ival_tot = 'INV_E_IVAL_TOT_DVAL'\n            nl_tot = 'INV_E_NL_TOT_DVAL'\n        } else if (variable == 'B') {\n            avg = 'INV_B_AVG_VAL'\n            avg_f = 'INV_B_AVG_VAL_F'\n            fifo = 'INV_B_FIFO_VAL'\n            fifo_f = 'INV_B_FIFO_VAL_F'\n            std = 'INV_B_STD_VAL'\n            std_f = 'INV_B_STD_VAL_F'\n            othnl = 'INV_B_OTHNL_VAL'\n            othnl_f = 'INV_B_OTHNL_VAL_F'\n            ival_tot = 'INV_B_IVAL_TOT_DVAL'\n            nl_tot = 'INV_B_NL_TOT_DVAL'\n        }\n        if (parseFloat(record?.[fifo]) > 0) {\n            if (0 == (parseFloat(record?.[avg]) + parseFloat(record?.[std]) + parseFloat(record?.[othnl]))) {\n                if (parseFloat(record?.[fifo]) != parseFloat(record?.[ival_tot])) {\n                    record[fifo] = record?.[ival_tot]\n                    record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'L')\n                }\n            } else {\n                console.log(record[nl_tot], record[ival_tot])\n                record[fifo] = Math.round((parseFloat(record?.[fifo]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'K')\n                record[avg] = Math.round((parseFloat(record?.[avg]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[avg_f] = setCharAt(record?.[avg_f], 2, 'K')\n                record[std] = Math.round((parseFloat(record?.[std]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[std_f] = setCharAt(record?.[std_f], 2, 'K')\n                record[othnl] = Math.round(parseFloat(record?.[ival_tot]) - (parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std])))\n                record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'K')\n            }\n        } else if (parseFloat(record?.[avg]) > 0) {\n            if ((parseFloat(record?.[std]) + parseFloat(record?.[othnl])) == 0) {\n                if (parseFloat(record?.[avg]) != parseFloat(record?.[ival_tot])) {\n                    record[avg] = record?.[ival_tot]\n                    record[avg_f] = setCharAt(record?.[avg_f], 2, 'L')\n                }\n            } else {\n                record[avg] = Math.round((parseFloat(record?.[avg]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[avg_f] = setCharAt(record?.[avg_f], 2, 'K')\n                record[std] = Math.round((parseFloat(record?.[std]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[std_f] = setCharAt(record?.[std_f], 2, 'K')\n                record[othnl] = Math.round(parseFloat(record?.[ival_tot]) - (parseFloat(record?.[avg]) + parseFloat(record?.[std])))\n                record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'K')\n            }\n\n        } else if (parseFloat(record?.[std]) > 0) {\n            if (parseFloat(record?.[othnl]) == 0) {\n                if (parseFloat(record?.[std]) != parseFloat(record?.[ival_tot])) {\n                    record[std] = record?.[ival_tot]\n                    record[std_f] = setCharAt(record?.[std_f], 2, 'L')\n                }\n            } else {\n                record[std] = Math.round((parseFloat(record?.[std]) / parseFloat(record?.[nl_tot])) * parseFloat(record?.[ival_tot]))\n                record[std_f] = setCharAt(record?.[std_f], 2, 'K')\n                record[othnl] = Math.round(parseFloat(record?.[ival_tot]) - parseFloat(record?.[std]))\n                record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'K')\n            }\n        } else if (parseFloat(record?.[othnl]) == parseFloat(record?.[ival_tot])) {\n        } else {\n            record[othnl] = parseFloat(record?.[ival_tot])\n            record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'L')\n        }\n    }\n\n    function EvaluateDetailValuationMethodsPathA(variable) {\n        let othnl = ''\n        let avg = ''\n        let fifo = ''\n        let std = ''\n        let nl_tot = ''\n        let nl_tot_f = ''\n        if (variable == 'E') {\n            avg = 'INV_E_AVG_VAL'\n            fifo = 'INV_E_FIFO_VAL'\n            std = 'INV_E_STD_VAL'\n            othnl = 'INV_E_OTHNL_VAL'\n            nl_tot = 'INV_E_NL_TOT_DVAL'\n            nl_tot_f = 'INV_E_NL_TOT_DVAL_F'\n        } else if (variable == 'B') {\n            avg = 'INV_B_AVG_VAL'\n            fifo = 'INV_B_FIFO_VAL'\n            std = 'INV_B_STD_VAL'\n            othnl = 'INV_B_OTHNL_VAL'\n            nl_tot = 'INV_B_NL_TOT_DVAL'\n            nl_tot_f = 'INV_B_NL_TOT_DVAL_F'\n        }\n        if (parseFloat(record?.[nl_tot]) != (parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std]) + parseFloat(record?.[othnl]))) {\n            record[nl_tot] = parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std]) + parseFloat(record?.[othnl])\n            record[nl_tot_f] = setCharAt(record?.[nl_tot_f], 2, 'L')\n        }\n    }\n    function EvaluateDetailValuationMethodsPathC(variable) {\n        let othnl = ''\n        let avg = ''\n        let fifo = ''\n        let std = ''\n        let othnl_f = ''\n        if (variable == 'E') {\n            avg = 'INV_E_AVG_VAL'\n            fifo = 'INV_E_FIFO_VAL'\n            std = 'INV_E_STD_VAL'\n            othnl = 'INV_E_OTHNL_VAL'\n            othnl_f = 'INV_E_OTHNL_VAL_F'\n        } else if (variable == 'B') {\n            avg = 'INV_B_AVG_VAL'\n            fifo = 'INV_B_FIFO_VAL'\n            std = 'INV_B_STD_VAL'\n            othnl = 'INV_B_OTHNL_VAL'\n            othnl_f = 'INV_B_OTHNL_VAL_F'\n        }\n        if (parseFloat(record?.[othnl]) < 0) {\n            record[othnl] = Math.abs(record?.[othnl])\n\n            var max = Math.max(...[parseFloat(record?.[fifo]), parseFloat(record?.[avg]), parseFloat(record?.[std])])\n            if (parseFloat(record?.[fifo]) == max) {\n                record[fifo] = record?.[fifo] - record?.[othnl]\n            } else if (parseFloat(record?.[avg]) == max) {\n                record[avg] = record?.[avg] - record?.[othnl]\n            } else {\n                record[std] = record?.[std] - record?.[othnl]\n            }\n            record[othnl] = 0\n            record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'Z');\n        }\n        EvaluateDetailValuationMethodsPathA(variable)\n    }\n    function EvaluateDetailValuationMethods(variable, NLFLO, INVVSUMx, INVDIFFx) {\n        let avg = ''\n        let avg_f = ''\n        let fifo = ''\n        let fifo_f = ''\n        let std = ''\n        let std_f = ''\n        let othnl = ''\n        let othnl_f = ''\n        let ival_tot = ''\n        let nl_tot = ''\n        let nl_tot_f = ''\n        let lifo = ''\n        let lifo_f = ''\n        var invvsum = INVVSUMx\n        var invdiff = INVDIFFx\n        let ec_std = ''\n        let ec_avg = ''\n        let ec_fifo = ''\n        let ec_ival_tot = ''\n\n        if (variable == 'E') {\n            avg = 'INV_E_AVG_VAL'\n            avg_f = 'INV_E_AVG_VAL_F'\n            fifo = 'INV_E_FIFO_VAL'\n            fifo_f = 'INV_E_FIFO_VAL_F'\n            std = 'INV_E_STD_VAL'\n            std_f = 'INV_E_STD_VAL_F'\n            othnl = 'INV_E_OTHNL_VAL'\n            othnl_f = 'INV_E_OTHNL_VAL_F'\n            ival_tot = 'INV_E_IVAL_TOT_DVAL'\n            nl_tot = 'INV_E_NL_TOT_DVAL'\n            nl_tot_f = 'INV_E_NL_TOT_DVAL_F'\n            lifo = 'INV_E_LIFO_VAL'\n            lifo_f = 'INV_E_LIFO_VAL_F'\n            ec_std = 'EC_INV_E_STD_VAL'\n            ec_avg = 'EC_INV_E_AVG_VAL'\n            ec_fifo = 'EC_INV_E_FIFO_VAL'\n            ec_ival_tot = 'EC_INV_E_IVAL_TOT_DVAL'\n        } else if (variable == 'B') {\n            avg = 'INV_B_AVG_VAL'\n            avg_f = 'INV_B_AVG_VAL_F'\n            fifo = 'INV_B_FIFO_VAL'\n            fifo_f = 'INV_B_FIFO_VAL_F'\n            std = 'INV_B_STD_VAL'\n            std_f = 'INV_B_STD_VAL_F'\n            othnl = 'INV_B_OTHNL_VAL'\n            othnl_f = 'INV_B_OTHNL_VAL_F'\n            ival_tot = 'INV_B_IVAL_TOT_DVAL'\n            nl_tot = 'INV_B_NL_TOT_DVAL'\n            nl_tot_f = 'INV_B_NL_TOT_DVAL_F'\n            lifo = 'INV_B_LIFO_VAL'\n            lifo_f = 'INV_B_LIFO_VAL_F'\n            ec_std = 'EC_INV_B_STD_VAL'\n            ec_avg = 'EC_INV_B_AVG_VAL'\n            ec_fifo = 'EC_INV_B_FIFO_VAL'\n            ec_ival_tot = 'EC_INV_B_IVAL_TOT_DVAL'\n        }\n\n        if (parseFloat(record?.[lifo]) == 0) {\n            if (parseFloat(invvsum) == 0) {\n                if (parseFloat(record?.[ec_ival_tot]) == 0) {\n                    NonLIFORANDOMModule(variable, NLFLO)\n                } else {\n                    record[fifo] = Math.round((parseFloat(record?.[ec_fifo]) / parseFloat(record?.[ec_ival_tot])) * parseFloat(record?.[ival_tot]))\n                    record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'H')\n                    record[avg] = Math.round((parseFloat(record?.[ec_avg]) / parseFloat(record?.[ec_ival_tot])) * parseFloat(record?.[ival_tot]))\n                    record[avg_f] = setCharAt(record?.[avg_f], 2, 'H')\n                    record[std] = Math.round((parseFloat(record?.[ec_std]) / parseFloat(record?.[ec_ival_tot])) * parseFloat(record?.[ival_tot]))\n                    record[std_f] = setCharAt(record?.[std_f], 2, 'H')\n                    record[othnl] = Math.round(parseFloat(record?.[ival_tot]) -\n                        (\n                            parseFloat(record?.[lifo]) + parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std])\n                        ))\n                    record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'H')\n                    EvaluateDetailValuationMethodsPathC(variable)\n                }\n            } else {\n                EvaluateNoNLIFOValuationMethod(variable)\n                EvaluateDetailValuationMethodsPathC(variable)\n            }\n        } else if (parseFloat(invvsum) == 0) {\n            if (parseFloat(record?.[lifo]) == parseFloat(record?.[ival_tot])) {\n                EvaluateDetailValuationMethodsPathA(variable)\n            } else {\n                record[lifo] = record?.[ival_tot]\n                record[lifo_f] = setCharAt(record?.[lifo_f], 2, 'L')\n                EvaluateDetailValuationMethodsPathA(variable)\n            }\n        } else {\n            record[fifo] = Math.round((parseFloat(record?.[fifo]) / parseFloat(invvsum)) * parseFloat(invdiff))\n            record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'K')\n\n            record[avg] = Math.round((parseFloat(record?.[ec_avg]) / parseFloat(invvsum)) * parseFloat(invdiff));\n            record[avg_f] = setCharAt(record?.[avg_f], 2, 'K');\n\n            record[std] = Math.round((parseFloat(record?.[ec_std]) / parseFloat(invvsum)) * parseFloat(invdiff));\n            record[std_f] = setCharAt(record?.[std_f], 2, 'K');\n\n            record[othnl] = Math.round(parseFloat(record?.[ival_tot]) - (parseFloat(record?.[lifo]) + parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std])));\n            record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'K');\n\n            EvaluateDetailValuationMethodsPathC(variable)\n        }\n    }\n\n\n    function EvaluateNoNLIFOValuationMethodsModulePathA(variable, INVVSUMx, NLFLO) {\n        let ival_tot = ''\n        let lifo = ''\n        if (variable == 'E') {\n            ival_tot = 'INV_E_IVAL_TOT_DVAL'\n            lifo = 'INV_E_LIFO_VAL'\n        } else if (variable == 'B') {\n            ival_tot = 'INV_B_IVAL_TOT_DVAL'\n            lifo = 'INV_B_LIFO_VAL'\n        }\n        var INVDIFFx = parseFloat(record?.[ival_tot]) - parseFloat(record?.[lifo])\n        EvaluateDetailValuationMethods(variable, NLFLO, INVVSUMx, INVDIFFx)\n    }\n\n    function EvaluateValuationMethods(variable, NLFLO) {\n        let avg = ''\n        let avg_f = ''\n        let fifo = ''\n        let fifo_f = ''\n        let std = ''\n        let std_f = ''\n        let othnl = ''\n        let othnl_f = ''\n        let tot = ''\n        let ival_tot = ''\n        let ival_tot_f = ''\n        let nl_tot = ''\n        let nl_tot_f = ''\n        let lifo = ''\n        let lifo_f = ''\n        let lifo_rsv = ''\n        let lifo_rsv_f = ''\n\n        if (variable == 'E') {\n            avg = 'INV_E_AVG_VAL'\n            avg_f = 'INV_E_AVG_VAL_F'\n            fifo = 'INV_E_FIFO_VAL'\n            fifo_f = 'INV_E_FIFO_VAL_F'\n            std = 'INV_E_STD_VAL'\n            std_f = 'INV_E_STD_VAL_F'\n            othnl = 'INV_E_OTHNL_VAL'\n            othnl_f = 'INV_E_OTHNL_VAL_F'\n            tot = 'INV_E_TOT_VAL'\n            ival_tot = 'INV_E_IVAL_TOT_DVAL'\n            ival_tot_f = 'INV_E_IVAL_TOT_DVAL_F'\n            nl_tot = 'INV_E_NL_TOT_DVAL'\n            nl_tot_f = 'INV_E_NL_TOT_DVAL_F'\n            lifo = 'INV_E_LIFO_VAL'\n            lifo_f = 'INV_E_LIFO_VAL_F'\n            lifo_rsv = 'INV_E_LIFO_RSV_VAL'\n            lifo_rsv_f = 'INV_E_LIFO_RSV_VAL_F'\n        } else if (variable == 'B') {\n            avg = 'INV_B_AVG_VAL'\n            avg_f = 'INV_B_AVG_VAL_F'\n            fifo = 'INV_B_FIFO_VAL'\n            fifo_f = 'INV_B_FIFO_VAL_F'\n            std = 'INV_B_STD_VAL'\n            std_f = 'INV_B_STD_VAL_F'\n            othnl = 'INV_B_OTHNL_VAL'\n            othnl_f = 'INV_B_OTHNL_VAL_F'\n            tot = 'INV_B_TOT_VAL'\n            ival_tot = 'INV_B_IVAL_TOT_DVAL'\n            ival_tot_f = 'INV_B_IVAL_TOT_DVAL_F'\n            nl_tot = 'INV_B_NL_TOT_DVAL'\n            nl_tot_f = 'INV_B_NL_TOT_DVAL_F'\n            lifo = 'INV_B_LIFO_VAL'\n            lifo_f = 'INV_B_LIFO_VAL_F'\n            lifo_rsv = 'INV_B_LIFO_RSV_VAL'\n            lifo_rsv_f = 'INV_B_LIFO_RSV_VAL_F'\n        }\n        var INVVSUMx = parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std]) + parseFloat(record?.[othnl])\n\n        if (parseInt(record?.[tot]) == 0) {\n            if ((parseFloat(record?.[lifo]) + parseFloat(record?.[fifo]) + parseFloat(record?.[avg]) + parseFloat(record?.[std]) + parseFloat(record?.[othnl]) + parseFloat(record?.[ival_tot]) + parseFloat(record?.[nl_tot])) > 0 || parseInt(record?.[lifo_rsv]) != 0) {\n                record[lifo] = 0;\n                record[lifo_f] = setCharAt(record?.[lifo_f], 2, 'Z');\n                record[fifo] = 0\n                record[fifo_f] = setCharAt(record?.[fifo_f], 2, 'Z');\n                record[avg] = 0;\n                record[avg_f] = setCharAt(record?.[avg_f], 2, 'Z');\n                record[std] = 0;\n                record[std_f] = setCharAt(record?.[std_f], 2, 'Z');\n                record[othnl] = 0;\n                record[othnl_f] = setCharAt(record?.[othnl_f], 2, 'Z');\n                record[ival_tot] = 0;\n                record[ival_tot_f] = setCharAt(record?.[ival_tot_f], 2, 'Z');\n                record[nl_tot] = 0;\n                record[nl_tot_f] = setCharAt(record?.[nl_tot_f], 2, 'Z');\n                record[lifo_rsv] = 0;\n                record[lifo_rsv_f] = setCharAt(record?.[lifo_rsv_f], 2, 'Z');\n            }\n\n        } else if (parseFloat(record?.[tot]) == parseFloat(record?.[ival_tot])) {\n            if (parseFloat(record?.[ival_tot]) == parseFloat(record?.[lifo]) + parseFloat(INVVSUMx)) {\n                if (parseFloat(record?.[nl_tot]) == parseFloat(INVVSUMx)) {\n                } else {\n                    record[nl_tot] = INVVSUMx\n                    record[nl_tot_f] = setCharAt(record?.[nl_tot_f], 2, 'L');\n                }\n            } else {\n                EvaluateNoNLIFOValuationMethodsModulePathA(variable, INVVSUMx, NLFLO)\n            }\n        } else {\n            record[ival_tot] = record[tot]\n            record[ival_tot_f] = setCharAt(record?.[ival_tot_f], 2, 'L')\n            EvaluateNoNLIFOValuationMethodsModulePathA(variable, INVVSUMx, NLFLO)\n        }\n    }\n    function EvaluateValuationMethodsModule() {\n        let NLFLO = 0\n        NLFLO = parseInt(Math.floor(Math.random() * 100))\n        if (NLFLO < 10) {\n            NLFLO = '0' + NLFLO\n        } else {\n            NLFLO = '' + NLFLO\n        }\n        EvaluateValuationMethods('B', NLFLO)\n        EvaluateValuationMethods('E', NLFLO)\n    }\n\n    function MIVInventoriesBalance() {\n        if (record?.NAICS_SECTOR == '31' && record?.SUBSAMP_IND_TXT != 'MC') {\n            LIFOValuationMethod()\n            EvaluateValuationMethodsModule()\n            if (record?.NAICS_SECTOR == '31' && record?.HISTSTAT == 'Y' && record?.INV_B_LIFO_VAL == record?.EV_INV_E_LIFO_VAL) {\n                if (record?.INV_B_LIFO_RSV_VAL == record?.EC_INV_E_LIFO_RSV_VAL) {\n                } else {\n                    record.INV_B_LIFO_RSV_VAL = record?.EC_INV_E_LIFO_RSV_VAL\n                    record.INV_B_LIFO_RSV_VAL_F = setCharAt(record.INV_B_LIFO_RSV_VAL_F, 2, 'J')\n                }\n                record.ACTION = 'Go To Main Routing'\n            } else {\n                record.ACTION = 'Go To Main Routing'\n            }\n        } else {\n            record.ACTION = 'Go To main Routing'\n        }\n\n    }\n\n    MIVInventoriesBalance()\n    return msg\n}catch(e){\n    return msg\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "7dbfcdc951fc4a9f",
        "type": "function",
        "z": "24afab78ca973c73",
        "name": "KAU To Company Additivity Check",
        "func": "function setCharAt(str, index, chr) {\n    if ([null, undefined].includes(str)) {\n        let newstr = ''\n        for (let i = 0; i < index; i++) {\n            newstr = newstr + ' ';\n        }\n        newstr = newstr + chr\n        return newstr;\n    } else {\n        if (index > str.length - 1) {\n            let addstr = index - str.length\n            let newstr = str\n            for (let i = 0; i < addstr; i++) {\n                newstr = newstr + ' ';\n            }\n            newstr = newstr + chr\n            return newstr;\n        } else {\n            return str.substring(0, index) + chr + str.substring(index + 1);\n        }\n    }\n}\n\nlet record_idx = global.get(\"ptrModuleFacts\");\nlet record = msg.payload.csv[record_idx];\n\nconst PAY_ANN_VAL = parseFloat(record['PAY_ANN_VAL'])\nconst PAY_ANN_PRDWRK_VAL = parseFloat(record['PAY_ANN_PRDWRK_VAL'])\nconst PAY_ANN_NONPRDWRK_VAL = parseFloat(record['PAY_ANN_NONPRDWRK_VAL'])\nconst EMP_MAR12_NUM = parseFloat(record['EMP_MAR12_NUM'])\nconst EMP_MAR12_PRDWRK_NUM = parseFloat(record['EMP_MAR12_PRDWRK_NUM'])\nconst EMP_MAR12_NONPRDWRK_NUM = parseFloat(record['EMP_MAR12_NONPRDWRK_NUM'])\nconst PAY_QTR1_VAL = parseFloat(record['PAY_QTR1_VAL'])\nconst PAY_QTR1_PRDWRK_VAL = parseFloat(record['PAY_QTR1_PRDWRK_VAL'])\nconst PAY_QTR1_NONPRDWRK_VAL = parseFloat(record['PAY_QTR1_NONPRDWRK_VAL'])\n\nif ((EMP_MAR12_PRDWRK_NUM + EMP_MAR12_NONPRDWRK_NUM == 0) && EMP_MAR12_NUM > 0) {\n    if (PAY_ANN_PRDWRK_VAL > 0 && PAY_ANN_NONPRDWRK_VAL > 0 && PAY_ANN_VAL > 0) {\n        record['EMP_MAR12_PRDWRK_NUM'] = Math.round((PAY_ANN_PRDWRK_VAL / PAY_ANN_VAL) * EMP_MAR12_NUM)\n        record['EMP_MAR12_NONPRDWRK_NUM'] = Math.round((PAY_ANN_NONPRDWRK_VAL / PAY_ANN_VAL) * EMP_MAR12_NUM)\n        record['EMP_MAR12_PRDWRK_NUM_F'] = setCharAt(record['EMP_MAR12_PRDWRK_NUM_F'], 2, 'J');\n        record['EMP_MAR12_NONPRDWRK_NUM_F'] = setCharAt(record['EMP_MAR12_NONPRDWRK_NUM_F'], 2, 'J');\n    } else if (PAY_QTR1_NONPRDWRK_VAL > 0 && PAY_QTR1_PRDWRK_VAL > 0 && PAY_QTR1_VAL > 0) {\n        record['EMP_MAR12_PRDWRK_NUM'] = Math.round((PAY_QTR1_PRDWRK_VAL / PAY_QTR1_VAL) * EMP_MAR12_NUM)\n        record['EMP_MAR12_NONPRDWRK_NUM'] = Math.round((PAY_QTR1_NONPRDWRK_VAL / PAY_QTR1_VAL) * EMP_MAR12_NUM)\n        record['EMP_MAR12_PRDWRK_NUM_F'] = setCharAt(record['EMP_MAR12_PRDWRK_NUM_F'], 2, 'J');\n        record['EMP_MAR12_NONPRDWRK_NUM_F'] = setCharAt(record['EMP_MAR12_NONPRDWRK_NUM_F'], 2, 'J');\n    } else {\n        record['EMP_MAR12_PRDWRK_NUM_F'] = setCharAt(record['EMP_MAR12_PRDWRK_NUM_F'], 2, 'X');\n        record['EMP_MAR12_NONPRDWRK_NUM_F'] = setCharAt(record['EMP_MAR12_NONPRDWRK_NUM_F'], 2, 'X');\n    }\n} else if ((EMP_MAR12_NONPRDWRK_NUM + EMP_MAR12_PRDWRK_NUM > 0) && EMP_MAR12_NUM > 0) {\n    if (EMP_MAR12_NONPRDWRK_NUM + EMP_MAR12_PRDWRK_NUM != EMP_MAR12_NUM) {\n        if (EMP_MAR12_PRDWRK_NUM == 0 && (EMP_MAR12_NONPRDWRK_NUM < EMP_MAR12_NUM)) {\n            record['EMP_MAR12_PRDWRK_NUM'] = EMP_MAR12_NUM - EMP_MAR12_NONPRDWRK_NUM\n            record['EMP_MAR12_PRDWRK_NUM_F'] = setCharAt(record['EMP_MAR12_PRDWRK_NUM_F'], 2, 'J');\n        } else if (EMP_MAR12_NONPRDWRK_NUM == 0 && (EMP_MAR12_PRDWRK_NUM < EMP_MAR12_NUM)) {\n            record['EMP_MAR12_NONPRDWRK_NUM'] = EMP_MAR12_NUM - EMP_MAR12_PRDWRK_NUM\n            record['EMP_MAR12_NONPRDWRK_NUM_F'] = setCharAt(record['EMP_MAR12_NONPRDWRK_NUM_F'], 2, 'J');\n        } else if (.8 <= (EMP_MAR12_PRDWRK_NUM + EMP_MAR12_NONPRDWRK_NUM) / EMP_MAR12_NUM &&\n            (EMP_MAR12_PRDWRK_NUM + EMP_MAR12_NONPRDWRK_NUM) / EMP_MAR12_NUM <= 1.2) {\n            const TEMP_DET_TOT = EMP_MAR12_PRDWRK_NUM + EMP_MAR12_NONPRDWRK_NUM\n            const TEMP_EMP_PRDWORK = Math.round((EMP_MAR12_PRDWRK_NUM / TEMP_DET_TOT) * EMP_MAR12_NUM)\n            const TEMP_EMP_NONPRDWORK = Math.round((EMP_MAR12_NONPRDWRK_NUM / TEMP_DET_TOT) * EMP_MAR12_NUM)\n            if (TEMP_EMP_PRDWORK + TEMP_EMP_NONPRDWORK == EMP_MAR12_NUM) {\n                record['EMP_MAR12_NONPRDWRK_NUM'] = TEMP_EMP_NONPRDWORK\n                record['EMP_MAR12_PRDWRK_NUM'] = TEMP_EMP_PRDWORK\n            } else if (TEMP_EMP_PRDWORK > TEMP_EMP_NONPRDWORK) {\n                record['EMP_MAR12_PRDWRK_NUM'] = TEMP_EMP_PRDWORK + Math.round(EMP_MAR12_NUM - TEMP_EMP_NONPRDWORK)\n                record['EMP_MAR12_PRDWRK_NUM_F'] = setCharAt(record['EMP_MAR12_PRDWRK_NUM_F'], 2, 'K');\n            } else {\n                record['EMP_MAR12_NONPRDWRK_NUM'] = TEMP_EMP_NONPRDWORK + Math.round(EMP_MAR12_NUM - TEMP_EMP_PRDWORK)\n                record['EMP_MAR12_NONPRDWRK_NUM_F'] = setCharAt(record['EMP_MAR12_NONPRDWRK_NUM_F'], 2, 'K');\n            }\n        } else {\n            record['EMP_MAR12_PRDWRK_NUM_F'] = setCharAt(record['EMP_MAR12_PRDWRK_NUM_F'], 2, 'X');\n            record['EMP_MAR12_NONPRDWRK_NUM_F'] = setCharAt(record['EMP_MAR12_NONPRDWRK_NUM_F'], 2, 'X');\n        }\n    }\n}\n\nrecord['ACTION'] = 'Go To: PAYQTR1'\n// global.set('action', 'Go To: PAYQTR1')\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "08eaf81ec10ed752",
        "type": "function",
        "z": "1a584bfe7f4a2458",
        "name": "load_referrals",
        "func": "try{\n    let record_idx = global.get(\"ptrModuleFacts\");\n    let record = msg.payload.csv[record_idx];\n\n    const setCharAt = (str, index, char) => {\n        if (index > str.length - 1) return str.padEnd(index, ' ') + char;\n        return str.substr(0, index) + char + str.substr(index + char.length);\n    };\n\n    msg.cache = global.get(\"lookupCache\")\n        .data.find(\n            item =>\n                item.module === \"flags\" &&\n                item.param === 'load_referrals' &&\n                item.program === \"aies\" &&\n                item.unit_type === \"all\"\n        )?.json_values;\n\n    var jsonData = msg.cache\n    var jsonD = jsonData.FLAGS\n\n    console.log('This is json', jsonData)\n    console.log('This is jsonD', jsonD)\n\n    function getDate() {\n        const date_1 = new Date().toJSON().replace('T', ' ');\n        const date1 = date_1.replace('Z', ' ');\n        console.log('system date', date1)\n        return date1\n    }\n\n    console.log('End date String ', jsonD[0].ENDDATE)\n\n    function endDate() {\n        for (let index = 0; index < jsonD.length; index++) {\n            console.log('The current index', jsonD[index].ENDDATE)\n            if (jsonD[index].ENDDATE === '01/01/1950') {\n                record.ENDDATE = getDate()\n            }\n            else {\n                break;\n            }\n        }\n    }\n\n    function refUpdate() {\n        endDate()\n        for (let index = 0; index < jsonD.length; index++) {\n            console.log('the current ref flag', jsonD[index].FLAG_NAME)\n            if (jsonD[index].FLAG_NAME === record.FLAG_NAME) {\n                record.BGNDATE = getDate()\n                record.ENDDATE = '01/01/1950'\n                pathB()\n            }\n            else {\n                record.REPORTING_ID = jsonD[index].REPORTING_ID\n                record.REF_PER = jsonD[index].REF_PER\n                record.FLAG_NAME = jsonD[index].FLAG_NAME\n                record.BGNDATE = getDate()\n                record.RECORD_TYP = jsonD[index].RECORD_TYP\n                if (record.NONTABFL === 'R') {\n                    record.CRITICAL = 'Y'\n                    pathB()\n                }\n                else {\n                    pathB()\n                }\n            }\n        }\n    }\n\n    function pathB() {\n        record['ACTION'] = 'More referral Flags to evaluate'\n        record['ACTION_1'] = 'This is path A'\n    }\n\n    refUpdate()\n    record['ACTION'] = 'Go to Post Edit Status fields'\n    msg.payload.csv[record_idx] = record\n    return msg;\n}catch(e){\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "d831e0513adcc48e",
        "type": "function",
        "z": "e7b7501b29427db9",
        "name": "napcs_prep function",
        "func": "try{\n    let record_idx = global.get(\"ptrModuleFacts\");\n    let record = msg.payload.csv[record_idx];\n\n    let cache = global.get(\"lookupCache\");\n    let naics_napcs = cache.data.find(\n        item =>\n            item.module === \"napcs\" &&\n            item.param === 'napcs_prep' &&\n            item.program === \"aies\" &&\n            item.unit_type === \"all\"\n    )?.json_values;\n\n    function resetNAPCS(row) {\n        if (row?.PROD_CODE) {\n            if (parseFloat(row?.PROD_CODE_VAL) == 0) {\n                row.USABLE = 'D'\n            } else if (parseFloat(row?.PROD_CODE_VAL) < 0) {\n                row.USABLE = 'I'\n            } else {\n                record.NAPCS_IND = 'U'\n                if (parseFloat(row?.PROD_CODE_VAL) > 0) {\n                    if (row?.PROD_CODE.substring(0, 7) == '9000000') {\n                        row.USABLE = 'J'\n                    } else {\n                        row.USABLE = 'U'\n                    }\n                }\n            }\n        }\n    }\n\n    function imputeHist() {\n        if (record?.NAPCS_IMP == 'Y') {\n            for (let i in allData) {\n                let row = allData[i]\n                if (row?.REPORTING_ID == id) {\n                    if (row?.PROD_CODE_VAL_F_PI && row?.PROD_CODE_VAL_F_PI.charAt(1) != ' ') {\n                        record.NAPCS_IMP = ' '\n                    } else if (row?.PROD_CODE && (!(row?.PROD_CODE_VAL_F_PI))) {\n                        record.NAPCS_IMP = ' '\n                    }\n                }\n            }\n        } else if (record?.NAPCS_IND == ' ') {\n            if (record?.HISTSTAT == 'Y' && record?.EC_NAPCS_IND == 'U' && record?.EC_NAPCS_BLTOT > 0 && record?.EC_RCPT_TOT_VAL > 0) {\n                for (let i in allData) {\n                    let row = allData[i]\n                    if (row?.EC_REPORTING_ID == id) {\n                        if (parseFloat(row?.EC_NAPCS_PROD_CODE_VAL) > 0) {\n                            if (['I', 'D', 'X'].includes(row?.EC_NAPCS_USABLE)) {\n                            } else {\n                                record.NAPCS_IMP = 'Y'\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    let id = record['REPORTING_ID']\n\n    let allData = msg.payload.csv;\n    let NAPCS_BLTOT = 0\n    let NAPCS_PRM = 0\n    let NAPCS_OTH = 0\n    let ProdFound = 'N'\n\n    if (record?.NAICS_SECTOR == '31' && record?.SUBSAMP_IND_TXT != 'MC') {\n        for (let i in allData) {\n            let row = allData[i]\n            if (row.REPORTING_ID == id) {\n                resetNAPCS(row)\n                if (row?.PROD_CODE) {\n                    ProdFound = 'Y'\n                }\n            }\n        }\n        if (ProdFound == 'N') {\n            record['NAPCS_IND'] = ' '\n        }\n\n        imputeHist()\n\n        let val_9000 = ''\n        for (let i in allData) {\n            let row = allData[i]\n            if (row.REPORTING_ID == id) {\n                if (row?.PROD_CODE) {\n                    if (['I', 'D', 'X'].includes(row?.USABLE)) {\n                    } else {\n                        if (row?.PROD_CODE.substring(7, 10) == '000') {\n                            NAPCS_BLTOT = NAPCS_BLTOT + parseFloat(row?.PROD_CODE_VAL)\n                        }\n                        if (row?.PROD_CODE.substring(0, 1) == '2') {\n                            NAPCS_PRM = NAPCS_PRM + parseFloat(row?.PROD_CODE_VAL)\n                        }\n                        if (row?.PROD_CODE.substring(0, 1) != '2') {\n                            if (row.PROD_CODE.substring(0, 7) == '9000000') {\n                            } else {\n                                NAPCS_OTH = NAPCS_OTH + parseFloat(row?.PROD_CODE_VAL)\n                            }\n                        }\n                        let napcs = naics_napcs.NAPCS_PREP.some(element => (parseInt(element.NAPCS) === parseInt(row?.PROD_CODE)));\n                        if (napcs) {\n                        } else {\n                            row.USABLE = 'I'\n                        }\n                    }\n                    if (row?.PROD_CODE == '9000000000') {\n                        val_9000 = row?.PROD_CODE_VAL\n                    }\n                }\n            }\n        }\n\n        record['NAPCS_BLTOT'] = NAPCS_BLTOT\n        record['NAPCS_BAL'] = parseFloat(record?.RCPT_TOT_VAL) - NAPCS_BLTOT\n        record['NAPCS_PRM'] = NAPCS_PRM\n        record['NAPCS_OTH'] = NAPCS_OTH\n\n        if (val_9000 != '') {\n            if (parseFloat(val_9000) > (parseFloat(NAPCS_BLTOT) - parseFloat(val_9000))) {\n                record['FLAG'] = 'WRITEIN_IND_DETER'\n            }\n        }\n\n        record.ACTION = 'END'\n    } else {\n        record.ACTION = 'Go to Main Routing'\n    }\n\n    return msg;\n}catch(e){\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "9a7a7971.dbc4b8",
        "type": "inject",
        "z": "67991373.45438c",
        "g": "19463268a6c67561",
        "name": "Inject Filename",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "/Users/revealgc/Desktop/4testMOD.csv",
        "payloadType": "str",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "1e5beed02674863a"
            ]
        ],
        "outputLabels": [
            "Send Time"
        ]
    },
    {
        "id": "1e5beed02674863a",
        "type": "ui_text_input",
        "z": "67991373.45438c",
        "g": "19463268a6c67561",
        "name": "Input Parameter File Name",
        "label": "Params file...",
        "tooltip": "Enter the location of the parameters file",
        "group": "d5b306fd70950040",
        "order": 2,
        "width": 15,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 440,
        "y": 140,
        "wires": [
            [
                "b5c53653a76681bf"
            ]
        ]
    },
    {
        "id": "97cb22c43553888b",
        "type": "comment",
        "z": "67991373.45438c",
        "g": "62708d0bbe922798",
        "name": "Fact from files",
        "info": "# Facts CSV File ",
        "x": 910,
        "y": 800,
        "wires": []
    },
    {
        "id": "b5c53653a76681bf",
        "type": "subflow:82cc831b154f3133",
        "z": "67991373.45438c",
        "g": "19463268a6c67561",
        "name": "",
        "x": 800,
        "y": 140,
        "wires": [
            [
                "06db3e224b379422"
            ]
        ]
    },
    {
        "id": "04f3b0fb456d2117",
        "type": "ui_text_input",
        "z": "67991373.45438c",
        "g": "62708d0bbe922798",
        "name": "Input Dataset File Name",
        "label": "Facts",
        "tooltip": "Enter the location of the parameters file",
        "group": "1f86b2145e7e556a",
        "order": 2,
        "width": 15,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 370,
        "y": 600,
        "wires": [
            [
                "100234cf93c195b8"
            ]
        ]
    },
    {
        "id": "100234cf93c195b8",
        "type": "file in",
        "z": "67991373.45438c",
        "g": "62708d0bbe922798",
        "name": "Read File",
        "filename": "payload",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 580,
        "y": 600,
        "wires": [
            [
                "c047c871d9c0e70d"
            ]
        ]
    },
    {
        "id": "c047c871d9c0e70d",
        "type": "csv",
        "z": "67991373.45438c",
        "g": "62708d0bbe922798",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\r\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 730,
        "y": 600,
        "wires": [
            [
                "c9c9ca415ab95910",
                "58df41cd8e54a653"
            ]
        ]
    },
    {
        "id": "c9c9ca415ab95910",
        "type": "function",
        "z": "67991373.45438c",
        "g": "62708d0bbe922798",
        "name": "Save Facts from file",
        "func": "let facts = {}\nmsg.payload.map((r, k) => {\n    facts = {...facts, ...{[r['name']]: r['value']}}\n})\n\nflow.set(\"facts\", facts)\n\n\nmsg.facts = msg.payload\nmsg.payload = [facts]\n\n\n\nmsg.topic = \"facts\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 600,
        "wires": [
            [
                "571a7beaed3ab093"
            ]
        ]
    },
    {
        "id": "16550455147cd747",
        "type": "ui_table",
        "z": "67991373.45438c",
        "g": "62708d0bbe922798",
        "group": "134f09c88dd005fc",
        "name": "4. Facts",
        "order": 1,
        "width": 24,
        "height": 4,
        "columns": [
            {
                "field": "rule.event.ruleId",
                "title": "Row",
                "width": "80",
                "align": "left",
                "formatter": "rownum",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "name",
                "title": "Name",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "value",
                "title": "Value",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1240,
        "y": 640,
        "wires": []
    },
    {
        "id": "211d46862546b6bf",
        "type": "inject",
        "z": "67991373.45438c",
        "g": "62708d0bbe922798",
        "name": "FileName Inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "/Users/revealgc/Desktop/factsToTest.csv",
        "payloadType": "str",
        "x": 140,
        "y": 600,
        "wires": [
            [
                "04f3b0fb456d2117"
            ]
        ],
        "outputLabels": [
            "Send Time"
        ]
    },
    {
        "id": "571a7beaed3ab093",
        "type": "change",
        "z": "67991373.45438c",
        "g": "62708d0bbe922798",
        "name": "Enable ",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "facts",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "value",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 600,
        "wires": [
            [
                "16550455147cd747",
                "24856db77f81d8bb",
                "21a2308db46311bb"
            ]
        ]
    },
    {
        "id": "fb483894819a453e",
        "type": "http request",
        "z": "67991373.45438c",
        "g": "ef50b77b253a7883",
        "name": "Get Rule Types from DB",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost/rulesrepo/getruletype",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 410,
        "y": 340,
        "wires": [
            [
                "79f4bff451119fb7"
            ]
        ]
    },
    {
        "id": "5f12a638967ad520",
        "type": "inject",
        "z": "67991373.45438c",
        "g": "ef50b77b253a7883",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 380,
        "wires": [
            [
                "fb483894819a453e"
            ]
        ]
    },
    {
        "id": "199e84df3d73b845",
        "type": "ui_dropdown",
        "z": "67991373.45438c",
        "g": "ef50b77b253a7883",
        "name": "Rule Types Drop Down Topic: validationTopic",
        "label": "",
        "tooltip": "Select rule types",
        "place": "Select rule types from the db...",
        "group": "d5b306fd70950040",
        "order": 4,
        "width": 12,
        "height": 1,
        "passthru": true,
        "multiple": true,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "validationType",
        "topicType": "str",
        "className": "",
        "x": 1190,
        "y": 340,
        "wires": [
            [
                "739c4193fa8fce2c"
            ]
        ]
    },
    {
        "id": "79f4bff451119fb7",
        "type": "function",
        "z": "67991373.45438c",
        "g": "ef50b77b253a7883",
        "name": "Prep for DB Rules Dropdown Topic:dbruletypes",
        "func": "let ret = []\nmsg.payload.map(t => ret.push({ [t.type + '(' + t.cnt +')']: t.type}))\nmsg.options = ret\nmsg.payload = ret\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 340,
        "wires": [
            [
                "199e84df3d73b845"
            ]
        ]
    },
    {
        "id": "645a9d4772fcd00f",
        "type": "ui_button",
        "z": "67991373.45438c",
        "g": "ef50b77b253a7883",
        "name": "",
        "group": "d5b306fd70950040",
        "order": 5,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Get Rules",
        "tooltip": "Get rule types",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-database",
        "payload": "dbrules",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 100,
        "y": 280,
        "wires": [
            [
                "fb483894819a453e"
            ]
        ]
    },
    {
        "id": "24856db77f81d8bb",
        "type": "ui_gauge",
        "z": "67991373.45438c",
        "g": "62708d0bbe922798",
        "name": "Gauge for Facts from file",
        "group": "4060ccd3b1b979fd",
        "order": 4,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Facts",
        "label": "units",
        "format": "{{msg.payload.length}}",
        "min": 0,
        "max": "300",
        "colors": [
            "#0d0b96",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1290,
        "y": 560,
        "wires": []
    },
    {
        "id": "0cd9973f643e23da",
        "type": "ui_text_input",
        "z": "67991373.45438c",
        "g": "c0b83f35fdc02130",
        "name": "Input RID",
        "label": "Reporting IDs",
        "tooltip": "Enter at least 3 characters",
        "group": "1f86b2145e7e556a",
        "order": 5,
        "width": 5,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 100,
        "y": 980,
        "wires": [
            [
                "3b55370ad9fd31f5"
            ]
        ]
    },
    {
        "id": "3b55370ad9fd31f5",
        "type": "http request",
        "z": "67991373.45438c",
        "g": "c0b83f35fdc02130",
        "name": "Get RIDs from DB",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost/reporting_unit/findRID/{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-JBID",
                "valueType": "other",
                "valueValue": "kapoo"
            },
            {
                "keyType": "other",
                "keyValue": "X-API-KEY",
                "valueType": "other",
                "valueValue": "x5nDCpvGTkvHniq8wJ9m"
            }
        ],
        "x": 330,
        "y": 980,
        "wires": [
            [
                "7ce52ec9ef003b44"
            ]
        ]
    },
    {
        "id": "e76e13639b1f0475",
        "type": "ui_dropdown",
        "z": "67991373.45438c",
        "g": "c0b83f35fdc02130",
        "name": "Rule Types Drop Down Topic: dbreportingids",
        "label": "",
        "tooltip": "Select reporting ids...",
        "place": "Select reporting ids from the db...",
        "group": "1f86b2145e7e556a",
        "order": 4,
        "width": 10,
        "height": 1,
        "passthru": false,
        "multiple": true,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "dbreportingids",
        "topicType": "msg",
        "className": "",
        "x": 1050,
        "y": 980,
        "wires": [
            [
                "d394b61bcc4755e6"
            ]
        ]
    },
    {
        "id": "7ce52ec9ef003b44",
        "type": "function",
        "z": "67991373.45438c",
        "g": "c0b83f35fdc02130",
        "name": "Prep for RID Dropdown Topic:dbreportingids",
        "func": "let ret = []\n msg.payload.map(t => ret.push({ [t.shortvalue + \" \"+ t.reporting_id]: t.reporting_id}))\nmsg.options = ret\nmsg.payload = ret\nmsg.topic = \"dbreportingids\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 980,
        "wires": [
            [
                "e76e13639b1f0475"
            ]
        ]
    },
    {
        "id": "d394b61bcc4755e6",
        "type": "function",
        "z": "67991373.45438c",
        "g": "c0b83f35fdc02130",
        "name": "Save Reporting IDs",
        "func": "let rid = msg.payload\nmsg.reporting_id = msg.payload\nflow.set(\"reporting_id\", rid)\nmsg.payload = rid.length > 0\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 980,
        "wires": [
            [
                "f45097235bf5254d",
                "b50c075944f35652"
            ]
        ]
    },
    {
        "id": "1e61b63c0502b4e9",
        "type": "debug",
        "z": "67991373.45438c",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2600,
        "y": 880,
        "wires": []
    },
    {
        "id": "044139040f928c41",
        "type": "debug",
        "z": "67991373.45438c",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2400,
        "y": 740,
        "wires": []
    },
    {
        "id": "8c1b098c01bc4977",
        "type": "ui_switch",
        "z": "67991373.45438c",
        "name": "cb_ff",
        "label": "",
        "tooltip": "",
        "group": "1f86b2145e7e556a",
        "order": 1,
        "width": 1,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "cb_ff",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 2050,
        "y": 600,
        "wires": [
            [
                "fd562624ab71790e"
            ]
        ]
    },
    {
        "id": "5f1b840d2df55385",
        "type": "function",
        "z": "67991373.45438c",
        "name": "Save checkboxes",
        "func": "let P = msg.payload\n\n// Save Checkboxes\n\nflow.set(\"cb_ff\", P.cb_ff)\n\nflow.set(\"cb_fd\", P.cb_fd)\nflow.set(\"cb_rf\", P.cb_rf)\nflow.set(\"cb_rd\", P.cb_rd)\n\nflow.set(\"cb_network\", P.cb_network)\nflow.set(\"cb_attached\", P.cb_attached)\n\n\n// rules and facts must be from either files or db\nmsg.payload = (P.cb_ff || P.cb_fd) && (P.cb_rf || P.cb_rd)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 820,
        "wires": [
            [
                "1e61b63c0502b4e9",
                "dfb61e11af38dafd"
            ]
        ]
    },
    {
        "id": "f45097235bf5254d",
        "type": "ui_switch",
        "z": "67991373.45438c",
        "name": "cb_fd",
        "label": "",
        "tooltip": "",
        "group": "1f86b2145e7e556a",
        "order": 3,
        "width": 1,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "cb_fd",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 2010,
        "y": 980,
        "wires": [
            [
                "fd562624ab71790e"
            ]
        ]
    },
    {
        "id": "7068b9cdbaed7677",
        "type": "function",
        "z": "67991373.45438c",
        "name": "Reset all",
        "func": "flow.set(\"rules\",[])\nflow.set(\"facts\", {})\nflow.set(\"reporting_id\", {})\nflow.set(\"validationType\", {})\n\n\nflow.set(\"cb_attached\", false)\n\nflow.set(\"cb_network\", false)\n\n\n flow.set('cb_ff', false)\nflow.set('cb_fd', false)\n\nflow.set('cb_rf', false)\nflow.set('cb_rd', false)\nmsg.payload = false\n\nmsg.enabled = false",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2400,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "fd562624ab71790e",
        "type": "join",
        "z": "67991373.45438c",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 2250,
        "y": 820,
        "wires": [
            [
                "5f1b840d2df55385",
                "044139040f928c41"
            ]
        ]
    },
    {
        "id": "ef78548912a4d7aa",
        "type": "ui_switch",
        "z": "67991373.45438c",
        "name": "cb_rf",
        "label": "",
        "tooltip": "",
        "group": "d5b306fd70950040",
        "order": 1,
        "width": 1,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "cb_rf",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 2050,
        "y": 140,
        "wires": [
            [
                "fd562624ab71790e"
            ]
        ]
    },
    {
        "id": "9a41aca46f8e70f2",
        "type": "ui_switch",
        "z": "67991373.45438c",
        "name": "cb_rd",
        "label": "",
        "tooltip": "",
        "group": "d5b306fd70950040",
        "order": 3,
        "width": 1,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "cb_rd",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 2050,
        "y": 340,
        "wires": [
            [
                "fd562624ab71790e"
            ]
        ]
    },
    {
        "id": "7f5231b4f331e49b",
        "type": "ui_switch",
        "z": "67991373.45438c",
        "name": "",
        "label": "Network",
        "tooltip": "",
        "group": "779fdd53a3120890",
        "order": 2,
        "width": 8,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "cb_network",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 2060,
        "y": 1200,
        "wires": [
            [
                "fd562624ab71790e"
            ]
        ]
    },
    {
        "id": "ba7a7633a548b05b",
        "type": "ui_switch",
        "z": "67991373.45438c",
        "name": "",
        "label": "Attached",
        "tooltip": "",
        "group": "779fdd53a3120890",
        "order": 1,
        "width": 8,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "cb_attached",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 2040,
        "y": 1080,
        "wires": [
            [
                "fd562624ab71790e"
            ]
        ]
    },
    {
        "id": "48fe92c3d9b4d8bb",
        "type": "ui_button",
        "z": "67991373.45438c",
        "name": "",
        "group": "779fdd53a3120890",
        "order": 3,
        "width": 8,
        "height": 1,
        "passthru": false,
        "label": "Submit JOB",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-tasks",
        "payload": "DONE",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 3010,
        "y": 820,
        "wires": [
            [
                "73055769ca44b5f7"
            ]
        ]
    },
    {
        "id": "dfb61e11af38dafd",
        "type": "function",
        "z": "67991373.45438c",
        "name": "Enable or Disable Submit JOB button",
        "func": "msg.enabled = msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2750,
        "y": 820,
        "wires": [
            [
                "48fe92c3d9b4d8bb"
            ]
        ]
    },
    {
        "id": "06db3e224b379422",
        "type": "function",
        "z": "67991373.45438c",
        "g": "19463268a6c67561",
        "name": "Save RULES and Radio Button(rf)",
        "func": "\n\nlet rules = []\n\nmsg.payload.results.map(r => rules.push(r.rule))\nflow.set(\"rules\", rules)\n\nmsg.payload = !(msg.payload.outputErrorCount > 0)\nmsg.enabled = !(msg.payload.outputErrorCount > 0)\n\nmsg.disabled = true\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 140,
        "wires": [
            [
                "ef78548912a4d7aa",
                "2496a0361619e895"
            ]
        ]
    },
    {
        "id": "1e3847f427e4c74f",
        "type": "ui_button",
        "z": "67991373.45438c",
        "name": "",
        "group": "779fdd53a3120890",
        "order": 4,
        "width": 8,
        "height": 1,
        "passthru": true,
        "label": "Reset",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-circle-o",
        "payload": "false",
        "payloadType": "bool",
        "topic": "",
        "topicType": "str",
        "x": 1910,
        "y": 1700,
        "wires": [
            [
                "8701991a4839bab8",
                "b2a8b14d99432a2d",
                "cbbf5c9004d0946e",
                "30dce0e234d60286",
                "c3a24bb78c2a2175",
                "9db5fcbd4b1fd8c3",
                "093e4ef6e2a39496",
                "d67e28129722d643",
                "5d9d0ae34f31c5f4"
            ]
        ]
    },
    {
        "id": "21a2308db46311bb",
        "type": "function",
        "z": "67991373.45438c",
        "g": "62708d0bbe922798",
        "name": "Change payload to true",
        "func": "msg.payload = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 600,
        "wires": [
            [
                "8c1b098c01bc4977"
            ]
        ]
    },
    {
        "id": "b87799331653cd82",
        "type": "subflow:8d5b6ce343b26ccf",
        "z": "67991373.45438c",
        "name": "",
        "x": 4600,
        "y": 820,
        "wires": []
    },
    {
        "id": "58df41cd8e54a653",
        "type": "debug",
        "z": "67991373.45438c",
        "g": "62708d0bbe922798",
        "name": "debug 21",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 640,
        "wires": []
    },
    {
        "id": "73055769ca44b5f7",
        "type": "function",
        "z": "67991373.45438c",
        "name": "Save QBES Payload",
        "func": "// workflow id will default to 0 if not provided. It corresponds to the spad.id db col.\n// \nlet reporting_id = flow.get(\"reporting_id\")// parseInt(flow.get(\"reporting_id\") || 2002865554)\nflow.set(\"startTime\", new Date().toLocaleString())\n// Save Checkboxes\n\nlet cb_ff = flow.get(\"cb_ff\")\nlet cb_fd = flow.get(\"cb_fd\")\n\nlet cb_rf = flow.get(\"cb_rf\")\nlet cb_rd = flow.get(\"cb_rd\")\n\n\nlet cb_network = flow.get(\"cb_network\") || true\nlet cb_attached = flow.get(\"cb_attached\") || false\n\n\nlet facts = (cb_ff) ? [flow.get(\"facts\")] : []\nlet rules = (cb_rf) ? flow.get(\"rules\") :[]\nlet attended = cb_attached\nlet showNetwork = cb_network\n\nlet QBESpayload = {\n    facts,     \n    rules, \n    attended, \n    showNetwork,\n    ruleType: (flow.get(\"validationType\")) || [],\n    parent_id: flow.get(\"workFlowId\") || 0,\n    reporting_id\n}\nflow.set(\"QBESPayload\",QBESpayload)\nmsg.payload = QBESpayload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3220,
        "y": 820,
        "wires": [
            [
                "f87a1ec1239428aa",
                "bdf7069659cda7af"
            ]
        ]
    },
    {
        "id": "2d31a9cbb8b25e8f",
        "type": "debug",
        "z": "67991373.45438c",
        "name": "debug 23",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4340,
        "y": 340,
        "wires": []
    },
    {
        "id": "8701991a4839bab8",
        "type": "link out",
        "z": "67991373.45438c",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "889e30d476808397"
        ],
        "x": 2135,
        "y": 1960,
        "wires": []
    },
    {
        "id": "889e30d476808397",
        "type": "link in",
        "z": "67991373.45438c",
        "name": "link in 1",
        "links": [
            "8701991a4839bab8"
        ],
        "x": 1965,
        "y": 300,
        "wires": [
            [
                "9a41aca46f8e70f2"
            ]
        ]
    },
    {
        "id": "b2a8b14d99432a2d",
        "type": "link out",
        "z": "67991373.45438c",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "24e108b562edc235"
        ],
        "x": 2135,
        "y": 1780,
        "wires": []
    },
    {
        "id": "24e108b562edc235",
        "type": "link in",
        "z": "67991373.45438c",
        "name": "link in 2",
        "links": [
            "b2a8b14d99432a2d"
        ],
        "x": 1965,
        "y": 100,
        "wires": [
            [
                "ef78548912a4d7aa"
            ]
        ]
    },
    {
        "id": "cbbf5c9004d0946e",
        "type": "link out",
        "z": "67991373.45438c",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "4e7718304bce05d2"
        ],
        "x": 2145,
        "y": 1560,
        "wires": []
    },
    {
        "id": "4e7718304bce05d2",
        "type": "link in",
        "z": "67991373.45438c",
        "name": "link in 3",
        "links": [
            "cbbf5c9004d0946e"
        ],
        "x": 2575,
        "y": 780,
        "wires": [
            [
                "dfb61e11af38dafd"
            ]
        ]
    },
    {
        "id": "30dce0e234d60286",
        "type": "link out",
        "z": "67991373.45438c",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "5b50d2fc0efaeade"
        ],
        "x": 2145,
        "y": 1640,
        "wires": []
    },
    {
        "id": "5b50d2fc0efaeade",
        "type": "link in",
        "z": "67991373.45438c",
        "name": "link in 4",
        "links": [
            "30dce0e234d60286"
        ],
        "x": 2295,
        "y": 1780,
        "wires": [
            [
                "7068b9cdbaed7677"
            ]
        ]
    },
    {
        "id": "c3a24bb78c2a2175",
        "type": "link out",
        "z": "67991373.45438c",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "fc93792ff8aaff26"
        ],
        "x": 2135,
        "y": 1720,
        "wires": []
    },
    {
        "id": "fc93792ff8aaff26",
        "type": "link in",
        "z": "67991373.45438c",
        "name": "link in 5",
        "links": [
            "c3a24bb78c2a2175"
        ],
        "x": 1965,
        "y": 560,
        "wires": [
            [
                "8c1b098c01bc4977"
            ]
        ]
    },
    {
        "id": "9db5fcbd4b1fd8c3",
        "type": "link out",
        "z": "67991373.45438c",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "5c24e7ac5f83708c"
        ],
        "x": 2145,
        "y": 1600,
        "wires": []
    },
    {
        "id": "5c24e7ac5f83708c",
        "type": "link in",
        "z": "67991373.45438c",
        "name": "link in 6",
        "links": [
            "9db5fcbd4b1fd8c3"
        ],
        "x": 1955,
        "y": 1040,
        "wires": [
            [
                "ba7a7633a548b05b"
            ]
        ]
    },
    {
        "id": "093e4ef6e2a39496",
        "type": "link out",
        "z": "67991373.45438c",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "d2bbd2904874d7a2"
        ],
        "x": 2145,
        "y": 1680,
        "wires": []
    },
    {
        "id": "d2bbd2904874d7a2",
        "type": "link in",
        "z": "67991373.45438c",
        "name": "link in 7",
        "links": [
            "093e4ef6e2a39496"
        ],
        "x": 1955,
        "y": 1160,
        "wires": [
            [
                "7f5231b4f331e49b"
            ]
        ]
    },
    {
        "id": "d67e28129722d643",
        "type": "link out",
        "z": "67991373.45438c",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "5561391c72b77ec4"
        ],
        "x": 2135,
        "y": 1840,
        "wires": []
    },
    {
        "id": "5561391c72b77ec4",
        "type": "link in",
        "z": "67991373.45438c",
        "name": "link in 8",
        "links": [
            "d67e28129722d643"
        ],
        "x": 1935,
        "y": 940,
        "wires": [
            [
                "f45097235bf5254d"
            ]
        ]
    },
    {
        "id": "739c4193fa8fce2c",
        "type": "function",
        "z": "67991373.45438c",
        "g": "ef50b77b253a7883",
        "name": "Save Validation Type and Radio Button(rd)",
        "func": "flow.set(\"validationType\", msg.payload)\nmsg.payload = msg.payload.length > 0 \nmsg.enabled = !(msg.payload.length > 0 )\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 340,
        "wires": [
            [
                "9a41aca46f8e70f2"
            ]
        ]
    },
    {
        "id": "3af468cd9306ec3e",
        "type": "debug",
        "z": "67991373.45438c",
        "name": "Output from QBES",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4110,
        "y": 1000,
        "wires": []
    },
    {
        "id": "d7f2fcd5e791ba92",
        "type": "http request",
        "z": "67991373.45438c",
        "name": "Post: ProcessRules ",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost/spad/processRules",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-JBID",
                "valueType": "other",
                "valueValue": "kapoo"
            },
            {
                "keyType": "other",
                "keyValue": "X-API-KEY",
                "valueType": "other",
                "valueValue": "x5nDCpvGTkvHniq8wJ9m"
            },
            {
                "keyType": "other",
                "keyValue": "DEBUG",
                "valueType": "other",
                "valueValue": "true"
            }
        ],
        "x": 3850,
        "y": 820,
        "wires": [
            [
                "3af468cd9306ec3e",
                "711f05a68cde98f5"
            ]
        ]
    },
    {
        "id": "711f05a68cde98f5",
        "type": "function",
        "z": "67991373.45438c",
        "name": "Send to log the output of the results",
        "func": "let messages = []\n\nlet P = msg.payload\nif(P.rules) {\n    P.rules.valid.map(p=> messages.push({ruleId: p.id, message: p.message}))\n    msg.payload = {\n        wflid: msg.payload.workflowId,\n        passed: msg.payload.rules.valid.length,\n        failed: msg.payload.rules.invalid.length,\n        messages,\n        startTime: flow.get(\"startTime\"),\n        endTime: new Date().toLocaleString()\n\n    }\n} \n// else {\n//     msg.payload = {\n//         wflid: msg.payload.workflowId,\n//         startTime: flow.get(\"startTime\"),\n//         endTime: new Date().toLocaleString()\n\n//     }\n// }\nmsg.topic = \"QBES Output\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4210,
        "y": 820,
        "wires": [
            [
                "b87799331653cd82",
                "652ea1d3b066becc"
            ]
        ]
    },
    {
        "id": "5d9d0ae34f31c5f4",
        "type": "link out",
        "z": "67991373.45438c",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "d587f5de3f4014c8"
        ],
        "x": 2135,
        "y": 1900,
        "wires": []
    },
    {
        "id": "d587f5de3f4014c8",
        "type": "link in",
        "z": "67991373.45438c",
        "g": "ef50b77b253a7883",
        "name": "link in 9",
        "links": [
            "5d9d0ae34f31c5f4"
        ],
        "x": 265,
        "y": 280,
        "wires": [
            [
                "fb483894819a453e"
            ]
        ]
    },
    {
        "id": "d445d2aa213681e6",
        "type": "http in",
        "z": "67991373.45438c",
        "name": "Test Input Point",
        "url": "/test",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1360,
        "y": 1360,
        "wires": [
            [
                "077745dd4456572b",
                "4de57f6bb5f38231"
            ]
        ]
    },
    {
        "id": "7e3f13f11c3166e4",
        "type": "debug",
        "z": "67991373.45438c",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1900,
        "y": 1360,
        "wires": []
    },
    {
        "id": "077745dd4456572b",
        "type": "function",
        "z": "67991373.45438c",
        "name": "function 7",
        "func": "msg.payload = \"Service called\"\nmsg.statusCode = 200\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 1360,
        "wires": [
            [
                "7e3f13f11c3166e4",
                "1e3847f427e4c74f"
            ]
        ]
    },
    {
        "id": "24a6d577acd5cbc7",
        "type": "catch",
        "z": "67991373.45438c",
        "name": "Catch read file errors",
        "scope": null,
        "uncaught": false,
        "x": 220,
        "y": 1180,
        "wires": [
            [
                "c3c54ddc39435b68"
            ]
        ]
    },
    {
        "id": "4fab4477a5dae9fd",
        "type": "ui_toast",
        "z": "67991373.45438c",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 610,
        "y": 1160,
        "wires": []
    },
    {
        "id": "c3c54ddc39435b68",
        "type": "function",
        "z": "67991373.45438c",
        "name": "function 8",
        "func": "msg.payload = msg.error.message\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1180,
        "wires": [
            [
                "4fab4477a5dae9fd",
                "3edc4444ae0d428e"
            ]
        ]
    },
    {
        "id": "3edc4444ae0d428e",
        "type": "debug",
        "z": "67991373.45438c",
        "name": "debug 26",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 1200,
        "wires": []
    },
    {
        "id": "96facefabfa129ae",
        "type": "inject",
        "z": "67991373.45438c",
        "name": "Inject a reporting ID",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "reporting_id",
                "v": "3010013214",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3010013214",
        "payloadType": "num",
        "x": 830,
        "y": 1100,
        "wires": [
            [
                "b50c075944f35652"
            ]
        ]
    },
    {
        "id": "29e5403351fd72d9",
        "type": "debug",
        "z": "67991373.45438c",
        "name": "debug 28",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 1280,
        "wires": []
    },
    {
        "id": "b50c075944f35652",
        "type": "http request",
        "z": "67991373.45438c",
        "name": "API Get Facts by RID",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost/rulesrepo/factsandrules/{{{reporting_id}}}?DEBUG=true",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-JBID",
                "valueType": "other",
                "valueValue": "kapoo"
            },
            {
                "keyType": "other",
                "keyValue": "X-API-KEY",
                "valueType": "other",
                "valueValue": "x5nDCpvGTkvHniq8wJ9m"
            }
        ],
        "x": 1280,
        "y": 1100,
        "wires": [
            [
                "29e5403351fd72d9"
            ]
        ]
    },
    {
        "id": "2a1010c6c72b92ee",
        "type": "ui_toast",
        "z": "67991373.45438c",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Show Job is submitted",
        "x": 3610,
        "y": 1180,
        "wires": []
    },
    {
        "id": "f87a1ec1239428aa",
        "type": "function",
        "z": "67991373.45438c",
        "name": "Job Submitted",
        "func": "msg.payload = 'Job Submitted at: '+ new Date().toLocaleString()\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3400,
        "y": 1080,
        "wires": [
            [
                "2a1010c6c72b92ee"
            ]
        ]
    },
    {
        "id": "4de57f6bb5f38231",
        "type": "http response",
        "z": "67991373.45438c",
        "name": "Send Response Back",
        "statusCode": "msg.statusCode",
        "headers": {
            "status": "200"
        },
        "x": 1640,
        "y": 1700,
        "wires": []
    },
    {
        "id": "2496a0361619e895",
        "type": "ui_button",
        "z": "67991373.45438c",
        "name": "",
        "group": "18a5a593fcd64912",
        "order": 2,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Save Rules",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "Ready to Save Rules",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1510,
        "y": 40,
        "wires": [
            [
                "097b7c36f8623668",
                "9cdda70a448f80e0"
            ]
        ]
    },
    {
        "id": "967038b5dc63123e",
        "type": "debug",
        "z": "67991373.45438c",
        "name": "debug 35",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2220,
        "y": 40,
        "wires": []
    },
    {
        "id": "9cdda70a448f80e0",
        "type": "function",
        "z": "67991373.45438c",
        "name": "getrules ready for saving from params file",
        "func": "let rules = flow.get(\"rules\")\nlet rA = []\nrules.map((r) => {\n    let name = (r.event.name || \"Dynamic Rule\") + \": \"+r.event.ruleId\n    let description = name\n    \n    r.event.ruleId = \"0\"\n    r.event.type = \"0\"\n    r.event.eventType = \"impute\"\n    \n    \n\n    rA.push({ parsed_rule: r, data: r, name, description, id: 0 })\n})\n\nmsg.payload = {data:rA}\n\n// Send it to the backend for future processing\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1940,
        "y": 40,
        "wires": [
            [
                "967038b5dc63123e",
                "14d9e7a93f3dd56a"
            ]
        ]
    },
    {
        "id": "14d9e7a93f3dd56a",
        "type": "http request",
        "z": "67991373.45438c",
        "name": "Post: Save an array of rules",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost/rulesrepo/new/parsedrules/0",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-JBID",
                "valueType": "other",
                "valueValue": "kapoo"
            },
            {
                "keyType": "other",
                "keyValue": "X-API-KEY",
                "valueType": "other",
                "valueValue": "x5nDCpvGTkvHniq8wJ9m"
            },
            {
                "keyType": "other",
                "keyValue": "DEBUG",
                "valueType": "other",
                "valueValue": "true"
            }
        ],
        "x": 2380,
        "y": 160,
        "wires": [
            [
                "3c39b274d9df5304"
            ]
        ]
    },
    {
        "id": "f880226b0a4c82d0",
        "type": "debug",
        "z": "67991373.45438c",
        "name": "debug 36",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2600,
        "y": 60,
        "wires": []
    },
    {
        "id": "cd36dc8de00aa79e",
        "type": "ui_toast",
        "z": "67991373.45438c",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "QBES Output",
        "name": "",
        "x": 3010,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "3c39b274d9df5304",
        "type": "function",
        "z": "67991373.45438c",
        "name": "Prepare notification for rules saved",
        "func": "msg.payload = \"Job Completed at \" + new Date().toLocaleString() + \"\\nSubmitted/Saved Rules: \" \n+ msg.payload.data.length +\"/\"\n+ msg.payload.rulesSaved.length\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2700,
        "y": 160,
        "wires": [
            [
                "cd36dc8de00aa79e",
                "f880226b0a4c82d0"
            ]
        ]
    },
    {
        "id": "097b7c36f8623668",
        "type": "ui_toast",
        "z": "67991373.45438c",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": true,
        "className": "",
        "topic": "QBES Output",
        "name": "",
        "x": 1670,
        "y": 100,
        "wires": []
    },
    {
        "id": "3134b3146429fc29",
        "type": "inject",
        "z": "67991373.45438c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3400,
        "y": 480,
        "wires": [
            [
                "bdf7069659cda7af"
            ]
        ]
    },
    {
        "id": "bdf7069659cda7af",
        "type": "function",
        "z": "67991373.45438c",
        "name": "Split RIDs array and prepare for QBES",
        "func": "\nmsg.payload = flow.get(\"reporting_id\") || []\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3650,
        "y": 480,
        "wires": [
            [
                "d8efd0a725820987"
            ]
        ]
    },
    {
        "id": "27cb39e661a5761a",
        "type": "delay",
        "z": "67991373.45438c",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3950,
        "y": 540,
        "wires": [
            [
                "7f28fb8befeb2f38"
            ]
        ]
    },
    {
        "id": "7f28fb8befeb2f38",
        "type": "function",
        "z": "67991373.45438c",
        "name": "Iterate over each RID",
        "func": "\nlet reporting_id = msg.payload\nlet QBESpayload = flow.get(\"QBESPayload\")\nQBESpayload.reporting_id = parseInt(reporting_id)\n msg.payload = QBESpayload\n\n \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4280,
        "y": 480,
        "wires": [
            [
                "2d31a9cbb8b25e8f",
                "d7f2fcd5e791ba92"
            ]
        ]
    },
    {
        "id": "d8efd0a725820987",
        "type": "split",
        "z": "67991373.45438c",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 3910,
        "y": 240,
        "wires": [
            [
                "27cb39e661a5761a"
            ]
        ]
    },
    {
        "id": "652ea1d3b066becc",
        "type": "debug",
        "z": "67991373.45438c",
        "name": "debug 45",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4460,
        "y": 740,
        "wires": []
    },
    {
        "id": "5a1e132daec8024a",
        "type": "inject",
        "z": "2e37e573b3c922d6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"data\":[],\"message\":\"Submitting a job\",\"sentFrom\":\"QFlow\",\"sentTo\":\"Qbes\"}",
        "payloadType": "json",
        "x": 150,
        "y": 240,
        "wires": [
            [
                "a0412d3c94324572"
            ]
        ]
    },
    {
        "id": "a0412d3c94324572",
        "type": "http request",
        "z": "2e37e573b3c922d6",
        "name": "Post: ProcessRules ",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost/notification",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-JBID",
                "valueType": "other",
                "valueValue": "kapoo"
            },
            {
                "keyType": "other",
                "keyValue": "X-API-KEY",
                "valueType": "other",
                "valueValue": "x5nDCpvGTkvHniq8wJ9m"
            },
            {
                "keyType": "other",
                "keyValue": "DEBUG",
                "valueType": "other",
                "valueValue": "true"
            }
        ],
        "x": 330,
        "y": 240,
        "wires": [
            [
                "f93932c0230210fc"
            ]
        ]
    },
    {
        "id": "f93932c0230210fc",
        "type": "debug",
        "z": "2e37e573b3c922d6",
        "name": "debug 32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 240,
        "wires": []
    },
    {
        "id": "a33d0b789237415b",
        "type": "http in",
        "z": "2e37e573b3c922d6",
        "name": "Qflow Notifications Receiving Post /qflow/notification",
        "url": "/qflow/notification",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 320,
        "y": 380,
        "wires": [
            [
                "cec8ed2593f9fd72",
                "f8840d14f1031c7a"
            ]
        ]
    },
    {
        "id": "cec8ed2593f9fd72",
        "type": "debug",
        "z": "2e37e573b3c922d6",
        "name": "debug Got data from QBES",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 540,
        "wires": []
    },
    {
        "id": "f8840d14f1031c7a",
        "type": "function",
        "z": "2e37e573b3c922d6",
        "name": "Save Events",
        "func": "// NK will set the submitted flow to null\n\n// flow.set(\"submitted\", null)\n// initialise the counter to 0 if it doesn't exist already\nvar notificationLog = context.get('notificationLog')|| [];\n// msg.payload.data = JSON.stringify(msg.payload.data)\nnotificationLog.push(msg.payload);\nif (notificationLog.length > 200){\n    // Delete oldest message if > 20\n    notificationLog.shift();\n    notificationLog.length = 200;\n} \n\ncontext.set('notificationLog', [])\n// store the value back\ncontext.set('notificationLog', notificationLog);\n\n// make it part of the outgoing msg object\nmsg = {};\n// msg.payload = {\n//     command: 'addData',\n//     arguments:[msg.payload]\n// }\n\nmsg.payload = [...notificationLog];\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 380,
        "wires": [
            [
                "27055eaf0324d25e"
            ]
        ]
    },
    {
        "id": "965096e09ca7c885",
        "type": "ui_toast",
        "z": "2e37e573b3c922d6",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "QBES Output",
        "name": "",
        "x": 470,
        "y": 680,
        "wires": []
    },
    {
        "id": "01ad11cd828b155d",
        "type": "function",
        "z": "2e37e573b3c922d6",
        "name": "function 10",
        "func": "msg.payload = \"Job Completed at:\"+ new Date().toLocaleString()\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 680,
        "wires": [
            [
                "965096e09ca7c885"
            ]
        ]
    },
    {
        "id": "248ac488b1fb1009",
        "type": "ui_button",
        "z": "2e37e573b3c922d6",
        "name": "",
        "group": "48c415689cc2322d",
        "order": 4,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Reset Notifications",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-circle-o",
        "payload": "[]",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 190,
        "y": 300,
        "wires": [
            [
                "187350ae70435f47"
            ]
        ]
    },
    {
        "id": "187350ae70435f47",
        "type": "function",
        "z": "2e37e573b3c922d6",
        "name": "Clear context set notificationLog to []",
        "func": "context.set('notificationLog', []);\nmsg.payload = []\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 300,
        "wires": [
            [
                "27055eaf0324d25e"
            ]
        ]
    },
    {
        "id": "27055eaf0324d25e",
        "type": "ui_table",
        "z": "2e37e573b3c922d6",
        "group": "48c415689cc2322d",
        "name": "Output",
        "order": 5,
        "width": 23,
        "height": 15,
        "columns": [
            {
                "field": "DEBUG",
                "title": "#",
                "width": "",
                "align": "left",
                "formatter": "rownum",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "data.id",
                "title": "JOBS ID",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "message",
                "title": "Message",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "sentFrom",
                "title": "Sent From",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "sentTo",
                "title": "Sent To",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 790,
        "y": 300,
        "wires": [
            [
                "751a113306f1cfd5"
            ]
        ]
    },
    {
        "id": "751a113306f1cfd5",
        "type": "debug",
        "z": "2e37e573b3c922d6",
        "name": "JOBS Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.data",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 300,
        "wires": []
    },
    {
        "id": "f3903be4e24d8dca",
        "type": "http request",
        "z": "d103860e993c1512",
        "g": "7dc18555ca029842",
        "name": "API call to validate",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost/reporting_unit/{{{rid}}}/validate?DEBUG=true",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-JBID",
                "valueType": "other",
                "valueValue": "kapoo"
            },
            {
                "keyType": "other",
                "keyValue": "X-API-KEY",
                "valueType": "other",
                "valueValue": "x5nDCpvGTkvHniq8wJ9m"
            }
        ],
        "x": 430,
        "y": 40,
        "wires": [
            [
                "999bbdaf976e7feb"
            ]
        ]
    },
    {
        "id": "97d2bd49cb3742bc",
        "type": "inject",
        "z": "d103860e993c1512",
        "g": "7dc18555ca029842",
        "name": "Validate RID Input",
        "props": [
            {
                "p": "rid",
                "v": "8771348140",
                "vt": "num"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload.type",
                "v": "validate",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "VALIDATE",
        "x": 190,
        "y": 40,
        "wires": [
            [
                "f3903be4e24d8dca",
                "d015bbe8f3761f7f"
            ]
        ]
    },
    {
        "id": "999bbdaf976e7feb",
        "type": "json",
        "z": "d103860e993c1512",
        "g": "7dc18555ca029842",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 590,
        "y": 40,
        "wires": [
            [
                "d529da54696a9982"
            ]
        ]
    },
    {
        "id": "d529da54696a9982",
        "type": "debug",
        "z": "d103860e993c1512",
        "g": "7dc18555ca029842",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 40,
        "wires": []
    },
    {
        "id": "e5ca7c9975e3a6b5",
        "type": "comment",
        "z": "d103860e993c1512",
        "g": "d1e0f39ddacfeb20",
        "name": "Validate a specific Reporting ID with all rules",
        "info": "## ## Validate a specific Reporting ID with all rules",
        "x": 670,
        "y": 140,
        "wires": []
    },
    {
        "id": "d015bbe8f3761f7f",
        "type": "debug",
        "z": "d103860e993c1512",
        "g": "7dc18555ca029842",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 80,
        "wires": []
    },
    {
        "id": "a52599d1e82370ad",
        "type": "inject",
        "z": "d103860e993c1512",
        "g": "5a28e866a67c90ec",
        "name": "Rule Generate from Free Text",
        "props": [
            {
                "p": "payload.conditionstring",
                "v": " What is the name, condition, compute as an array and message of the following rule and return it as a json:    Naveen:   I was talking to Patrick and he wanted another    rule name is \"IF the flag for hazardas materials is reported  and the NAICS is in 484\". It should have a rule priority of 5 on a scale of 1 to 10.   and condition is   substr(RECORD_NAICS_NUM, 1,3)== 484 and RCPT_MOTR_HAZRD_STAT == 1 and RCPT_MOTR_HAZRD_PCT == 0 if true then compute  RCPT_MOTR_HAZRD_STAT = 2  Send the message \"Hazardous Material rule fired\".  Do you think we could chat on this soon?  Thanks Amit",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "AI",
        "x": 180,
        "y": 400,
        "wires": [
            [
                "3773a11cc06cd9db"
            ]
        ]
    },
    {
        "id": "3773a11cc06cd9db",
        "type": "http request",
        "z": "d103860e993c1512",
        "g": "5a28e866a67c90ec",
        "name": "Post AI Services",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost/openai/aicomplete",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-JBID",
                "valueType": "other",
                "valueValue": "kapoo"
            },
            {
                "keyType": "other",
                "keyValue": "X-API-KEY",
                "valueType": "other",
                "valueValue": "x5nDCpvGTkvHniq8wJ9m"
            }
        ],
        "x": 440,
        "y": 400,
        "wires": [
            [
                "6970f9e5cadfae30"
            ]
        ]
    },
    {
        "id": "f47d58da6a345fa9",
        "type": "debug",
        "z": "d103860e993c1512",
        "g": "5a28e866a67c90ec",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.ruleName",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 400,
        "wires": []
    },
    {
        "id": "12d8ce370fc2153f",
        "type": "function",
        "z": "d103860e993c1512",
        "g": "5a28e866a67c90ec",
        "name": "Get RuleName",
        "func": "\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 320,
        "wires": [
            [
                "f47d58da6a345fa9"
            ]
        ]
    },
    {
        "id": "6970f9e5cadfae30",
        "type": "switch",
        "z": "d103860e993c1512",
        "g": "5a28e866a67c90ec",
        "name": "",
        "property": "payload.ruleName",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 400,
        "wires": [
            [
                "12d8ce370fc2153f",
                "eee34fb243fcc025",
                "da904483e17171f2"
            ],
            []
        ]
    },
    {
        "id": "eee34fb243fcc025",
        "type": "debug",
        "z": "d103860e993c1512",
        "g": "5a28e866a67c90ec",
        "name": "Debug RuleName",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 500,
        "wires": []
    },
    {
        "id": "8764792a5250d529",
        "type": "comment",
        "z": "d103860e993c1512",
        "g": "5a28e866a67c90ec",
        "name": "Define AI end point. Pass free text",
        "info": "## # Open AI parse text",
        "x": 180,
        "y": 340,
        "wires": []
    },
    {
        "id": "2afe1b70382b1d3c",
        "type": "ui_toast",
        "z": "d103860e993c1512",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 770,
        "y": 620,
        "wires": []
    },
    {
        "id": "da904483e17171f2",
        "type": "change",
        "z": "d103860e993c1512",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.ruleName",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 680,
        "wires": [
            [
                "2afe1b70382b1d3c"
            ]
        ]
    },
    {
        "id": "f0bda8ccf069c334",
        "type": "inject",
        "z": "d886a3864a88d832",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "508c4d88817d96f3",
        "type": "switch",
        "z": "d886a3864a88d832",
        "name": "1.0 Estab or KAU Switch",
        "property": "facts.level_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "d",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "e",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 310,
        "y": 60,
        "wires": [
            [],
            [],
            [
                "d457c366c48ae1e9"
            ]
        ]
    },
    {
        "id": "d457c366c48ae1e9",
        "type": "switch",
        "z": "d886a3864a88d832",
        "name": "2.0 Estab",
        "property": "facts.level_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "e",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 620,
        "y": 200,
        "wires": [
            [],
            [
                "48c251e7e1851bb1"
            ]
        ]
    },
    {
        "id": "1393263d0d520dfd",
        "type": "subflow:b99b7893add8c369",
        "z": "d886a3864a88d832",
        "name": "5.0 Logical Checks",
        "x": 1190,
        "y": 400,
        "wires": [
            [
                "22a7836fd0ee4876"
            ]
        ]
    },
    {
        "id": "22a7836fd0ee4876",
        "type": "subflow:27fccef587c0b218",
        "z": "d886a3864a88d832",
        "name": "6.0 Ratio/Range Testing",
        "x": 1210,
        "y": 480,
        "wires": [
            [
                "4242881485341267"
            ]
        ]
    },
    {
        "id": "4242881485341267",
        "type": "subflow:3fa869ffe40596e5",
        "z": "d886a3864a88d832",
        "name": "7.0 Post Ratio/Range",
        "x": 1200,
        "y": 540,
        "wires": [
            [
                "69135525ff74076e"
            ]
        ]
    },
    {
        "id": "69135525ff74076e",
        "type": "subflow:98b684914b5fce08",
        "z": "d886a3864a88d832",
        "name": "8.0 Unit Balance",
        "x": 1180,
        "y": 600,
        "wires": [
            [
                "f57362671b31528b"
            ]
        ]
    },
    {
        "id": "f57362671b31528b",
        "type": "subflow:2e55e3e8510e62d0",
        "z": "d886a3864a88d832",
        "name": "9.0 Company Additivity Check",
        "x": 1230,
        "y": 680,
        "wires": [
            [
                "66f76ef1f55de5b8"
            ]
        ]
    },
    {
        "id": "66f76ef1f55de5b8",
        "type": "subflow:2ad5fa373c21d0a3",
        "z": "d886a3864a88d832",
        "name": "10.0 Derived Items",
        "x": 1210,
        "y": 760,
        "wires": [
            [
                "0f8306d8913bb7d2"
            ]
        ]
    },
    {
        "id": "0f8306d8913bb7d2",
        "type": "subflow:67a3cd3b754e4fbd",
        "z": "d886a3864a88d832",
        "name": "11.0 Post Edit Status Fields",
        "x": 1240,
        "y": 840,
        "wires": [
            [
                "a0acac50eaa1f639"
            ]
        ]
    },
    {
        "id": "a0acac50eaa1f639",
        "type": "debug",
        "z": "d886a3864a88d832",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 940,
        "wires": []
    },
    {
        "id": "48c251e7e1851bb1",
        "type": "subflow:045ba1012eb08b50",
        "z": "d886a3864a88d832",
        "name": "3.0 Determine Status",
        "x": 1200,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "3626fe7ffedf766a",
        "type": "inject",
        "z": "ae7e9f579855357c",
        "name": "Inject Worfklow ID",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "SPAD",
        "payload": "29028",
        "payloadType": "num",
        "x": 130,
        "y": 40,
        "wires": [
            [
                "7a50cf774f7f5b56"
            ]
        ]
    },
    {
        "id": "98626aec5c5ae44f",
        "type": "ui_text_input",
        "z": "ae7e9f579855357c",
        "name": "Input Workflow ID",
        "label": "Workflow ID",
        "tooltip": "Enter a Workflow ID from the SPAD",
        "group": "48c415689cc2322d",
        "order": 2,
        "width": 7,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 130,
        "y": 100,
        "wires": [
            [
                "7a50cf774f7f5b56"
            ]
        ]
    },
    {
        "id": "39fd1017ceb52b5b",
        "type": "ui_table",
        "z": "ae7e9f579855357c",
        "group": "440f78388bf9306a",
        "name": "Rules Repository",
        "order": 1,
        "width": 29,
        "height": "15",
        "columns": [
            {
                "field": "id",
                "title": "ID",
                "width": "10%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "type",
                "title": "Type",
                "width": "10%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "name",
                "title": "Description",
                "width": "30%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "conditions",
                "title": "Conditions",
                "width": "30%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "event",
                "title": "Event",
                "width": "30%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "active",
                "title": "Active",
                "width": "10%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "rvs",
                "title": "RV",
                "width": "30%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 1170,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "bfe5e89f0b386ed1",
        "type": "subflow:c5ce2d38887016b2",
        "z": "ae7e9f579855357c",
        "name": "",
        "x": 930,
        "y": 60,
        "wires": [
            [],
            [
                "9bce07e0bcd382ef",
                "39fd1017ceb52b5b"
            ]
        ]
    },
    {
        "id": "7a50cf774f7f5b56",
        "type": "http request",
        "z": "ae7e9f579855357c",
        "name": "Get Workflow by ID",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost/spad/{{{payload}}}?DEBUG=true",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-JBID",
                "valueType": "other",
                "valueValue": "kapoo"
            },
            {
                "keyType": "other",
                "keyValue": "X-API-KEY",
                "valueType": "other",
                "valueValue": "x5nDCpvGTkvHniq8wJ9m"
            }
        ],
        "x": 350,
        "y": 60,
        "wires": [
            [
                "b3a3ee5bc8d56868"
            ]
        ]
    },
    {
        "id": "b3a3ee5bc8d56868",
        "type": "function",
        "z": "ae7e9f579855357c",
        "name": "Get Facts from SPAD (WorkflowID)",
        "func": "msg.payload.facts = msg.payload.data[0].facts\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 60,
        "wires": [
            [
                "bfe5e89f0b386ed1"
            ]
        ]
    },
    {
        "id": "9526c76a9c6d970d",
        "type": "function",
        "z": "ae7e9f579855357c",
        "name": "Get Facts from DB",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 180,
        "wires": [
            [
                "bfe5e89f0b386ed1"
            ]
        ]
    },
    {
        "id": "7152a57907490b4f",
        "type": "function",
        "z": "ae7e9f579855357c",
        "name": "Get Facts from Spreadsheet",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 280,
        "wires": [
            [
                "bfe5e89f0b386ed1"
            ]
        ]
    },
    {
        "id": "9bce07e0bcd382ef",
        "type": "function",
        "z": "ae7e9f579855357c",
        "name": "Balancing",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "3e68d1dde251bd01",
        "type": "inject",
        "z": "908af5a748b37aba",
        "name": "Select RV",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "SELECT-RV",
        "payload": "select  rvname as name, 'number' as type from response_variables;",
        "payloadType": "str",
        "x": 180,
        "y": 180,
        "wires": [
            [
                "25cd81b4ace00658"
            ]
        ]
    },
    {
        "id": "25cd81b4ace00658",
        "type": "function",
        "z": "908af5a748b37aba",
        "name": "function 1",
        "func": "msg.query = msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "e22cfefc78836d2d",
        "type": "inject",
        "z": "908af5a748b37aba",
        "name": "Get Rules",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "GET-RULES",
        "payload": "  select id, name, description, active, type, rvs,    parsed_rule->>'event' as event ,   parsed_rule->>'conditions' as conditions,   (parsed_rule)::TEXT parsed_rule, data   from aies.rules_repository ",
        "payloadType": "str",
        "x": 180,
        "y": 120,
        "wires": [
            [
                "25cd81b4ace00658"
            ]
        ]
    },
    {
        "id": "61d9fb3b9c7c1d2d",
        "type": "http request",
        "z": "908af5a748b37aba",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost/reporting_unit/8771348140/validate?DEBUG=true",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-JBID",
                "valueType": "other",
                "valueValue": "kapoo"
            },
            {
                "keyType": "other",
                "keyValue": "X-API-KEY",
                "valueType": "other",
                "valueValue": "x5nDCpvGTkvHniq8wJ9m"
            }
        ],
        "x": 510,
        "y": 600,
        "wires": [
            [
                "2d03d52f5ca730a3"
            ]
        ]
    },
    {
        "id": "bbfa3ae528fd43ea",
        "type": "inject",
        "z": "908af5a748b37aba",
        "name": "CALL Validation GET",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "VALIDATE",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 600,
        "wires": [
            [
                "61d9fb3b9c7c1d2d"
            ]
        ]
    },
    {
        "id": "2d03d52f5ca730a3",
        "type": "json",
        "z": "908af5a748b37aba",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 670,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "44ef1682.4b53e8",
        "type": "function",
        "z": "908af5a748b37aba",
        "name": "",
        "func": "msg.payload = '<iframe src=\"http://localhost:8080/#/home\" width = \"1200\" height = \"800\"  frameborder = \"0\" ></iframe >';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "c99d37ca.90db78",
        "type": "ui_template",
        "z": "908af5a748b37aba",
        "group": "24e6f02ee5d4fe37",
        "name": "",
        "order": 3,
        "width": "13",
        "height": "8",
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 630,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "80e5e88.32ed218",
        "type": "inject",
        "z": "908af5a748b37aba",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "http://localhost:8080/#/home",
        "payloadType": "str",
        "x": 230,
        "y": 1140,
        "wires": [
            [
                "44ef1682.4b53e8"
            ]
        ]
    },
    {
        "id": "4f32304b9c4675fc",
        "type": "ui_table",
        "z": "908af5a748b37aba",
        "group": "18e6e44c.b0561c",
        "name": "Rules Repository",
        "order": 3,
        "width": "14",
        "height": "4",
        "columns": [
            {
                "field": "id",
                "title": "ID",
                "width": "10%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "type",
                "title": "Type",
                "width": "10%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "name",
                "title": "Description",
                "width": "30%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "conditions",
                "title": "Conditions",
                "width": "30%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "event",
                "title": "Event",
                "width": "30%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "active",
                "title": "Active",
                "width": "10%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "rvs",
                "title": "RV",
                "width": "30%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 690,
        "y": 260,
        "wires": [
            [
                "1f1180ec80919248"
            ]
        ]
    },
    {
        "id": "07687bc8cc1240b6",
        "type": "function",
        "z": "908af5a748b37aba",
        "name": "function 2",
        "func": "msg.payload = msg.payload.rows\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 260,
        "wires": [
            [
                "4f32304b9c4675fc"
            ]
        ]
    },
    {
        "id": "1f1180ec80919248",
        "type": "ui_form",
        "z": "908af5a748b37aba",
        "name": "Edit Rule",
        "label": "",
        "group": "24e6f02ee5d4fe37",
        "order": 4,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Name",
                "value": "name",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Description",
                "value": "description",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Active",
                "value": "active",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Variables",
                "value": "rvs",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Event",
                "value": "event",
                "type": "multiline",
                "required": true,
                "rows": 3
            },
            {
                "label": "Conditions",
                "value": "conditions",
                "type": "multiline",
                "required": false,
                "rows": 3
            },
            {
                "label": "DATA",
                "value": "data",
                "type": "text",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "name": "",
            "description": "",
            "active": "",
            "rvs": "",
            "event": "",
            "conditions": "",
            "data": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 880,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "abe91f1e.21df",
        "type": "debug",
        "z": "c702b495.9cc2f8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1050,
        "y": 120,
        "wires": []
    },
    {
        "id": "87b5b844.5719b8",
        "type": "inject",
        "z": "c702b495.9cc2f8",
        "name": "Input: Validate RID ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "8771348140",
        "payloadType": "num",
        "x": 130,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "2bb5276.49b45d8",
        "type": "http request",
        "z": "c702b495.9cc2f8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost/reporting_unit/{{{rid}}}/validate",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-API-KEY",
                "valueType": "other",
                "valueValue": "x5nDCpvGTkvHniq8wJ9m"
            },
            {
                "keyType": "other",
                "keyValue": "X-JBID",
                "valueType": "other",
                "valueValue": "kapoor"
            }
        ],
        "x": 630,
        "y": 120,
        "wires": [
            [
                "178d7efeebb1045e",
                "21a1c9af.ba91a6"
            ]
        ]
    },
    {
        "id": "c775ecaa.a9813",
        "type": "function",
        "z": "c702b495.9cc2f8",
        "name": "Set HTTP Get Variable",
        "func": "// msg.rid = msg.req.params.rid\nmsg.limit = 100;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 240,
        "wires": [
            [
                "2bb5276.49b45d8"
            ]
        ]
    },
    {
        "id": "178d7efeebb1045e",
        "type": "json",
        "z": "c702b495.9cc2f8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 810,
        "y": 60,
        "wires": [
            [
                "abe91f1e.21df",
                "fd7db6633a9cb081"
            ]
        ]
    },
    {
        "id": "8bc8887358552ee6",
        "type": "http in",
        "z": "c702b495.9cc2f8",
        "name": "",
        "url": "/validate/:rid",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "fd7db6633a9cb081",
        "type": "http response",
        "z": "c702b495.9cc2f8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1070,
        "y": 220,
        "wires": []
    },
    {
        "id": "49d75074.37303",
        "type": "function",
        "z": "c702b495.9cc2f8",
        "name": "Assigning rid in msg",
        "func": "msg.rid=global.get('rid') ;\n// msg.b=global.get('b') ;\nmsg.payload = msg.rid\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 360,
        "wires": [
            [
                "c775ecaa.a9813"
            ]
        ]
    },
    {
        "id": "1373611.8d85b9f",
        "type": "inject",
        "z": "c702b495.9cc2f8",
        "name": "Initial Value",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "33",
        "payloadType": "num",
        "x": 170,
        "y": 480,
        "wires": [
            [
                "29981141.09dd9e"
            ]
        ]
    },
    {
        "id": "29981141.09dd9e",
        "type": "ui_text_input",
        "z": "c702b495.9cc2f8",
        "d": true,
        "name": "rid",
        "label": "Enter Reporting ID",
        "tooltip": "3449842849",
        "group": "1f48566b.e8958a",
        "order": 2,
        "width": 6,
        "height": 3,
        "passthru": true,
        "mode": "number",
        "delay": "0",
        "topic": "validate",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 390,
        "y": 480,
        "wires": [
            [
                "7894de12.4ed5f"
            ]
        ]
    },
    {
        "id": "7894de12.4ed5f",
        "type": "function",
        "z": "c702b495.9cc2f8",
        "name": "Store to Global Variable rid",
        "func": "global.set('rid',msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "21a1c9af.ba91a6",
        "type": "ui_text",
        "z": "c702b495.9cc2f8",
        "d": true,
        "group": "1f48566b.e8958a",
        "order": 9,
        "width": 23,
        "height": 9,
        "name": "",
        "label": "Result",
        "format": "{{msg.payload}} ",
        "layout": "row-spread",
        "className": "",
        "x": 990,
        "y": 440,
        "wires": []
    },
    {
        "id": "d433feb1.6365e",
        "type": "http in",
        "z": "7d4690e10f209584",
        "name": "",
        "url": "/index",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 160,
        "wires": [
            [
                "98b6cece.37871"
            ]
        ]
    },
    {
        "id": "98b6cece.37871",
        "type": "template",
        "z": "7d4690e10f209584",
        "name": "web-template",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n   <head>\n      <!-- The jQuery library is a prerequisite for all jqSuite products -->\n      <script type=\"text/ecmascript\" src=\"http://www.guriddo.net/demo/js/jquery.min.js\"></script> \n      <!-- We support more than 40 localizations -->\n      <script type=\"text/ecmascript\" src=\"http://www.guriddo.net/demo/js/trirand/i18n/grid.locale-en.js\"></script>\n      <!-- This is the Javascript file of jqGrid -->   \n      <script type=\"text/ecmascript\" src=\"http://www.guriddo.net/demo/js/trirand/jquery.jqGrid.min.js\"></script>\n      <!-- This is the localization file of the grid controlling messages, labels, etc.\n      <!-- A link to a jQuery UI ThemeRoller theme, more than 22 built-in and many more custom -->\n      <link rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\"http://struts.jgeppert.com/struts2-jquery-grid-showcase/themes/showcase/jquery-ui.css\" />\n      <!-- The link to the CSS that the grid needs -->\n      <link rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\"http://www.guriddo.net/demo/css/trirand/ui.jqgrid.css\" />\n      <meta charset=\"utf-8\" />\n      <title>Demo CRUD with jqGrid</title>\n      <script type=\"text/javascript\"></script>\n      <link rel=\"stylesheet\" type=\"text/css\" href=\"http://www.guriddo.net/B1D671CF-E532-4481-99AA-19F420D90332/netdefender/hui/ndhui.css\" />\n   </head>\n   <body>\n      <script type=\"text/javascript\" language=\"javascript\" src=\"http://www.guriddo.net/B1D671CF-E532-4481-99AA-19F420D90332/netdefender/hui/ndhui.js?0=0&0=0&0=0\"></script>\n      <table id=\"jqGrid\"></table>\n      <div id=\"jqGridPager\"></div>\n      <script type=\"text/javascript\"> \n         $(document).ready(function () {\n             $(\"#jqGrid\").jqGrid({\n                 url: '/search',\n                 mtype: \"GET\",\n                 datatype: \"json\",\n                 colModel: [\n                     { label: 'ID', name: 'id', key: true, search: false, width: 75 },\n                     { label: 'Name', name: 'name', width: 150, editable: true, formoptions: { colpos: 1, rowpos: 1 }  },\n                     { label: 'Last Name', name: 'lastname', width: 150, editable: true, edittype: \"select\", formoptions: { colpos: 1, rowpos: 2 },\n                       editoptions: {\n                            dataUrl:'/search/lastname',\n                            type:\"GET\",\n                            buildSelect: function(data) {\n                                var response = jQuery.parseJSON(data); //JSON data\n                                var s = '<select>';\n                                if (response && response.length) {\n                                    s += '<option hidden=\"true\">--- Select Lastname ---</option>';\n                                    for (var i = 0, l=response.length; i<l ; i++) {\n                                    var id = response[i].id;\n                                    var val = response[i].value; \n                                    // You can concatenate ID or any other string here\n                                    //For example: var ri = response[i].id + response[i].value; \n                                        s += '<option value=\"'+id+'\">'+val+'</option>';\n                                    }\n                                }\n                                return s + \"</select>\";\n                            } \n                         } \n                     },\n                     { label: 'Code', name: 'code', width: 150, editable: true, formoptions: { colpos: 2, rowpos: 1 } },  \n                     { label: 'Married', name: 'married', width: 150, align: \"center\", search: false, editable: true, edittype: \"checkbox\", formatter: \"checkbox\", editoptions: { value: \"1:0\" }, formoptions: { colpos: 2, rowpos: 2 } }\n                 ],\n                 width: 500,\n                 height: 260,\n                 rowNum: 10,\n                 loadonce: true,\n                 viewrecords: true,\n                 pager: \"#jqGridPager\"\n             });\n             \n             $('#jqGrid').navGrid('#jqGridPager',\n                 // The buttons to appear on the toolbar of the grid\n                 { edit: true, add: true, del: true, search: true, refresh: true, view: true, position: \"left\", cloneToTop: true },\n                 \n                 // Options for the Edit Dialog\n                 {\n                     url: '/update',\n                     editCaption: \"The Edit Dialog\",\n                     recreateForm: true,\n\t\t\t\t\t //checkOnUpdate : true,\n\t\t\t\t\t //checkOnSubmit : true,\n\t\t\t\t\t beforeSubmit : function( postdata, form , oper) {\n\t\t\t\t\t\t if(confirm('Are you sure you want to update this information?') ) {\n\t\t\t\t\t\t\t // Do something\n\t\t\t\t\t\t \t return [true,'/update'];\n\t\t\t\t\t\t } else {\n\t\t\t\t\t\t\treturn [false, 'Update failed!'];\n\t\t\t\t\t\t }\n\t\t\t\t\t },\n                     afterSubmit: function () {\n                         $(this).jqGrid(\"setGridParam\", {datatype: 'json'});\n                         return [true];\n                     },\n                     closeAfterEdit: true,\n                     errorTextFormat: function (data) {\n                         return 'Error: ' + data.responseText\n                     }\n                 },\n                 // Options for the Add Dialog\n                 {\n                     url: '/insert',\n                     addCaption: \"Add Dialog\",\n                     afterSubmit: function () {\n                         $(this).jqGrid(\"setGridParam\", {datatype: 'json'});\n                         return [true];\n                     },\n                     closeAfterAdd: true,\n                     recreateForm: true,\n                     errorTextFormat: function (data) {\n                         return 'Error: ' + data.responseText\n                     }\n                 },\n                 // Options for the Delete Dialog\n                 {   \n                     url: '/delete',\n                     errorTextFormat: function (data) {\n                         return 'Error: ' + data.responseText\n                     }\n             });\n             $(\"#jqGrid\").jqGrid('filterToolbar', { stringResult: true, searchOnEnter: true });\n         });\n      </script>\n   </body>\n</html>",
        "output": "str",
        "x": 360,
        "y": 160,
        "wires": [
            [
                "3c1830eb.33b9"
            ]
        ]
    },
    {
        "id": "3c1830eb.33b9",
        "type": "http response",
        "z": "7d4690e10f209584",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1080,
        "y": 160,
        "wires": []
    },
    {
        "id": "ef285826.0e9738",
        "type": "http in",
        "z": "7d4690e10f209584",
        "name": "",
        "url": "/search",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "e396f56a.dcda38"
            ]
        ]
    },
    {
        "id": "e396f56a.dcda38",
        "type": "function",
        "z": "7d4690e10f209584",
        "name": "search-query",
        "func": "//msg.topic=\"SELECT CONCAT('M00','',test.id) AS id,test.name AS name,lastname.lastname AS lastname,test.code AS code,test.married AS married FROM test INNER JOIN lastname ON lastname.id = test.lastname ORDER BY test.id DESC\";\nmsg.query=\"SELECT * from response_variables  order by rvname\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 220,
        "wires": [
            [
                "37bbae99e2515339"
            ]
        ]
    },
    {
        "id": "458b0528.a4d98c",
        "type": "http response",
        "z": "7d4690e10f209584",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1080,
        "y": 220,
        "wires": []
    },
    {
        "id": "d84f16f7.3d9698",
        "type": "function",
        "z": "7d4690e10f209584",
        "name": "search-response",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 745,
        "y": 220,
        "wires": [
            [
                "2b952c3a.f63884",
                "054e18b51109bc59"
            ]
        ]
    },
    {
        "id": "2b952c3a.f63884",
        "type": "json",
        "z": "7d4690e10f209584",
        "name": "",
        "property": "payload.rows",
        "action": "",
        "pretty": false,
        "x": 930,
        "y": 220,
        "wires": [
            [
                "458b0528.a4d98c"
            ]
        ]
    },
    {
        "id": "c91568f0.c3f2f8",
        "type": "http in",
        "z": "7d4690e10f209584",
        "name": "",
        "url": "/insert",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 340,
        "wires": [
            [
                "81bb8cdf.93e5b"
            ]
        ]
    },
    {
        "id": "e4b82091.b8e9a",
        "type": "function",
        "z": "7d4690e10f209584",
        "name": "insert-response",
        "func": "msg.payload=msg.result;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 735,
        "y": 340,
        "wires": [
            [
                "c224cbcf.e3e718"
            ]
        ]
    },
    {
        "id": "81bb8cdf.93e5b",
        "type": "function",
        "z": "7d4690e10f209584",
        "name": "insert-query",
        "func": "msg.topic=\"INSERT INTO test (name,lastname,code,married,timestamp) VALUES ('\" + msg.payload.name + \"','\" + msg.payload.lastname + \"','\" + msg.payload.code + \"','\" + msg.payload.married + \"',CURRENT_TIMESTAMP)\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "c224cbcf.e3e718",
        "type": "http response",
        "z": "7d4690e10f209584",
        "name": "",
        "x": 1080,
        "y": 340,
        "wires": []
    },
    {
        "id": "9929a22b.66471",
        "type": "function",
        "z": "7d4690e10f209584",
        "name": "lastname-query",
        "func": "msg.topic=\"SELECT id, lastname as value FROM lastname\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 360,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "4bfc0ef6.e8511",
        "type": "function",
        "z": "7d4690e10f209584",
        "name": "lastname-response",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 745,
        "y": 280,
        "wires": [
            [
                "7b9f8d8b.c6d4e4"
            ]
        ]
    },
    {
        "id": "c70c0833.831ab8",
        "type": "http in",
        "z": "7d4690e10f209584",
        "name": "",
        "url": "/search/lastname",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 280,
        "wires": [
            [
                "9929a22b.66471"
            ]
        ]
    },
    {
        "id": "f92b07.fa8e84f8",
        "type": "http response",
        "z": "7d4690e10f209584",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1080,
        "y": 280,
        "wires": []
    },
    {
        "id": "7b9f8d8b.c6d4e4",
        "type": "json",
        "z": "7d4690e10f209584",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 930,
        "y": 280,
        "wires": [
            [
                "f92b07.fa8e84f8"
            ]
        ]
    },
    {
        "id": "857ff60c.da9078",
        "type": "http in",
        "z": "7d4690e10f209584",
        "name": "",
        "url": "/delete",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 460,
        "wires": [
            [
                "5b19502.0bae0b"
            ]
        ]
    },
    {
        "id": "9a8b3fa.c0817c",
        "type": "function",
        "z": "7d4690e10f209584",
        "name": "delete-response",
        "func": "msg.payload=msg.result;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 735,
        "y": 460,
        "wires": [
            [
                "4520409.a2751c"
            ]
        ]
    },
    {
        "id": "5b19502.0bae0b",
        "type": "function",
        "z": "7d4690e10f209584",
        "name": "delete-query",
        "func": "msg.topic=\"DELETE FROM test WHERE id='\" + msg.payload.id + \"'\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "4520409.a2751c",
        "type": "http response",
        "z": "7d4690e10f209584",
        "name": "",
        "x": 1080,
        "y": 460,
        "wires": []
    },
    {
        "id": "b9aef47c.8f0938",
        "type": "http in",
        "z": "7d4690e10f209584",
        "name": "",
        "url": "/update",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 400,
        "wires": [
            [
                "930f03c1.94bd5"
            ]
        ]
    },
    {
        "id": "ece93a93.ebc878",
        "type": "function",
        "z": "7d4690e10f209584",
        "name": "update-response",
        "func": "msg.payload=msg.result;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 745,
        "y": 400,
        "wires": [
            [
                "e51fe384.1db73"
            ]
        ]
    },
    {
        "id": "930f03c1.94bd5",
        "type": "function",
        "z": "7d4690e10f209584",
        "name": "update-query",
        "func": "msg.topic=\"UPDATE test SET name='\" + msg.payload.name + \"', lastname='\" + msg.payload.lastname + \"', code='\" + msg.payload.code + \"', married='\" + msg.payload.married + \"' WHERE id='\" + msg.payload.id + \"'\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "e51fe384.1db73",
        "type": "http response",
        "z": "7d4690e10f209584",
        "name": "",
        "x": 1080,
        "y": 400,
        "wires": []
    },
    {
        "id": "37bbae99e2515339",
        "type": "digitaloak-postgresql-query",
        "z": "7d4690e10f209584",
        "d": true,
        "name": "PG-AIES",
        "server": "ea3e0b5d6b96f47a",
        "inputs": 1,
        "outputs": 1,
        "x": 540,
        "y": 220,
        "wires": [
            [
                "d84f16f7.3d9698"
            ]
        ]
    },
    {
        "id": "054e18b51109bc59",
        "type": "debug",
        "z": "7d4690e10f209584",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 80,
        "wires": []
    },
    {
        "id": "ee4d312b.cc342",
        "type": "ui_template",
        "z": "7d4690e10f209584",
        "group": "18e6e44c.b0561c",
        "name": "Search Sortable Table",
        "order": 1,
        "width": "0",
        "height": "0",
        "format": "<style>\n\n<!--\n{\n      \"rvid\": \"165\",\n      \"rvname\": \"ACTV_MIO\",\n      \"mu_flag\": \"YES\",\n      \"kau_flag\": \"YES\",\n      \"estab_flag\": \"YES\",\n      \"rv_description\": \"Active months in operation - STG\",\n      \"qdm_flag\": \"YES\",\n      \"data_type\": \"STRING\",\n      \"visible\": \"1\",\n      \"created_by\": \"DATALOAD\",\n      \"created_date\": \"2022-05-23T15:49:23.000Z\",\n      \"last_modified_by\": \"faker001\",\n      \"last_modified_date\": \"2022-08-16T20:58:59.000Z\",\n      \"variable_type_id\": \"2\",\n      \"control_group_id\": \"22\"\n    },\n\n\n  -->\ntable {\n    color: #333;\n    font-family: Helvetica, Arial, sans-serif;\n    width: 100%;\n    border-collapse: collapse;\n    border-spacing: 0;\n}\ntd, th {\n    border: 1px solid transparent;\n    /* No more visible border */\n    height: 30px;\n    transition: all 0.3s;\n    /* Simple transition for hover effect */\n}\nth {\n    background: #DFDFDF;\n    /* Darken header a bit */\n    font-weight: bold;\n}\ntd {\n    background: #FAFAFA;\n}\n\n/* Cells in even rows (2,4,6...) are one color */\n\ntr:nth-child(even) td {\n    background: #F1F1F1;\n}\n\n/* Cells in odd rows (1,3,5...) are another (excludes header cells)  */\n\ntr:nth-child(odd) td {\n    background: #FEFEFE;\n}\ntr td:hover {\n    background: #666;\n    color: #FFF;\n}\n\n/* Hover cell effect! */\n    \n.animate-enter, \n.animate-leave\n{ \n    -webkit-transition: 400ms cubic-bezier(0.250, 0.250, 0.750, 0.750) all;\n    -moz-transition: 400ms cubic-bezier(0.250, 0.250, 0.750, 0.750) all;\n    -ms-transition: 400ms cubic-bezier(0.250, 0.250, 0.750, 0.750) all;\n    -o-transition: 400ms cubic-bezier(0.250, 0.250, 0.750, 0.750) all;\n    transition: 400ms cubic-bezier(0.250, 0.250, 0.750, 0.750) all;\n    position: relative;\n    display: block;\n} \n\n.animate-enter.animate-enter-active, \n.animate-leave {\n    opacity: 1;\n    top: 0;\n    height: 30px;\n}\n\n.animate-leave.animate-leave-active,\n.animate-enter {\n    opacity: 0;\n    top: -50px;\n    height: 0px;\n}\n    \n.container\n{\n    max-height: 450px;\n    overflow-y: scroll;\n    overflow-x: hidden;\n}\n</style>\n\n<div>\n     <form>\n      <span class=\"input-group\">\n          <i class=\"fa fa-search\"></i>\n        <input type=\"text\" class=\"form-control\" placeholder=\"Search\" ng-model=\"search\">\n      </span>      \n  </form>\n  <div class=\"container\" ng-app=\"sortApp\">\n\n      <table>\n        <thead>\n        <tr style=\"width:100%\">\n            <td>\n          <a href=\"#\">\n            Index\n          </a>\n        </td>\n        <td>\n          <a href=\"#\" ng-click=\"sortType = 'firstname'; sortReverse = !sortReverse\">\n            First Name \n            <span ng-show=\"sortType == 'firstname' && !sortReverse\" class=\"fa fa-caret-down\"></span>\n            <span ng-show=\"sortType == 'firstname' && sortReverse\" class=\"fa fa-caret-up\"></span>\n          </a>\n        </td>\n        <td>\n          <a href=\"#\" ng-click=\"sortType = 'lastname'; sortReverse = !sortReverse\">\n          Last Name \n            <span ng-show=\"sortType == 'lastname' && !sortReverse\" class=\"fa fa-caret-down\"></span>\n            <span ng-show=\"sortType == 'lastname' && sortReverse\" class=\"fa fa-caret-up\"></span>\n          </a>\n        </td>\n        <td>\n          <a href=\"#\" ng-click=\"sortType = '(age -0)'; sortReverse = !sortReverse\">\n            Age\n            <span ng-show=\"sortType == '(age -0)' && !sortReverse\" class=\"fa fa-caret-down\"></span>\n            <span ng-show=\"sortType == '(age -0)' && sortReverse\" class=\"fa fa-caret-up\"></span>\n          </a>\n        </td>\n\n          </tr>\n          </thead>\n          <tbody>\n        <tr ng-repeat=\"user in msg.options | orderBy:sortType:sortReverse | filter:search track by $index\" ng-click=\"msg.payload = user;send(msg);\" style=\"width:100%\" flex>\n                <td><b ng-bind=\"$index+1\"></b></td>\n               <td ng-bind=\"user.firstname\"></td>\n               <td ng-bind=\"user.lastname\"></td>\n               <td ng-bind=\"user.age\"></td>\n         </tr>\n        </tbody>\n      </table>\n\n</div>\n</div>\n</body></html>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 600,
        "y": 640,
        "wires": [
            [
                "e91124.de6c3ee"
            ]
        ]
    },
    {
        "id": "a60a7430.d10bd8",
        "type": "inject",
        "z": "7d4690e10f209584",
        "name": "Go",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "1",
        "payloadType": "str",
        "x": 210,
        "y": 640,
        "wires": [
            [
                "bece8dfc.55e45"
            ]
        ]
    },
    {
        "id": "e91124.de6c3ee",
        "type": "debug",
        "z": "7d4690e10f209584",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 830,
        "y": 640,
        "wires": []
    },
    {
        "id": "bece8dfc.55e45",
        "type": "change",
        "z": "7d4690e10f209584",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "options",
                "pt": "msg",
                "to": "[{\"firstname\":\"Paul\",\"lastname\":\"Doe\",\"age\":24},{\"firstname\":\"Greg\",\"lastname\":\"Jones\",\"age\":31},{\"firstname\":\"Able\",\"lastname\":\"Smith\",\"age\":29}]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 640,
        "wires": [
            [
                "ee4d312b.cc342"
            ]
        ]
    },
    {
        "id": "3aece19508694869",
        "type": "ui_button",
        "z": "4821a41b2fd327fb",
        "name": "Button",
        "group": "d68e7be3.88f088",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Button",
        "tooltip": "",
        "color": "#fffff",
        "bgcolor": "",
        "icon": "fa-star",
        "payload": "true",
        "payloadType": "bool",
        "topic": "Button",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "71ec6c626243f535"
            ]
        ]
    },
    {
        "id": "bb213dd9d74c4713",
        "type": "ui_dropdown",
        "z": "4821a41b2fd327fb",
        "name": "Choice",
        "label": "Choose what you want ",
        "tooltip": "",
        "place": "",
        "group": "d68e7be3.88f088",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "options": [
            {
                "label": "Choice 1 : String",
                "value": "String",
                "type": "str"
            },
            {
                "label": "Choice 2 : Number",
                "value": 4,
                "type": "num"
            },
            {
                "label": "Choice 3 :Boolean",
                "value": true,
                "type": "bool"
            }
        ],
        "payload": "",
        "topic": "Choice ",
        "x": 160,
        "y": 140,
        "wires": [
            [
                "71ec6c626243f535"
            ]
        ]
    },
    {
        "id": "bfd61d2bb51bb7d3",
        "type": "debug",
        "z": "4821a41b2fd327fb",
        "name": "Dashboard Log",
        "active": false,
        "tosidebar": true,
        "console": false,
        "complete": "payload",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 200,
        "wires": []
    },
    {
        "id": "e6fb6f269c616c1e",
        "type": "ui_switch",
        "z": "4821a41b2fd327fb",
        "name": "Light Switch",
        "label": "switch",
        "tooltip": "",
        "group": "d68e7be3.88f088",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "Light Switch ",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "71ec6c626243f535"
            ]
        ]
    },
    {
        "id": "e666116ddc314a9d",
        "type": "ui_slider",
        "z": "4821a41b2fd327fb",
        "name": "Slider",
        "label": "slider",
        "tooltip": "",
        "group": "d68e7be3.88f088",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "Slider",
        "min": 0,
        "max": 10,
        "step": 1,
        "x": 170,
        "y": 220,
        "wires": [
            [
                "71ec6c626243f535"
            ]
        ]
    },
    {
        "id": "d6620b9a7fdd152f",
        "type": "ui_numeric",
        "z": "4821a41b2fd327fb",
        "name": "",
        "label": "numeric",
        "tooltip": "",
        "group": "d68e7be3.88f088",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "topic": "Numérique",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "step": "",
        "x": 160,
        "y": 260,
        "wires": [
            [
                "71ec6c626243f535"
            ]
        ]
    },
    {
        "id": "f3c2c582f77fb627",
        "type": "ui_text_input",
        "z": "4821a41b2fd327fb",
        "name": "",
        "label": "Text Entry Field ",
        "tooltip": "",
        "group": "d68e7be3.88f088",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "Text Entry Feild",
        "x": 140,
        "y": 300,
        "wires": [
            [
                "71ec6c626243f535"
            ]
        ]
    },
    {
        "id": "c053339d3d485845",
        "type": "ui_form",
        "z": "4821a41b2fd327fb",
        "name": "",
        "label": "Form in Node-RED ",
        "group": "54bca71e.4287f",
        "order": 0,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Name",
                "value": "Name",
                "type": "text",
                "required": true
            },
            {
                "label": "Number",
                "value": "Number",
                "type": "number",
                "required": false
            },
            {
                "label": "Email",
                "value": "Email",
                "type": "email",
                "required": false
            },
            {
                "label": "Password",
                "value": "Password",
                "type": "password",
                "required": false
            },
            {
                "label": "Check Box",
                "value": "Check Box",
                "type": "checkbox",
                "required": false
            },
            {
                "label": "Light Switch",
                "value": "Light Switch",
                "type": "switch",
                "required": false
            }
        ],
        "formValue": {
            "Name": "",
            "Number": "",
            "Email": "",
            "Password": "",
            "Check Box": false,
            "Light Switch": false
        },
        "payload": "",
        "submit": "Submit",
        "cancel": "Cancle",
        "topic": "Form",
        "x": 130,
        "y": 460,
        "wires": [
            [
                "71ec6c626243f535"
            ]
        ]
    },
    {
        "id": "71ec6c626243f535",
        "type": "function",
        "z": "4821a41b2fd327fb",
        "name": "Save Events",
        "func": "\n// initialise the counter to 0 if it doesn't exist already\nvar dashboardLog = context.get('dashboardLog')|| [];\n\ndashboardLog.push(msg);\nif (dashboardLog.length > 20){\n    // Delete oldest message if > 20\n    dashboardLog.shift();\n    dashboardLog.length = 20;\n} \n\n\n// store the value back\ncontext.set('dashboardLog',dashboardLog);\n\n// make it part of the outgoing msg object\nmsg = {};\nmsg.payload = dashboardLog;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 260,
        "wires": [
            [
                "bfd61d2bb51bb7d3",
                "2851e691d3bfa1a6"
            ]
        ]
    },
    {
        "id": "2851e691d3bfa1a6",
        "type": "ui_template",
        "z": "4821a41b2fd327fb",
        "group": "785c383535b14b7d",
        "name": "Dashboard Event Log ",
        "order": 1,
        "width": "8",
        "height": "10",
        "format": "<ul>\n <li ng-repeat=\"x in msg.payload\">\n <font color=\"red\">{{x.topic}}</font>\n    <ul>\n        <li>{{x.payload}}</li>\n    </ul>\n </li>\n</ul>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 780,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "971963f55e94c5ec",
        "type": "ui_text_input",
        "z": "4821a41b2fd327fb",
        "name": "",
        "label": "Email Field",
        "tooltip": "",
        "group": "d68e7be3.88f088",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "email",
        "delay": 300,
        "topic": "Email Field",
        "x": 150,
        "y": 340,
        "wires": [
            [
                "71ec6c626243f535"
            ]
        ]
    },
    {
        "id": "3cc9c2ca3da31eef",
        "type": "ui_text_input",
        "z": "4821a41b2fd327fb",
        "name": "",
        "label": "Password Field",
        "tooltip": "",
        "group": "d68e7be3.88f088",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "password",
        "delay": 300,
        "topic": "Password ",
        "x": 140,
        "y": 380,
        "wires": [
            [
                "71ec6c626243f535"
            ]
        ]
    },
    {
        "id": "864b89d6485ddac4",
        "type": "ui_text_input",
        "z": "4821a41b2fd327fb",
        "name": "",
        "label": "Select a color",
        "tooltip": "",
        "group": "d68e7be3.88f088",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "color",
        "delay": 300,
        "topic": "Select a color",
        "x": 140,
        "y": 420,
        "wires": [
            [
                "71ec6c626243f535"
            ]
        ]
    },
    {
        "id": "cffb599fd51d0200",
        "type": "http in",
        "z": "813a171cf0470b24",
        "name": "Test Input Point",
        "url": "/test",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 140,
        "wires": [
            [
                "3cc51bee5b3acd4c"
            ]
        ]
    },
    {
        "id": "0d49c1e77a91ecc4",
        "type": "debug",
        "z": "813a171cf0470b24",
        "name": "debug 24",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 140,
        "wires": []
    },
    {
        "id": "3cc51bee5b3acd4c",
        "type": "function",
        "z": "813a171cf0470b24",
        "name": "function 6",
        "func": "msg.payload = \"Service called\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 140,
        "wires": [
            [
                "0d49c1e77a91ecc4"
            ]
        ]
    },
    {
        "id": "751ee28017f82114",
        "type": "function",
        "z": "ebc615704b7e2ae8",
        "name": "SUM(DET)>0 and TOT=0",
        "func": "msg.payload = {\n    \"facts\": {\n        \"failure\": 1,\n        \"SUM(DET)\": 1,\n        \"TOT\": 0\n    },\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 560,
        "wires": [
            [
                "11de8bde4637a9a8"
            ]
        ]
    },
    {
        "id": "3fc2c4e0ee9964c4",
        "type": "inject",
        "z": "ebc615704b7e2ae8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 880,
        "y": 460,
        "wires": [
            [
                "1527a2966802760b"
            ]
        ]
    },
    {
        "id": "1527a2966802760b",
        "type": "function",
        "z": "ebc615704b7e2ae8",
        "name": "Failure not present",
        "func": "msg.payload = {\n    \"facts\": {\n        \"failure\": 0,\n        \"SUM(DET)\": 1,\n        \"TOT\": 1\n    },\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 460,
        "wires": [
            [
                "11de8bde4637a9a8"
            ]
        ]
    },
    {
        "id": "04a24b4e62ec2c9f",
        "type": "inject",
        "z": "ebc615704b7e2ae8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 880,
        "y": 560,
        "wires": [
            [
                "751ee28017f82114"
            ]
        ]
    },
    {
        "id": "299c20ed5761987a",
        "type": "function",
        "z": "ebc615704b7e2ae8",
        "name": "SUM(DET)=0 and TOT>0",
        "func": "msg.payload = {\n    \"facts\": {\n        \"failure\": 1,\n        \"SUM(DET)\": 0,\n        \"TOT\": 1\n    },\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 660,
        "wires": [
            [
                "11de8bde4637a9a8"
            ]
        ]
    },
    {
        "id": "b6b113a3e3a05e13",
        "type": "inject",
        "z": "ebc615704b7e2ae8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 880,
        "y": 660,
        "wires": [
            [
                "299c20ed5761987a"
            ]
        ]
    },
    {
        "id": "c74c908267123db7",
        "type": "function",
        "z": "ebc615704b7e2ae8",
        "name": "SUM(DET)>0 and TOT>0",
        "func": "msg.payload = {\n    \"facts\": {\n        \"failure\": 1,\n        \"SUM(DET)\": 1,\n        \"TOT\": 1\n    },\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 760,
        "wires": [
            [
                "11de8bde4637a9a8"
            ]
        ]
    },
    {
        "id": "ad3a56ce27aeeeed",
        "type": "inject",
        "z": "ebc615704b7e2ae8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 880,
        "y": 760,
        "wires": [
            [
                "c74c908267123db7"
            ]
        ]
    },
    {
        "id": "1cc8638f5c3e5c18",
        "type": "function",
        "z": "ebc615704b7e2ae8",
        "name": "SUM(DET)=0 and TOT=0",
        "func": "msg.payload = {\n    \"facts\": {\n        \"failure\": 1,\n        \"SUM(DET)\": 0,\n        \"TOT\": 0\n    },\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 860,
        "wires": [
            [
                "11de8bde4637a9a8"
            ]
        ]
    },
    {
        "id": "1dfbf9ccaf916433",
        "type": "inject",
        "z": "ebc615704b7e2ae8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 880,
        "y": 860,
        "wires": [
            [
                "1cc8638f5c3e5c18"
            ]
        ]
    },
    {
        "id": "c3511da9c0380ee2",
        "type": "inject",
        "z": "ebc615704b7e2ae8",
        "name": "Inject Worfklow ID",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "SPAD",
        "payload": "29028",
        "payloadType": "num",
        "x": 230,
        "y": 100,
        "wires": [
            [
                "43fa7108ad5731fb"
            ]
        ]
    },
    {
        "id": "92528f916a9d42e9",
        "type": "ui_text_input",
        "z": "ebc615704b7e2ae8",
        "name": "Input Workflow ID",
        "label": "Workflow ID",
        "tooltip": "Enter a Workflow ID from the SPAD",
        "group": "48c415689cc2322d",
        "order": 2,
        "width": 7,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 230,
        "y": 160,
        "wires": [
            [
                "43fa7108ad5731fb"
            ]
        ]
    },
    {
        "id": "8f07215339b32651",
        "type": "subflow:c5ce2d38887016b2",
        "z": "ebc615704b7e2ae8",
        "name": "",
        "x": 1030,
        "y": 120,
        "wires": [
            [
                "3b24e0953c2b9c64"
            ],
            []
        ]
    },
    {
        "id": "43fa7108ad5731fb",
        "type": "http request",
        "z": "ebc615704b7e2ae8",
        "name": "Get Workflow by ID",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost/spad/{{{payload}}}?DEBUG=true",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "X-JBID",
                "valueType": "other",
                "valueValue": "kapoo"
            },
            {
                "keyType": "other",
                "keyValue": "X-API-KEY",
                "valueType": "other",
                "valueValue": "x5nDCpvGTkvHniq8wJ9m"
            }
        ],
        "x": 450,
        "y": 120,
        "wires": [
            [
                "10ed8cae4434227a"
            ]
        ]
    },
    {
        "id": "10ed8cae4434227a",
        "type": "function",
        "z": "ebc615704b7e2ae8",
        "name": "Get Facts from SPAD (WorkflowID)",
        "func": "msg.payload.facts = msg.payload.data[0].facts\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 120,
        "wires": [
            [
                "8f07215339b32651"
            ]
        ]
    },
    {
        "id": "c26c18b504bdf465",
        "type": "function",
        "z": "ebc615704b7e2ae8",
        "name": "Get Facts from DB",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 240,
        "wires": [
            [
                "8f07215339b32651"
            ]
        ]
    },
    {
        "id": "43ed29bdfec959cc",
        "type": "function",
        "z": "ebc615704b7e2ae8",
        "name": "Get Facts from Spreadsheet",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 340,
        "wires": [
            [
                "8f07215339b32651"
            ]
        ]
    },
    {
        "id": "3b24e0953c2b9c64",
        "type": "function",
        "z": "ebc615704b7e2ae8",
        "name": "function 11",
        "func": "\nmsg.payload.facts.failure = 1\nmsg.payload.facts[\"SUM(DET)\"] = 1\nmsg.payload.facts[\"TOT\"] = 0\n\nmsg.payload.csv = [{}]\nmsg.payload.csv[0] = msg.payload.facts\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 320,
        "wires": [
            [
                "92069d020a645ba5",
                "11de8bde4637a9a8"
            ]
        ]
    },
    {
        "id": "92069d020a645ba5",
        "type": "debug",
        "z": "ebc615704b7e2ae8",
        "name": "debug 44",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 240,
        "wires": []
    },
    {
        "id": "d43d98523cecf095",
        "type": "link in",
        "z": "ebc615704b7e2ae8",
        "name": "link in 14",
        "links": [
            "1d6882431fd8622b"
        ],
        "x": 1435,
        "y": 500,
        "wires": [
            [
                "11de8bde4637a9a8",
                "6461700eed93af3c"
            ]
        ]
    },
    {
        "id": "9b085224f1089d53",
        "type": "debug",
        "z": "ebc615704b7e2ae8",
        "name": "Go To: Company Additivity Check",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2060,
        "y": 520,
        "wires": []
    },
    {
        "id": "11de8bde4637a9a8",
        "type": "switch",
        "z": "ebc615704b7e2ae8",
        "name": "Failure Present?",
        "property": "payload.csv[0].failure",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1560,
        "y": 660,
        "wires": [
            [
                "d4dbcb211cdb2e13"
            ],
            [
                "7aeadf48809a024a",
                "d631b7c1b3f67b00"
            ]
        ]
    },
    {
        "id": "d4dbcb211cdb2e13",
        "type": "function",
        "z": "ebc615704b7e2ae8",
        "name": "Failure is not present",
        "func": "msg.payload.csv[0].action = \"Go To: Company Additivity Check\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 520,
        "wires": [
            [
                "9b085224f1089d53",
                "4e52903910e4d97b"
            ]
        ]
    },
    {
        "id": "7aeadf48809a024a",
        "type": "switch",
        "z": "ebc615704b7e2ae8",
        "name": "SUM(DET) = 0 || SUM(DET) > 0",
        "property": "payload.csv[0][\"SUM(DET)\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1830,
        "y": 840,
        "wires": [
            [
                "594d1934dd5ccf1b"
            ],
            [
                "0784305320700a40"
            ]
        ]
    },
    {
        "id": "594d1934dd5ccf1b",
        "type": "switch",
        "z": "ebc615704b7e2ae8",
        "name": "SUM(DET)=0 && [TOT = 0 || TOT >0]",
        "property": "payload.csv[0][\"TOT\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2170,
        "y": 760,
        "wires": [
            [
                "8b52f2e03f6b0b70"
            ],
            [
                "795397987b2a49b7"
            ]
        ]
    },
    {
        "id": "0784305320700a40",
        "type": "switch",
        "z": "ebc615704b7e2ae8",
        "name": "SUM(DET)=0 && [TOT = 0 || TOT >0]",
        "property": "payload.csv[0][\"TOT\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2170,
        "y": 920,
        "wires": [
            [
                "9ff33c64e58ec21f"
            ],
            [
                "98f3fa50f4e3cd02"
            ]
        ]
    },
    {
        "id": "9ff33c64e58ec21f",
        "type": "function",
        "z": "ebc615704b7e2ae8",
        "name": "SUM(DET)>0 and TOT=0",
        "func": "msg.payload.csv[0][\"TOT\"] = msg.payload.csv[0][\"SUM(DET)\"]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 900,
        "wires": [
            [
                "d6c96ee5ed2662fa",
                "4e52903910e4d97b"
            ]
        ]
    },
    {
        "id": "795397987b2a49b7",
        "type": "function",
        "z": "ebc615704b7e2ae8",
        "name": "SUM(DET)=0 and TOT>0",
        "func": "msg.payload.csv[0].action = \"Proate data based on X(DET) = TOT\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 780,
        "wires": [
            [
                "54f845d7783dae6d",
                "4e52903910e4d97b"
            ]
        ]
    },
    {
        "id": "8b52f2e03f6b0b70",
        "type": "function",
        "z": "ebc615704b7e2ae8",
        "name": "SUM(DET)=0 and TOT=0",
        "func": "msg.payload.csv[0].action = \"Impute?\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 740,
        "wires": [
            [
                "3eb1863692f174b0",
                "4e52903910e4d97b"
            ]
        ]
    },
    {
        "id": "98f3fa50f4e3cd02",
        "type": "function",
        "z": "ebc615704b7e2ae8",
        "name": "SUM(DET)>0 and TOT>0",
        "func": "msg.payload.csv[0][\"ESMD\"] = msg.payload.csv[0][\"SUM(DET)\"] / msg.payload.csv[0][\"TOT\"]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 1020,
        "wires": [
            [
                "117f7620efb84422",
                "4e52903910e4d97b"
            ]
        ]
    },
    {
        "id": "3eb1863692f174b0",
        "type": "debug",
        "z": "ebc615704b7e2ae8",
        "name": "balance output 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2670,
        "y": 740,
        "wires": []
    },
    {
        "id": "54f845d7783dae6d",
        "type": "debug",
        "z": "ebc615704b7e2ae8",
        "name": "balance output 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2670,
        "y": 780,
        "wires": []
    },
    {
        "id": "d6c96ee5ed2662fa",
        "type": "debug",
        "z": "ebc615704b7e2ae8",
        "name": "balance output 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2670,
        "y": 900,
        "wires": []
    },
    {
        "id": "117f7620efb84422",
        "type": "switch",
        "z": "ebc615704b7e2ae8",
        "name": "msg.payload[\"ESMD\"]",
        "property": "payload.csv[0][\"ESMD\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "btwn",
                "v": "0.8",
                "vt": "num",
                "v2": "1.2",
                "v2t": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2680,
        "y": 1020,
        "wires": [
            [
                "25247c97a53e8d68"
            ],
            [
                "1c783596898c8467"
            ]
        ]
    },
    {
        "id": "25247c97a53e8d68",
        "type": "function",
        "z": "ebc615704b7e2ae8",
        "name": "Set TOTAL = SUM(DET)",
        "func": "msg.payload.csv[0][\"TOTAL\"] = msg.payload.csv[0][\"SUM(DET)\"]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2930,
        "y": 980,
        "wires": [
            [
                "b1d071a4c7595931",
                "4e52903910e4d97b"
            ]
        ]
    },
    {
        "id": "1c783596898c8467",
        "type": "switch",
        "z": "ebc615704b7e2ae8",
        "name": "INDP(ind and geo)>1?",
        "property": "payload.csv[0].INDP",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2920,
        "y": 1080,
        "wires": [
            [
                "e57d82407e9255e7"
            ],
            [
                "c3405e214ce0544a"
            ]
        ]
    },
    {
        "id": "b1d071a4c7595931",
        "type": "debug",
        "z": "ebc615704b7e2ae8",
        "name": "balance output 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3150,
        "y": 980,
        "wires": []
    },
    {
        "id": "9831d99463f98853",
        "type": "debug",
        "z": "ebc615704b7e2ae8",
        "name": "balance output 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3370,
        "y": 1060,
        "wires": []
    },
    {
        "id": "7b38443176fcdeba",
        "type": "debug",
        "z": "ebc615704b7e2ae8",
        "name": "balance output 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3330,
        "y": 1100,
        "wires": []
    },
    {
        "id": "e57d82407e9255e7",
        "type": "function",
        "z": "ebc615704b7e2ae8",
        "name": "SET IMPUTATION FLAG",
        "func": "msg.payload.csv[0].action = \"SET IMPUTATION FLAG?\"\nmsg.payload.csv[0][\"Varx-IMBALANCE\"] = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3150,
        "y": 1060,
        "wires": [
            [
                "9831d99463f98853",
                "4e52903910e4d97b"
            ]
        ]
    },
    {
        "id": "c3405e214ce0544a",
        "type": "function",
        "z": "ebc615704b7e2ae8",
        "name": "Rake (DET) = TOT",
        "func": "msg.payload.csv[0][\"Rake(DET)\"] = msg.payload.csv[0][\"TOT\"]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3130,
        "y": 1100,
        "wires": [
            [
                "7b38443176fcdeba",
                "4e52903910e4d97b"
            ]
        ]
    },
    {
        "id": "4e52903910e4d97b",
        "type": "link out",
        "z": "ebc615704b7e2ae8",
        "name": "link out 16",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 2825,
        "y": 360,
        "wires": []
    },
    {
        "id": "d631b7c1b3f67b00",
        "type": "debug",
        "z": "ebc615704b7e2ae8",
        "name": "debug 46",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1840,
        "y": 660,
        "wires": []
    },
    {
        "id": "6461700eed93af3c",
        "type": "debug",
        "z": "ebc615704b7e2ae8",
        "name": "debug 57",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 400,
        "wires": []
    },
    {
        "id": "2c6bccf874de19c8",
        "type": "link in",
        "z": "01f5b46ca228a07e",
        "name": "link in 16",
        "links": [
            "dbbcb48515f896cb"
        ],
        "x": 185,
        "y": 80,
        "wires": [
            [
                "80a0b818fdf305bc"
            ]
        ]
    },
    {
        "id": "80a0b818fdf305bc",
        "type": "function",
        "z": "01f5b46ca228a07e",
        "name": "NONNORM module",
        "func": "if (msg.payload.csv[0].OPSTATS === \"Y\") {\n    if (msg.payload.csv[0].SURVUTYP === \"MU\" && msg.payload.csv[0].ACTVMIO < 12 && (msg.payload.csv[0].ACTVMIO_F === \"L\" || msg.payload.csv[0].EPPAYANN === 0)) {\n        msg.payload.csv[0].NONNORM = \"B\";\n        msg.payload.csv[0].NONNORM_F = \"J\";\n    } else {\n        if (msg.payload.csv[0].ACTVMIO < 12) {\n            msg.payload.csv[0].NONNORM = \"S\";\n            msg.payload.csv[0].NONNORM_F = \"J\";\n        }\n    }\n} else {\n    msg.payload.csv[0].NONNORM = \"D\";\n    msg.payload.csv[0].NONNORM_F = \"J\";\n}\nmsg.payload.csv[0].A = true\nmsg.payload.csv[0].action = \"Return to RWS NonNORM Routing\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 140,
        "wires": [
            [
                "3327d8455cf7e97b",
                "b37e6545ddd4e8be"
            ]
        ]
    },
    {
        "id": "3327d8455cf7e97b",
        "type": "debug",
        "z": "01f5b46ca228a07e",
        "name": "Set_NONNORM output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 140,
        "wires": []
    },
    {
        "id": "b37e6545ddd4e8be",
        "type": "link out",
        "z": "01f5b46ca228a07e",
        "name": "link out 13",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 445,
        "y": 200,
        "wires": []
    },
    {
        "id": "7d91540d69ac16c1",
        "type": "link in",
        "z": "b658ecf4c9aae708",
        "name": "link in 17",
        "links": [
            "02482c164222726b",
            "434436c270b7f283",
            "4e52903910e4d97b",
            "a6ab628560a7c8c9",
            "b37e6545ddd4e8be",
            "bad79e5ee645cc24",
            "eb575c3f71964e1e",
            "edf06df5cb8410e9",
            "f7e7a2a2e4eb195a",
            "d6c45ec5ceb3d90d",
            "2e09b853297763c9",
            "05e1e9f94e92a19d",
            "62e629bde644c4ac",
            "312be7f6e10bbadc",
            "b6899b0c09b0259e",
            "1550efeda1667825",
            "7dae0df881453eeb",
            "45908235e45f6dfd",
            "eda519aa8a1db303",
            "8b699616f9c5a9b5",
            "d9030a8fd1f031b8",
            "63e57e09491e405e",
            "fcf92106d34fe5ff",
            "aafa3aaec7fae7e6",
            "d167c6cf7b89444d",
            "ca558b1ab669675d",
            "782e6a52f1a66003",
            "daa2e09cc7fbb842",
            "6de317f273718e08",
            "42f918976305a0a4",
            "86f363969a0f8d77",
            "a6250f4cc9b410d4",
            "94f8c7ddd4beeac8",
            "ed77e55538e24a1f",
            "b6bebbeac0549686",
            "ece1e11393b49799",
            "18792e3b18514eb9",
            "8499c812e62fc00c",
            "83cf5c1c02a121e8",
            "2e4029be13b46163",
            "108f9747956b439a",
            "25627bf820122fe8",
            "739edc4c44d5eb0b",
            "163aa434e03fa911",
            "ec6bfe4f7818633f",
            "246d06dd46410f88",
            "70c4debe9a1adfae",
            "67cb21d2f5fc02bd",
            "5f40acc0f51bf3a2",
            "01595edbd5bb3ca9",
            "ada77cfa9573c816",
            "9fe7f21d3c9037a4",
            "daf2afc7f182f934",
            "9343c59ba9dd4152",
            "55d8b26f48ef05bd",
            "b683e25439a951d1",
            "e74d8d0f9702bdb7",
            "b72ac573a0a35c8a",
            "93b50ff4956eb444",
            "2b91281b80bace6b",
            "290f0910bd81e94b",
            "f34ac015feb048da",
            "76205591b8230183",
            "e608a1d198c82a60",
            "641e46c32d5b58f3",
            "8be3531210d71bdc",
            "0b0f86b61f9edc20",
            "c79880fef432a005",
            "e75b332d63ba3e20",
            "bb4dba28bc4486e1",
            "d23c27e777f90ccd",
            "33026067404b94f9",
            "91b34f7b64e183bd",
            "b8f1ae7b487a68f6",
            "2dcb1956c632490d",
            "b2edc9dbdd9af134",
            "b206e07710f5e28f",
            "cae6e041faaff1fb",
            "0422aeccc8321ad8",
            "f096483c422c4725",
            "7f9f9ce1831e7eba"
        ],
        "x": 205,
        "y": 260,
        "wires": [
            [
                "9ef8d3c13114fdf5"
            ]
        ]
    },
    {
        "id": "9ef8d3c13114fdf5",
        "type": "function",
        "z": "b658ecf4c9aae708",
        "name": "Post Data Format",
        "func": "// let arr = []\n\n// if (msg.payload.csv) {\n//     msg.payload = msg.payload.csv\n// }\n\n// for (let prop in msg.payload[0]) {\n//     if (msg.payload[0].hasOwnProperty(prop)) {\n//         arr.push(\n//             {\n//                 \"postData\": JSON.stringify(prop) + \": \" + JSON.stringify(msg.payload[0][prop])\n//             }\n//         )\n//     }\n// }\n\n// msg.payload = arr\n// return msg;\n\n// ------\n\n// let postDataObj = {};\n\n// if (msg.payload.csv) {\n//     msg.payload = msg.payload.csv;\n// }\n\n// for (let prop in msg.payload[0]) {\n//     if (msg.payload[0].hasOwnProperty(prop)) {\n//         postDataObj[prop] = msg.payload[0][prop];\n//     }\n// }\n\n// msg.topic = \"post\"; // Add a topic to help the join node distinguish between pre and post data\n// msg.payload = postDataObj; // The payload is now an object containing all the post-data variables\n// return msg;\n\n\n// --------\n\n// Initialize postDataObj to an empty object\nlet postDataObj = {};\n\n// Check if msg.payload.csv exists and if so, use it\nif (msg.payload.csv) {\n    msg.payload = msg.payload.csv;\n}\n\n// Check if msg.payload[0] exists\n\n// get the global pointer in the csv\nlet ptr = global.get(\"ptrModuleFacts\") || 0\n\n\nif (msg.payload[ptr]) {\n    // Loop through the properties of msg.payload[0]\n    for (let prop in msg.payload[ptr]) {\n        if (msg.payload[ptr].hasOwnProperty(prop)) {\n            postDataObj[prop] = msg.payload[ptr][prop];\n        }\n    }\n} else {\n    // If msg.payload[0] doesn't exist, postDataObj remains an empty object\n    postDataObj = {};\n}\n\nmsg.topic = \"post\";  // Add a topic to help the join node distinguish between pre and post data\nmsg.payload = {\n    \"post\": postDataObj  // The payload is now an object containing all the post-data variables\n}\nreturn msg;  // Return the modified message object\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 260,
        "wires": [
            [
                "5f0e9f1e3f037661"
            ]
        ]
    },
    {
        "id": "617d768f3414b52e",
        "type": "link in",
        "z": "b658ecf4c9aae708",
        "name": "link in 19",
        "links": [
            "500b5d417bd3a1ee",
            "8fc8da4acdeb51a4"
        ],
        "x": 75,
        "y": 240,
        "wires": [
            [
                "02d678f5c34fe438",
                "ceeca7b3bb06c2d8"
            ]
        ]
    },
    {
        "id": "ceeca7b3bb06c2d8",
        "type": "function",
        "z": "b658ecf4c9aae708",
        "name": "PreData Format",
        "func": "let preDataObj = {};\n\nif (msg.payload.csv) {\n    msg.payload = msg.payload.csv;\n}\nlet ptr = global.get(\"ptrModuleFacts\") || 0\n\nfor (let prop in msg.payload[ptr]) {\n    if (msg.payload[ptr].hasOwnProperty(prop)) {\n        preDataObj[prop] = msg.payload[ptr][prop];\n    }\n}\n\nmsg.topic = \"pre\"; // Add a topic to help the join node distinguish between pre and post data\n// msg.payload = preDataObj; // The payload is now an object containing all the pre-data variables\nmsg.payload = {\n    'pre': global.get(\"originalData\")// preDataObj // NK\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 200,
        "wires": [
            [
                "dcc989e7a52a4892",
                "5f0e9f1e3f037661"
            ]
        ]
    },
    {
        "id": "fe9f3d905539c784",
        "type": "function",
        "z": "b658ecf4c9aae708",
        "name": "Table Display Pre/Post/Changes",
        "func": "// Retrieve existing tableData from context, or initialize to an empty array if it doesn't exist\nvar tableData = flow.get(\"tableData\") || [];\n\n// var tableData = global.get(\"tableData\") || []; // NK added\n\n// Function to find an existing row based on \"Variable\" field\nfunction findRow(variable) {\n    return tableData.find(r => r.Variable === variable);\n}\n\n// Handle \"pre\" data\nif (msg.topic === \"pre\") {\n    let preData = msg.payload.pre;\n\n    // Update existing rows and/or add new rows\n    for (let key in preData) {\n        if (preData.hasOwnProperty(key)) {\n            let row = findRow(key);\n            if (!row) {\n                row = {\n                    \"Variable\": key,\n                    \"Pre\": preData[key],\n                    \"Post\": \"Not Available\",\n                    \"Changed_Indicator\": \"\"\n                };\n                tableData.push(row);\n            } else {\n                row.Pre = preData[key];\n            }\n        }\n    }\n\n    // Handle \"post\" data\n} else if (msg.topic === \"post\") {\n    let postData = msg.payload.post;\n\n    // Update existing rows with post data\n    tableData.forEach(function (row) {\n        if (postData.hasOwnProperty(row.Variable)) {\n            row.Post = postData[row.Variable];\n            if (row.Pre !== \"Not Available\" && row.Pre !== row.Post) {\n                row.Changed_Indicator = \"Y\";\n            }\n        }\n    });\n\n    // Add new rows for new post data variables\n    for (let key in postData) {\n        if (postData.hasOwnProperty(key)) {\n            let row = findRow(key);\n            if (!row) {\n                row = {\n                    \"Variable\": key,\n                    \"Pre\": \"Not Available\",\n                    \"Post\": postData[key],\n                    \"Changed_Indicator\": \"Y\"\n                };\n                tableData.push(row);\n            }\n        }\n    }\n}\n\n// Save the updated tableData back into the context\nflow.set(\"tableData\", tableData);\n\n// Return the updated tableData as the message payload\nmsg.payload = tableData;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 220,
        "wires": [
            [
                "2b372b60778aab71"
            ]
        ]
    },
    {
        "id": "06c0561ca1caaf86",
        "type": "function",
        "z": "b658ecf4c9aae708",
        "name": "Insert Edits to Original Data",
        "func": "let variable = msg.payload.Pre.updates.Variable;\nlet preValue = msg.payload.Pre.updates.Pre;\n\n// Get the original data from the flow context, initialize to empty object if undefined\nlet original = flow.get('originalData') || {}; // commented NK\n// let original = global.get('originalData') || {}; // Added\n// Check if preValue can be converted to a number\nif (!isNaN(parseFloat(preValue)) && isFinite(preValue)) {\n    preValue = Number(preValue); // Convert to number\n}\n\noriginal[variable] = preValue; // Update the value in the object\n// global.set('originalData', original); //HF\n\n// flow.set('originalData', original); // Save the updated object back to flow context\n// flow.set('moduleFacts', original); // Save the updated object back to flow context\n\nconsole.log('original after', original);\nmsg.payload = [original]; // Update msg.payload to send the object further down the flow\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 140,
        "wires": [
            [
                "60931347e15bc805"
            ]
        ]
    },
    {
        "id": "8dee06773380424f",
        "type": "join",
        "z": "b658ecf4c9aae708",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1510,
        "y": 140,
        "wires": [
            [
                "06c0561ca1caaf86"
            ]
        ]
    },
    {
        "id": "dcc989e7a52a4892",
        "type": "function",
        "z": "b658ecf4c9aae708",
        "name": "Capture Original Data",
        "func": "msg.payload = {\n    original: msg.payload\n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 140,
        "wires": [
            [
                "8dee06773380424f"
            ]
        ]
    },
    {
        "id": "6b789f06055f6c99",
        "type": "function",
        "z": "b658ecf4c9aae708",
        "name": "Capture Table Edits",
        "func": "let p = msg.payload\n\nlet dataPtr = global.get(\"ptrModuleFacts\") || 0\n\nlet facts = global.get(\"moduleFacts\") || []\nlet fact = facts[dataPtr] || {}\n// get the key and value of the msg.payload.updates\nfact[p.Variable] = p.Pre\n\nfacts[dataPtr] = fact\nglobal.set(\"moduleFacts\", facts)\n// global.set(\"originalData\", facts[dataPtr]) //Hf\n\nmsg.payload = facts\nmsg.payload.updates = p\n\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 400,
        "wires": [
            [
                "8dee06773380424f",
                "88fa3b7e9e7044fd"
            ]
        ]
    },
    {
        "id": "5f0e9f1e3f037661",
        "type": "join",
        "z": "b658ecf4c9aae708",
        "name": "join",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 550,
        "y": 220,
        "wires": [
            [
                "fe9f3d905539c784"
            ]
        ]
    },
    {
        "id": "02d678f5c34fe438",
        "type": "function",
        "z": "b658ecf4c9aae708",
        "name": "Table Display PreData Only",
        "func": "// Initialize tableData array to store rows\nvar tableData = [];\n\nlet preDataObj = {};\nif (msg.payload.csv) {\n    msg.payload = msg.payload.csv;\n}\nelse {\n    msg.payload = global.get(\"moduleFacts\")\n}\n\n// get the global pointer in the csv\nlet ptr = global.get(\"ptrModuleFacts\") || 0\n\nfor (let prop in msg.payload[ptr]) {\n    if (msg.payload[ptr].hasOwnProperty(prop)) {\n        preDataObj[prop] = msg.payload[ptr][prop];\n    }\n}\n\n// Prepare the payload for ui_table\nfor (let key in preDataObj) {\n    if (preDataObj.hasOwnProperty(key)) {\n        let row = {\n            \"Variable\": key,\n            \"Pre\": preDataObj[key],\n            \"Post\": \"\",  // Empty since Post data is not available\n            \"Changed_Indicator\": \"\"  // Empty since Post data is not available\n        };\n        tableData.push(row);\n    }\n}\n\nmsg.payload = tableData;  // Replace the payload with the array of table rows\nflow.set(\"tableData\", tableData);\nflow.set(\"originalData\", msg.payload[ptr]);\n\n\nreturn msg;  // Send the message for ui_table to display\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 400,
        "wires": [
            [
                "2b372b60778aab71",
                "f0f155bfff8415a5"
            ]
        ]
    },
    {
        "id": "2b372b60778aab71",
        "type": "ui_etable",
        "z": "b658ecf4c9aae708",
        "payload": "[{\"field\":\"Variable\",\"title\":\"Variable\",\"width\":250,\"align\":\"left\",\"formatter\":\"plaintext\"},{\"field\":\"Pre\",\"title\":\"Pre\",\"width\":150,\"align\":\"left\",\"formatter\":\"plaintext\",\"editor\":\"input\"},{\"field\":\"Post\",\"title\":\"Post\",\"width\":150,\"align\":\"left\",\"formatter\":\"plaintext\"},{\"field\":\"Changed_Indicator\",\"title\":\"Changed\",\"width\":100,\"align\":\"left\",\"formatter\":\"plaintext\"}]",
        "payloadType": "json",
        "options": "{}",
        "group": "1d1a43b7179c848f",
        "name": "Results",
        "order": 4,
        "width": 12,
        "height": 12,
        "columns": [],
        "outputs": 1,
        "cts": false,
        "x": 1040,
        "y": 400,
        "wires": [
            [
                "6b789f06055f6c99"
            ]
        ]
    },
    {
        "id": "60931347e15bc805",
        "type": "link out",
        "z": "b658ecf4c9aae708",
        "name": "link out 55",
        "mode": "link",
        "links": [
            "ca8be9e1afb53866"
        ],
        "x": 1915,
        "y": 140,
        "wires": []
    },
    {
        "id": "88fa3b7e9e7044fd",
        "type": "debug",
        "z": "b658ecf4c9aae708",
        "name": "Display Edited Data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 400,
        "wires": []
    },
    {
        "id": "f0f155bfff8415a5",
        "type": "debug",
        "z": "b658ecf4c9aae708",
        "name": "Checking for Select Record ptr",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 360,
        "wires": []
    },
    {
        "id": "665f97ef69efc31f",
        "type": "ui_text_input",
        "z": "b658ecf4c9aae708",
        "name": "",
        "label": "Search",
        "tooltip": "Enter text for search...",
        "group": "1d1a43b7179c848f",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 380,
        "y": 580,
        "wires": [
            [
                "2b40a9d2b73972ba"
            ]
        ]
    },
    {
        "id": "2b40a9d2b73972ba",
        "type": "function",
        "z": "b658ecf4c9aae708",
        "name": "Pass search data for tabledata",
        "func": "// msg.payload = {\n//     command: \"searchData\",\n//     arguments: [msg.payload],  // search term from ui_text_input\n//     returnPromise: true\n// };\n\n\n\n// Sample data (replace with your actual data source or previous payload)\nvar data = flow.get(\"tableData\")\n\n// Filter the data based on the search term\nvar searchTerm = msg.payload;\nvar filteredData = data.filter(row => {\n    return Object.values(row).some(value => String(value).toLowerCase().includes(searchTerm.toLowerCase()));\n});\n\nmsg.payload = filteredData;\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 580,
        "wires": [
            [
                "2b372b60778aab71",
                "57f21802ddfb06f5"
            ]
        ]
    },
    {
        "id": "57f21802ddfb06f5",
        "type": "debug",
        "z": "b658ecf4c9aae708",
        "name": "debug 92",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 580,
        "wires": []
    },
    {
        "id": "f21a93fafc0f5662",
        "type": "ui_button",
        "z": "5e1c7c0d7569a4cb",
        "name": "",
        "group": "ef4f9868d6da5e21",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Generate",
        "tooltip": "",
        "color": "blue",
        "bgcolor": "",
        "className": "",
        "icon": "send",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 240,
        "y": 320,
        "wires": [
            [
                "112195b8c626c5d5"
            ]
        ]
    },
    {
        "id": "32db157c82a77669",
        "type": "ui_text_input",
        "z": "5e1c7c0d7569a4cb",
        "name": "",
        "label": "Prompt Input",
        "tooltip": "",
        "group": "a54754fb1b7c0694",
        "order": 1,
        "width": 16,
        "height": 2,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 230,
        "y": 400,
        "wires": [
            [
                "3391b53461b573fb"
            ]
        ]
    },
    {
        "id": "67f9148a915473ca",
        "type": "join",
        "z": "5e1c7c0d7569a4cb",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 650,
        "y": 340,
        "wires": [
            [
                "90f2ba4ed97317e5",
                "6ac31ee306c88d7e"
            ]
        ]
    },
    {
        "id": "b02686cfec3ca4ab",
        "type": "chatgpt",
        "z": "5e1c7c0d7569a4cb",
        "name": "ChatGPT API",
        "API_KEY": "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",
        "Organization": "org-pIsSU8akeKm4icKTYZaBQXqM",
        "topic": "__EMPTY__",
        "BaseUrl": "https://api.openai.com",
        "x": 830,
        "y": 340,
        "wires": [
            [
                "4e99a0f541ed2aa4",
                "cd54c5f7cbcd9b46"
            ]
        ]
    },
    {
        "id": "4e99a0f541ed2aa4",
        "type": "debug",
        "z": "5e1c7c0d7569a4cb",
        "name": "gpt output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 340,
        "wires": []
    },
    {
        "id": "112195b8c626c5d5",
        "type": "change",
        "z": "5e1c7c0d7569a4cb",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "completion",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "complete",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 320,
        "wires": [
            [
                "67f9148a915473ca"
            ]
        ]
    },
    {
        "id": "3391b53461b573fb",
        "type": "change",
        "z": "5e1c7c0d7569a4cb",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "prompt",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 400,
        "wires": [
            [
                "67f9148a915473ca"
            ]
        ]
    },
    {
        "id": "90f2ba4ed97317e5",
        "type": "debug",
        "z": "5e1c7c0d7569a4cb",
        "name": "Topic",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 540,
        "wires": []
    },
    {
        "id": "6ac31ee306c88d7e",
        "type": "function",
        "z": "5e1c7c0d7569a4cb",
        "name": "function 19",
        "func": "msg.payload=msg.payload.prompt\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 560,
        "wires": [
            [
                "b02686cfec3ca4ab"
            ]
        ]
    },
    {
        "id": "cd54c5f7cbcd9b46",
        "type": "ui_text",
        "z": "5e1c7c0d7569a4cb",
        "group": "ef4f9868d6da5e21",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1090,
        "y": 540,
        "wires": []
    },
    {
        "id": "e37d1480a526c577",
        "type": "inject",
        "z": "6f369789c773517d",
        "name": "Incoming Data from QBES",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"csv\":[{\"failure\":1,\"SUM(DET)\":1,\"TOT\":1,\"REPORTING_ID_TYP\":\"SU\",\"FORM_CODE_IRS\":\"01\",\"NAICS_SECTOR\":51,\"RCPT_NET_IRS_CURR\":100,\"RCPT_INTEREST_IRS_CURR\":10,\"RCPT_GROSSRENT_IRS_CURR\":20,\"RCPT_OTHINCOME_IRS_CURR\":30,\"RCPT_GROSSINC_IRS_CURR\":40,\"RCPT_TOTINC_IRS_CURR\":50,\"RCPT_TOTREV_IRS_CURR\":60,\"COST_GOODSOLD_IRS_CURR\":70,\"AIES_SCOPE\":\"Y\",\"BR_STAT\":\"Y\",\"NAICS_CODE_OLD\":4821,\"NAICS_WRITIN_TEXT\":\"na\",\"KAU_NAICS\":6221101,\"COVCHGCD\":111,\"COVCHGDT\":\"2022-12-31\",\"Data\":0,\"PDIV\":\"S\",\"ANAIC\":1151234,\"EDTROUTE\":1,\"NAICOLD\":2151234,\"NAICSDSG\":3151234,\"NAICMAIL\":4151234,\"TRADCODE\":\"M\",\"STFIPS\":\"01\",\"GEOREG\":\"03\",\"ACTV_MIO_NUM\":8,\"ACTV_MIO_NUM_FLG\":\"RC\",\"OPSTATS\":\"\",\"OPSTATS_FLG\":\"R\",\"COV_CHG_CODE\":791,\"ACTVMIO_R\":10,\"COV_CHG_DATE\":\"2022-12-31\",\"OPSTAT\":5,\"OPSTAT_FLAG\":\"R\",\"RECORD_TYP\":89,\"BMF_FR941\":3,\"EPPAYANN\":0,\"NONNORM_FLG\":\"\",\"NONNORM\":\"\",\"PAY_QTR1_VAL\":0,\"EMP_MAR12_NUM\":0,\"OPSTATS_F\":\"RC\",\"TEMPMIO\":0,\"ECPAYQ1\":0,\"ACTV_MIO_VAL\":0,\"ACTV_MIO_VAL_FLG\":\"L\",\"ECPAYQ2\":3,\"ECPAYQ3\":4,\"ECPAYQ4\":5,\"ECPAYQ4_F\":\"\",\"REFPER\":\"2023A1\",\"MADBPAYANN\":0,\"EMP_MAR12_NUM_F\":\"RG\",\"PAY_ANN_VAL\":1,\"PAY_QTR1_VAL_R\":0,\"PAY_QTR1_VAL_FLG\":\"R\",\"EMP_MAR12_NUM_FLG\":\"R\",\"CY_PAY_QTR1_VAL\":1,\"ECPAYQ1ZERO\":\"\",\"CY_EMP_MAR12_NUM\":1,\"ECEMPQ1\":1}]}",
        "payloadType": "json",
        "x": 150,
        "y": 60,
        "wires": [
            [
                "bf0c4cfa8872661e"
            ]
        ]
    },
    {
        "id": "bf0c4cfa8872661e",
        "type": "switch",
        "z": "6f369789c773517d",
        "name": "AIES_SCOPE = Y?",
        "property": "payload.csv[0].AIES_SCOPE",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Y",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "Y",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 60,
        "wires": [
            [],
            [
                "84a1f619dc333f6f"
            ]
        ]
    },
    {
        "id": "84a1f619dc333f6f",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6f369789c773517d",
        "name": "No, go to KAU to Company Additivity Check",
        "x": 670,
        "y": 40,
        "wires": [
            [
                "53749bc75b1dfefd"
            ]
        ]
    },
    {
        "id": "4ee1acdd5f25eedf",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6f369789c773517d",
        "name": "PV Prep",
        "x": 1360,
        "y": 200,
        "wires": [
            [
                "ec5fe14247aedef2"
            ]
        ]
    },
    {
        "id": "ec5fe14247aedef2",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6f369789c773517d",
        "name": "Call PV",
        "x": 1470,
        "y": 120,
        "wires": [
            [
                "d33c05b3903dd607"
            ]
        ]
    },
    {
        "id": "d33c05b3903dd607",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6f369789c773517d",
        "name": "PV Unload",
        "x": 1580,
        "y": 200,
        "wires": [
            [
                "350185b801143687"
            ]
        ]
    },
    {
        "id": "350185b801143687",
        "type": "http request",
        "z": "6f369789c773517d",
        "name": "Hot Deck Imputation for Estab Core",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1790,
        "y": 120,
        "wires": [
            [
                "224ebed81db4d417"
            ]
        ]
    },
    {
        "id": "224ebed81db4d417",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6f369789c773517d",
        "name": "Derived Items",
        "x": 1990,
        "y": 200,
        "wires": [
            [
                "2ec08aae604e8496"
            ]
        ]
    },
    {
        "id": "2ec08aae604e8496",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6f369789c773517d",
        "name": "Logical Checks",
        "x": 380,
        "y": 300,
        "wires": [
            [
                "e28f7745010476f6"
            ]
        ]
    },
    {
        "id": "e28f7745010476f6",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6f369789c773517d",
        "name": "Unit Balance",
        "x": 570,
        "y": 300,
        "wires": [
            [
                "8365a07470601995"
            ]
        ]
    },
    {
        "id": "8365a07470601995",
        "type": "http request",
        "z": "6f369789c773517d",
        "name": "MFG Imputation for Estab Non- Core/Raking",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 870,
        "y": 300,
        "wires": [
            [
                "5c34a139ed514d2a"
            ]
        ]
    },
    {
        "id": "5c34a139ed514d2a",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6f369789c773517d",
        "name": "Derived Items",
        "x": 1150,
        "y": 300,
        "wires": [
            [
                "ff19d31c6a2b2466"
            ]
        ]
    },
    {
        "id": "ff19d31c6a2b2466",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6f369789c773517d",
        "name": "Post Edit/Set Donor Stat",
        "x": 1370,
        "y": 300,
        "wires": [
            [
                "a6d9bbd9d7de92d6"
            ]
        ]
    },
    {
        "id": "a6d9bbd9d7de92d6",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6f369789c773517d",
        "name": "Classification",
        "x": 370,
        "y": 420,
        "wires": [
            [
                "ddb465088b8f229f"
            ]
        ]
    },
    {
        "id": "b26e87d4c3c7d83a",
        "type": "comment",
        "z": "6f369789c773517d",
        "name": "Yes, Estab",
        "info": "Create decision point\nCheck if record_typ_txt in (20,90)",
        "x": 120,
        "y": 140,
        "wires": []
    },
    {
        "id": "26906fbefd3e1105",
        "type": "comment",
        "z": "6f369789c773517d",
        "name": "KAU",
        "info": "Check if record_typ_txt = 30",
        "x": 110,
        "y": 420,
        "wires": []
    },
    {
        "id": "ddb465088b8f229f",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6f369789c773517d",
        "name": "Completeness Check / Core Variables",
        "x": 610,
        "y": 420,
        "wires": [
            [
                "13fe8441e829301b"
            ]
        ]
    },
    {
        "id": "13fe8441e829301b",
        "type": "http request",
        "z": "6f369789c773517d",
        "name": "HB Edits/Error localization/ Industry Av Imputation for KAU Core",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1010,
        "y": 420,
        "wires": [
            [
                "8c74ba923194419e"
            ]
        ]
    },
    {
        "id": "8c74ba923194419e",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6f369789c773517d",
        "name": "Derived Items",
        "x": 1330,
        "y": 420,
        "wires": [
            [
                "3592468b7a37a4e5"
            ]
        ]
    },
    {
        "id": "3592468b7a37a4e5",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6f369789c773517d",
        "name": "Logical Checks",
        "x": 1500,
        "y": 420,
        "wires": [
            [
                "d841a19d43f75a4d"
            ]
        ]
    },
    {
        "id": "d841a19d43f75a4d",
        "type": "http request",
        "z": "6f369789c773517d",
        "name": "HB Edits/Error localization/ Industry Av Imputation for KAU Totals",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1840,
        "y": 420,
        "wires": [
            [
                "ba41a6d6bbadf123"
            ]
        ]
    },
    {
        "id": "ba41a6d6bbadf123",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6f369789c773517d",
        "name": "Unit Balance",
        "x": 2170,
        "y": 420,
        "wires": [
            [
                "93d3a3bb2bc7fe51"
            ]
        ]
    },
    {
        "id": "93d3a3bb2bc7fe51",
        "type": "http request",
        "z": "6f369789c773517d",
        "name": "HDI Imputation for KAU Non- Totals",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2400,
        "y": 420,
        "wires": [
            [
                "d304099f5907aeda"
            ]
        ]
    },
    {
        "id": "d304099f5907aeda",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6f369789c773517d",
        "name": "Derived Items",
        "x": 2630,
        "y": 420,
        "wires": [
            [
                "5e55a24b5e76bb41"
            ]
        ]
    },
    {
        "id": "5e55a24b5e76bb41",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6f369789c773517d",
        "name": "Post Edit",
        "x": 2620,
        "y": 480,
        "wires": [
            [
                "c85e165158b85de6"
            ]
        ]
    },
    {
        "id": "c85e165158b85de6",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6f369789c773517d",
        "name": "Estab to KAU Additivity Check",
        "x": 420,
        "y": 540,
        "wires": [
            [
                "e1e45eb7e0325db3"
            ]
        ]
    },
    {
        "id": "24c0de35cd825782",
        "type": "comment",
        "z": "6f369789c773517d",
        "name": "Company",
        "info": "Check if record_typ_txt = 10",
        "x": 120,
        "y": 620,
        "wires": []
    },
    {
        "id": "e1e45eb7e0325db3",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6f369789c773517d",
        "name": "Derived Items",
        "x": 370,
        "y": 620,
        "wires": [
            [
                "f56806d39ee1ec63"
            ]
        ]
    },
    {
        "id": "f56806d39ee1ec63",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6f369789c773517d",
        "name": "Logical Checks",
        "x": 540,
        "y": 620,
        "wires": [
            [
                "cc3b9239a087da4e"
            ]
        ]
    },
    {
        "id": "cc3b9239a087da4e",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6f369789c773517d",
        "name": "Unit Balance",
        "x": 710,
        "y": 620,
        "wires": [
            [
                "650789b4359cdb2f"
            ]
        ]
    },
    {
        "id": "650789b4359cdb2f",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6f369789c773517d",
        "name": "Derived Items",
        "x": 870,
        "y": 620,
        "wires": [
            [
                "76f7c8d52c791e39"
            ]
        ]
    },
    {
        "id": "76f7c8d52c791e39",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6f369789c773517d",
        "name": "Post Edit",
        "x": 1020,
        "y": 620,
        "wires": [
            [
                "c77ef0698bfb465b"
            ]
        ]
    },
    {
        "id": "41a709043abe1e2b",
        "type": "http request",
        "z": "6f369789c773517d",
        "name": "Company verification and possible use of data",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1360,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "c77ef0698bfb465b",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6f369789c773517d",
        "name": "KAU to Company Additivity Check",
        "x": 440,
        "y": 700,
        "wires": [
            [
                "5e1163b33bca81bc"
            ]
        ]
    },
    {
        "id": "5e1163b33bca81bc",
        "type": "switch",
        "z": "6f369789c773517d",
        "name": "Changes made?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Y",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "Y",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 680,
        "y": 700,
        "wires": [
            [
                "a052cfcdea9284e3"
            ],
            [
                "9a3177f2d2f508f3"
            ]
        ]
    },
    {
        "id": "a052cfcdea9284e3",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6f369789c773517d",
        "name": "Yes, go to BR stat evaluation",
        "x": 920,
        "y": 700,
        "wires": [
            [
                "d6c3ae19808aee07"
            ]
        ]
    },
    {
        "id": "9a3177f2d2f508f3",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6f369789c773517d",
        "name": "Company Complete",
        "x": 710,
        "y": 780,
        "wires": [
            [
                "0d24eb67498d5cdd"
            ]
        ]
    },
    {
        "id": "0d24eb67498d5cdd",
        "type": "http request",
        "z": "6f369789c773517d",
        "name": "Send to HDI/Imputation/Estimation  Night run",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1010,
        "y": 780,
        "wires": [
            [
                "3ca182248e494d75"
            ]
        ]
    },
    {
        "id": "3ca182248e494d75",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6f369789c773517d",
        "name": "Rerun data prep edits or just Derived Items?",
        "x": 1390,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "53749bc75b1dfefd",
        "type": "link out",
        "z": "6f369789c773517d",
        "name": "go to KAU additivity check",
        "mode": "link",
        "links": [
            "e269a48b71e0ab14"
        ],
        "x": 885,
        "y": 40,
        "wires": []
    },
    {
        "id": "e269a48b71e0ab14",
        "type": "link in",
        "z": "6f369789c773517d",
        "name": "link in 25",
        "links": [
            "53749bc75b1dfefd"
        ],
        "x": 195,
        "y": 700,
        "wires": [
            [
                "c77ef0698bfb465b"
            ]
        ]
    },
    {
        "id": "d6c3ae19808aee07",
        "type": "link out",
        "z": "6f369789c773517d",
        "name": "go to BR stat eval",
        "mode": "link",
        "links": [
            "dcf620309c0b3c92"
        ],
        "x": 1075,
        "y": 700,
        "wires": []
    },
    {
        "id": "dcf620309c0b3c92",
        "type": "link in",
        "z": "6f369789c773517d",
        "name": "link in 26",
        "links": [
            "d6c3ae19808aee07"
        ],
        "x": 275,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "2ef7b6af2d61c69b",
        "type": "comment",
        "z": "6f369789c773517d",
        "name": "param file required",
        "info": "",
        "x": 1050,
        "y": 160,
        "wires": []
    },
    {
        "id": "49b8c4d94cef7ff7",
        "type": "link in",
        "z": "a1c50a528dd6cf36",
        "name": "link in 23",
        "links": [
            "32b24311da4a3220",
            "dfab7d8648324af5"
        ],
        "x": 165,
        "y": 220,
        "wires": [
            [
                "bf5eb8d7072f98cb"
            ]
        ]
    },
    {
        "id": "bf5eb8d7072f98cb",
        "type": "function",
        "z": "a1c50a528dd6cf36",
        "name": "completeness function",
        "func": "if (msg.payload.csv[0].PAYANN && msg.payload.csv[0].EMPQ1 && msg.payload.csv[0].PAYQTR1 && msg.payload.csv[0].RCPTOT) {\n    msg.payload.csv[0].PAYANN = 0\n    msg.payload.csv[0].EMPQ1 = 0\n    msg.payload.csv[0].PAYQTR1 = 0\n    msg.payload.csv[0].RCPTOT = 0\n    msg.payload.csv[0].action = \"Go to Balance Module\"\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 220,
        "wires": [
            [
                "a6ab628560a7c8c9"
            ]
        ]
    },
    {
        "id": "a6ab628560a7c8c9",
        "type": "link out",
        "z": "a1c50a528dd6cf36",
        "name": "link out 20",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 495,
        "y": 220,
        "wires": []
    },
    {
        "id": "a464ed1d6f2d6fc2",
        "type": "function",
        "z": "f63af22e81ed47a8",
        "name": "Derived Items function",
        "func": "let csv = msg.payload.csv[0]\ncsv.YEAR_END_DATE = new Date(csv.YEAR_END_DATE)\ncsv.YEAR_START_DATE = new Date(csv.YEAR_START_DATE)\n\nlet items = [\n    {\n        \"NAICS/Tax status\": \"All\",\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCP_TOT_VAL_SUM\",\n        \"DESCRIPTION\": \"Sum estabs receipts to KAU\",\n        \"CALCULATION\": \"csv.ESTAB.RCP_TOT_VAL\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": \"All\",\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"EMP_MAR12_VAL_SUM \",\n        \"DESCRIPTION\": \"Sum estabs employment to KAU\",\n        \"CALCULATION\": \"csv.ESTAB.EMP_MAR12_VAL\",\n        \"Temp or Perm\": \"P\"\n    },\n    {\n        \"NAICS/Tax status\": \"All\",\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"PAY_QTR1_VAL_SUM\",\n        \"DESCRIPTION\": \"Sum estabs qtr1 payroll to KAU\",\n        \"CALCULATION\": \"csv.ESTAB.PAY_QTR1_VAL\",\n        \"Temp or Perm\": \"P\"\n    },\n    {\n        \"NAICS/Tax status\": \"All\",\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"PAY_ANN_VAL_SUM\",\n        \"DESCRIPTION\": \"Sum estabs payroll to KAU\",\n        \"CALCULATION\": \"csv.ESTAB.PAY_ANN_VAL\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS2\": ['31', '32', '33'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"CAPEX_NEW_TOT_SUM\",\n        \"DESCRIPTION\": \"Sum estab new capital expenditures to KAU\",\n        \"CALCULATION\": \"csv.ESTAB.CAPEX_NEW_TOT_DVAL\",\n        \"Temp or Perm\": \"P\"\n    },\n    {\n        \"NAICS/Tax status\": \"All\",\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"CAPEX_TOT_DVAL_SUM\",\n        \"DESCRIPTION\": \"Sum estab capital expenditures to KAU \",\n        \"CALCULATION\": \"csv.ESTAB.CAPEX_TOT\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": \"All\",\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"CAPEX_MACH_TOT_SUM \",\n        \"DESCRIPTION\": \"Sum estab machinery capital expenditures to KAU \",\n        \"CALCULATION\": \"csv.ESTAB.CAPEX_MACH_TOT\"\n    },\n    {\n        \"NAICS/Tax status\": \"All\",\n        \"UNIT\": \"COMPANY\",\n        \"DERIVED ITEM\": \"CAPEX_MACH_TOT_SUM \",\n        \"DESCRIPTION\": \"Sum KAU machinery capital expenditures to  Company\",\n        \"CALCULATION\": \"csv.KAU.CAPEX_MACH_TOT\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": \"All\",\n        \"UNIT\": \"COMPANY\",\n        \"DERIVED ITEM\": \"CAPEX_TOT_DVAL_SUM\",\n        \"DESCRIPTION\": \"Sum KAU capital expenditures to Company \",\n        \"CALCULATION\": \"csv.KAU.CAPEX_TOT\"\n    },\n    {\n        \"NAICS/Tax status\": \"All\",\n        \"UNIT\": \"COMPANY\",\n        \"DERIVED ITEM\": \"EMP_MAR12_VAL_SUM \",\n        \"DESCRIPTION\": \"Sum KAU employment to Company\",\n        \"CALCULATION\": \"csv.KAU.EMP_MAR12_VAL\",\n        \"Temp or Perm\": \"P\"\n    },\n    {\n        \"NAICS/Tax status\": \"All\",\n        \"UNIT\": \"COMPANY\",\n        \"DERIVED ITEM\": \"PAY_QTR1_VAL_SUM \",\n        \"DESCRIPTION\": \"Sum estabs qtr1 payroll to KAU\",\n        \"CALCULATION\": \"csv.KAU.PAY_QTR1_VAL\",\n        \"Temp or Perm\": \"P\"\n    },\n    {\n        \"NAICS/Tax status\": \"All\",\n        \"UNIT\": \"COMPANY\",\n        \"DERIVED ITEM\": \"PAY_ANN_VAL_SUM \",\n        \"DESCRIPTION\": \"Sum estabs payroll to KAU\",\n        \"CALCULATION\": \"csv.KAU.PAY_ANN_VAL\",\n        \"Temp or Perm\": \"P\"\n    },\n    {\n        \"NAICS/Tax status\": \"All\",\n        \"UNIT\": \"COMPANY\",\n        \"DERIVED ITEM\": \"csv.RCPT_TOT_VAL_SUM \",\n        \"DESCRIPTION\": \"Sum KAU receipts to KAU\",\n        \"CALCULATION\": \"csv.KAU.RCPT_TOT_VAL\",\n        \"Temp or Perm\": \"P\"\n    },\n    {\n        \"NAICS/Tax status\": \"All\",\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"CAPEX_NEW_TOT_SUM \",\n        \"DESCRIPTION\": \"Sum KAU new capital expenditures to Company\",\n        \"CALCULATION\": \"csv.KAU.CAPEX_NEW_TOT_DVAL\",\n        \"Temp or Perm\": \"P\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS4\": ['4251'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_AGBR_REV_DVAL\",\n        \"CALCULATION\": \"csv.RCPT_OWN_VAL + csv.RCPT_COMSN_EARN_VAL\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS4\": ['4251'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_COMSN_AVG_RATE_RAT\",\n        \"DESCRIPTION\": \"derived commission rate\",\n        \"CALCULATION\": \"csv.RCPT_COMSN_EARN_VAL/csv.RCPT_COMSN_GSV_VAL\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS2\": ['42'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_STOR_DVAL\",\n        \"DESCRIPTION\": \"non-ecommerce (in-store)\",\n        \"CALCULATION\": \"csv.RCPT_TOT_VAL-csv.RCPT_ECOMM_VAL\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS3\": ['423', '424'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"INV_DOM_DVAL\",\n        \"DESCRIPTION\": \"inventory IN the US\",\n        \"CALCULATION\": \"csv.INV_CY_TOT-csv.INV_ENROUTE_VAL\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS2\": ['31', '32', '33'] },\n        \"UNIT\": \"Estab/all?\",\n        \"DERIVED ITEM\": \"EXPS_CSTMTOT_DVAL\",\n        \"DESCRIPTION\": \"deriving ASM/EC mfg collected total cost item, needed to make use of VALUE_ADDED item straight-forward in tabbing and disclosure\",\n        \"CALCULATION\": \"csv.EXPS_MAT_V1_VAL + csv.EXP_RESALE_VAL + csv.EXPS_FUEL_VAL + csv.EXPS_ELEC_VAL + csv.EXPS_CONTRACT_VAL\",\n        \"Temp or Perm\": \"p\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS2\": ['31', '32', '33'] },\n        \"UNIT\": \"Estab/all?\",\n        \"DERIVED ITEM\": \"EXPS_RPTOT_DVAL\",\n        \"DESCRIPTION\": \"deriving ASM/EC mfg collected total rental payments \",\n        \"CALCULATION\": \"csv.EXPS_RENT_BUILD_VAL + csv.EXPS_RENT_MACH_VAL\",\n        \"Temp or Perm\": \"p\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS2\": ['31', '32', '33'] },\n        \"UNIT\": \"Estab/all?\",\n        \"DERIVED ITEM\": \"EXPS_PCHTT_DVAL\",\n        \"DESCRIPTION\": \"deriving ASM/EC mfg collected total purchased services\",\n        \"CALCULATION\": \"csv.EXPS_TEMPSTAF_VAL + csv.EXPS_COMPTR_OTHEQ_VAL + csv.EXPS_EXSOFT_VAL + csv.EXPS_COMMSVC_VAL + csv.EXPS_DATAPROC_VAL + csv.EXPS_BUILD_REP_VAL + csv.EXPS_MACH_REP_VAL + csv.EXPS_REFUSE_VAL + csv.EXPS_ADVERT_VAL + csv.EXPS_PROFTECH_VAL + csv.EXPS_TAX_VAL + csv.EXPS_OTHER_VAL\",\n        \"Temp or Perm\": \"p\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS2\": ['31', '32', '33'] },\n        \"UNIT\": \"Estab/all?\",\n        \"DERIVED ITEM\": \"VALUE_ADDED_DVAL\",\n        \"DESCRIPTION\": \"Value Added formula from ASM/EC mfg, uses the recently created derived 'total costs'  Additions and Subtractions can be sequenced differently if needed\",\n        \"CALCULATION\": \"csv.RCPT_TOT_VAL + csv.INV_CY_FINISHED_VAL + csv.INV_CY_WRKPROC_VAL - csv.EXPS_CSTMTOT_DVAL - csv.INV_PY_FINISHED_VAL - csv.INV_PY_WRKPROC_VAL\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS2\": ['22'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_MOTR_AGR_DVAL\",\n        \"DESCRIPTION\": \"Agricultural Products motor carrier revenue\",\n        \"CALCULATION\": \"(csv.RCPT_MOTR_AGR_PCT*csv.RCPT_MOTR_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS3\": ['484'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_MOTR_GRAIN_DVAL\",\n        \"DESCRIPTION\": \"Grains, Alcohol, Tobacco Products motor carrier revenue\",\n        \"CALCULATION\": \"(csv.RCPT_MOTR_GRAIN_PCT*csv.RCPT_MOTR_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS3\": ['484'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_MOTR_STONE_DVAL\",\n        \"DESCRIPTION\": \"Stone, Nonmetallic minerals motor carrier revenue\",\n        \"CALCULATION\": \"(csv.RCPT_MOTR_STONE_PCT*csv.RCPT_MOTR_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS3\": ['484'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_MOTR_FUEL_DVAL\",\n        \"DESCRIPTION\": \"Coal and Petroleum Products motor carrier revenue\",\n        \"CALCULATION\": \"(csv.RCPT_MOTR_FUEL_PCT*csv.RCPT_MOTR_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS3\": ['484'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_MOTR_PHARM_DVAL\",\n        \"DESCRIPTION\": \"Pharmaceutical and chemical products motor carrier revenue\",\n        \"CALCULATION\": \"(csv.RCPT_MOTR_PHARM_PCT*csv.RCPT_MOTR_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS3\": ['484'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_MOTR_WOOD_DVAL\",\n        \"DESCRIPTION\": \"Wood Products, Textiles, Leather motor carrier revenue\",\n        \"CALCULATION\": \"(csv.RCPT_MOTR_WOOD_PCT*csv.RCPT_MOTR_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS3\": ['484'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_MOTR_METAL_DVAL\",\n        \"DESCRIPTION\": \"Base Metal and Machinery motor carrier revenue\",\n        \"CALCULATION\": \"(csv.RCPT_MOTR_METAL_PCT*csv.RCPT_MOTR_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS3\": ['484'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_MOTR_ELECT_DVAL\",\n        \"DESCRIPTION\": \"Electronic & Precision motor carrier revenue\",\n        \"CALCULATION\": \"(csv.RCPT_MOTR_ELECT_PCT*csv.RCPT_MOTR_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS3\": ['484'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_MOTR_USEDGD_DVAL\",\n        \"DESCRIPTION\": \"Used household and office goods motor carrier revenue\",\n        \"CALCULATION\": \"(csv.RCPT_MOTR_USEDGD_PCT*csv.RCPT_MOTR_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS3\": ['484'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_MOTR_NEWFRN_DVAL\",\n        \"DESCRIPTION\": \"New Furniture & Misc. Prods motor carrier revenue\",\n        \"CALCULATION\": \"(csv.RCPT_MOTR_NEWFRN_PCT*csv.RCPT_MOTR_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS3\": ['484'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_MOTR_OTH_DVAL\",\n        \"DESCRIPTION\": \"Other motor carrier revenue\",\n        \"CALCULATION\": \"(csv.RCPT_MOTR_OTH_PCT*csv.RCPT_MOTR_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS3\": ['484'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_MOTR_HAZRD_DVAL\",\n        \"DESCRIPTION\": \"Hazardous Materials motor carrier revenue\",\n        \"CALCULATION\": \"(csv.RCPT_MOTR_HAZRD_PCT*csv.RCPT_MOTR_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS2\": ['22'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_CUST_RES_DVAL\",\n        \"DESCRIPTION\": \"Residential Customers Revenue\",\n        \"CALCULATION\": \"(csv.RCPT_CUST_RES_PCT*csv.RCPT_TOT_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS2\": ['22'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_CUST_NORES_DVAL\",\n        \"DESCRIPTION\": \"Non-residential consumer revenue\",\n        \"CALCULATION\": \"(csv.RCPT_CUST_NORES_PCT*csv.RCPT_TOT_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": ['519130', '517210', '517110', '517911'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_CUST_BUS_DVAL\",\n        \"DESCRIPTION\": \"Revenue by Gov & Business\",\n        \"CALCULATION\": \"(csv.RCPT_CUST_BUS_PCT*csv.RCPT_TOT_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": ['519130', '517210', '517110', '517911'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_CUST_IND_DVAL\",\n        \"DESCRIPTION\": \"SOURCE OF REVENUE - HOUSEHOLD\",\n        \"CALCULATION\": \"(csv.RCPT_CUST_IND_PCT*csv.RCPT_TOT_VAL)/100 \",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": ['561510', '561599'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_BUS_DVAL \",\n        \"DESCRIPTION\": \"business travel revenue\",\n        \"CALCULATION\": \"(csv.RCPT_BUS_PCT *csv.RCPT_TOT_VAL)/100)\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": ['561510', '561599', '561520'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_LEISURE_DVAL \",\n        \"DESCRIPTION\": \"leisure revenue\",\n        \"CALCULATION\": \"(csv.RCPT_LEISURE_PCT *csv.RCPT_TOT_VAL)/100)\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": ['511110'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_NEWS_PRNT_DVAL\",\n        \"DESCRIPTION\": \"Print newspapers revenue\",\n        \"CALCULATION\": \"(csv.RCPT_NEWS_PRNT_PCT*(csv.RCPT_NEWS_PUB_VAL+csv.RCPT_ADV_SPACE_VAL))/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": ['511110'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_NEWS_ONLINE_DVAL\",\n        \"DESCRIPTION\": \"online newspapers revenue\",\n        \"CALCULATION\": \"(csv.RCPT_NEWS_ONLINE_PCT*(csv.RCPT_NEWS_PUB_VAL+csv.RCPT_ADV_SPACE_VAL))/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": ['511110'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_NEWS_OTH_DVAL\",\n        \"DESCRIPTION\": \"other media newspaper revenue\",\n        \"CALCULATION\": \"(csv.RCPT_NEWS_OTH_PCT*(csv.RCPT_NEWS_PUB_VAL+csv.RCPT_ADV_SPACE_VAL))/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": ['511110'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_ADV_CLASS_DVAL\",\n        \"DESCRIPTION\": \"classified advertising revenue\",\n        \"CALCULATION\": \"(csv.RCPT_ADV_CLASS_PCT*csv.RCPT_ADV_SPACE_VAL/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": ['511110'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_ADV_OTH_DVAL\",\n        \"DESCRIPTION\": \"all other advertising revenue\",\n        \"CALCULATION\": \"(csv.RCPT_ADV_OTH_PCT*csv.RCPT_ADV_SPACE_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": ['517110'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_CUST_LOCTEL_BUS_DVAL\",\n        \"DESCRIPTION\": \"Fixed Local Tel - Gov & Business revenue\",\n        \"CALCULATION\": \"(csv.RCPT_CUST_LOCTEL_BUS_PCT*csv.RCPT_LOCTEL_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": ['517110'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_CUST_LOCTEL_IND_DVAL\",\n        \"DESCRIPTION\": \"Household Fixed Local Telephony revenue\",\n        \"CALCULATION\": \"(csv.RCPT_CUST_LOCTEL_IND_PCT*csv.RCPT_LOCTEL_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": ['517110'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_CUST_LNGTEL_BUS_DVAL\",\n        \"DESCRIPTION\": \"Fixed Long Dist - Gov & Business revenue\",\n        \"CALCULATION\": \"(csv.RCPT_CUST_LNGTEL_BUS_PCT*csv.RCPT_LNGTEL_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": ['517110'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_CUST_LNGTEL_IND_DVAL\",\n        \"DESCRIPTION\": \"Household Fixed Long-distance revenue\",\n        \"CALCULATION\": \"(csv.RCPT_CUST_LNGTEL_IND_PCT*csv.RCPT_LNGTEL_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": ['517110'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_CUST_SUBLIN_BUS_DVAL\",\n        \"DESCRIPTION\": \"Subscriber Line - Gov & Business revenue\",\n        \"CALCULATION\": \"(csv.RCPT_CUST_SUBLIN_BUS_PCT*csv.RCPT_SUBLIN_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": ['517110'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_CUST_SUBLIN_IND_DVAL\",\n        \"DESCRIPTION\": \"Household Subscriber Line Charge revenue\",\n        \"CALCULATION\": \"(csv.RCPT_CUST_SUBLIN_IND_PCT*csv.RCPT_SUBLIN_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": ['511120'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_PER_PRNT_DVAL\",\n        \"DESCRIPTION\": \"print periodicals revenue\",\n        \"CALCULATION\": \"(csv.RCPT_PER_PRNT_PCT*(csv.RCPT_PER_PUB_VAL+csv.RCPT_ADV_SPACE_VAL))/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": ['511120'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_PER_ONLINE_DVAL\",\n        \"DESCRIPTION\": \"online periodicals revenue\",\n        \"CALCULATION\": \"(csv.RCPT_PER_ONLINE_PCT*(csv.RCPT_PER_PUB_VA+csv.RCPT_ADV_SPACE_VALL))/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": ['511120'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_PER_OTH_DVAL\",\n        \"DESCRIPTION\": \"other media periodicals revenue\",\n        \"CALCULATION\": \"(csv.RCPT_PER_OTH_PCT*(csv.RCPT_PER_PUB_VAL+csv.RCPT_ADV_SPACE_VAL))/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": {\"NAICS6\": [\"511140\"]},\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \" csv.RCPT_SYSOFT_PERS_DVAL\",\n        \"DESCRIPTION\": \"Personal Computer System Software revenue\",\n        \"CALCULATION\": \"(csv.RCPT_SYSOFT_PERS_PCT*csv.RCPT_SYSOFT_PUB_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": {\"NAICS6\": [\"511140\"]},\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \" csv.RCPT_SYSOFT_ENTR_DVALT\",\n        \"DESCRIPTION\": \"Enterprise or Network System Software revenue\",\n        \"CALCULATION\": \"(csv.RCPT_SYSOFT_ENTR_PCTT*csv.RCPT_SYSOFT_PUB_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": {\"NAICS6\": [\"511140\"]},\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \" csv.RCPT_SYSOFT_MAIN_DVAL\",\n        \"DESCRIPTION\": \"Mainframe Computer System Software revenue\",\n        \"CALCULATION\": \"(csv.RCPT_SYSOFT_MAIN_PCT*csv.RCPT_SYSOFT_PUB_VAL/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": {\"NAICS6\": [\"511140\"]},\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \" csv.RCPT_SYSOFT_OTH_DVAL\",\n        \"DESCRIPTION\": \"Other System Software revenue\",\n        \"CALCULATION\": \"(csv.RCPT_SYSOFT_OTH_PCT*csv.RCPT_SYSOFT_PUB_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": {\"NAICS6\": [\"511140\"]},\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"csv.RCPT_APSOFT_PERS_DVAL\",\n        \"DESCRIPTION\": \"Personal Computer Application Software revenue\",\n        \"CALCULATION\": \"(csv.RCPT_APSOFT_PERS_PCT*csv.RCPT_APSOFT_PUB_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": {\"NAICS6\": [\"511140\"]},\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"csv.RCPT_APSOFT_ENTR_DVAL\",\n        \"DESCRIPTION\": \"Enterprise or Network Application revenue\",\n        \"CALCULATION\": \"(csv.RCPT_APSOFT_ENTR_PCT*csv.RCPT_APSOFT_PUB_VAL/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": {\"NAICS6\": [\"511140\"]},\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"csv.RCPT_APSOFT_MAIN_DVAL\",\n        \"DESCRIPTION\": \"Mainframe Computer Application Software revenue\",\n        \"CALCULATION\": \"(csv.RCPT_APSOFT_MAIN_PCT*csv.RCPT_APSOFT_PUB_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": {\"NAICS6\": [\"511140\"]},\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"csv.RCPT_APSOFT_OTH_DVAL\",\n        \"DESCRIPTION\": \"Other Application Software revenue\",\n        \"CALCULATION\": \"(csv.RCPT_APSOFT_OTH_PCT*csv.RCPT_APSOFT_PUB_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": ['511140'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_DIR_PRNT_DVAL\",\n        \"DESCRIPTION\": \"directory/dbase - Print\",\n        \"CALCULATION\": \"(csv.RCPT_DIR_PRNT_PCT*(csv.RCPT_DIR_PUB_VAL,csv.RCPT_ADV_SPACE_VAL))/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": ['511140'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_DIR_ONLINE_DVAL\",\n        \"DESCRIPTION\": \"directory/dbase - Online\",\n        \"CALCULATION\": \"(csv.RCPT_DIR_ONLINE_PCT*(csv.RCPT_DIR_PUB_VAL,csv.RCPT_ADV_SPACE_VAL))/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": ['511140'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_DIR_OTH_DVAL\",\n        \"DESCRIPTION\": \"directory/dbase - Other media\",\n        \"CALCULATION\": \"(csv.RCPT_DIR_OTH_PCT*(csv.RCPT_DIR_PUB_VAL,csv.RCPT_ADV_SPACE_VAL))/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": ['511130'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_BOOK_PRNT_DVAL\",\n        \"DESCRIPTION\": \"print books revenue\",\n        \"CALCULATION\": \"(csv.RCPT_BOOK_PRNT_PCT*csv.RCPT_BOOK_PUB_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": ['511130'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_BOOK_ONLINE_DVAL\",\n        \"DESCRIPTION\": \"online books revenue\",\n        \"CALCULATION\": \"(csv.RCPT_BOOK_ONLINE_PCT*csv.RCPT_BOOK_PUB_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": ['511130'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_BOOK_OTH_DVAL\",\n        \"DESCRIPTION\": \"other media books revenue\",\n        \"CALCULATION\": \"(csv.RCPT_BOOK_OTH_PCT*csv.RCPT_BOOK_PUB_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": ['511110'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_NEWS_PUB_DVAL\",\n        \"DESCRIPTION\": \"Newspaper Publishers revenue\",\n        \"CALCULATION\": \"csv.RCPT_NEWS_PUB_VAL + csv.RCPT_ADV_SPACE_VAL\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": ['511120'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_PER_PUB_DVAL\",\n        \"DESCRIPTION\": \"Periodical Publisher revenue\",\n        \"CALCULATION\": \"csv.RCPT_PER_PUB_VAL + csv.RCPT_ADV_SPACE_VAL\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS5\": ['72111', '72112'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_TOT_HOTEL_OWN3RD_DVAL\",\n        \"DESCRIPTION\": \"CY Sum Of Firm's Rev & Managed Rev\",\n        \"CALCULATION\": \"csv.RCPT_TOT_VAL + csv.RCPT_TOT_HOTEL_OWN3RD_VAL\",\n        \"Temp or Perm\": \"T\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS5\": ['72111', '72112'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"EXPS_TOT_HOTEL_OWN3RD_DVAL\",\n        \"DESCRIPTION\": \"CY Sum of Hotel's expenses & Managed expenses\",\n        \"CALCULATION\": \"csv.EXPS_TOT_VAL + csv.EXPS_TOT_HOTEL_OWN3RD_VAL\",\n        \"Temp or Perm\": \"T\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS4\": ['622'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_PAT_OUT_DVAL\",\n        \"DESCRIPTION\": \"Outpatient Care Services\",\n        \"CALCULATION\": \"(csv.RCPT_PAT_OUT_PCT*(csv.RCPT_MEDICARE_VAL+ csv.RCPT_MEDICAID_VAL+ csv.RCPT_WORKCOMP_VAL+  csv.RCPT_OTH_GOVPROG_VAL+ csv.RCPT_HLTHCARE_PRVDRS_VAL+ csv.RCPT_PVTHLTH_INS_VAL+ csv.RCPT_PROPCSLTY_INS_VAL+ csv.RCPT_PAT_OUTPCKT_VAL+ csv.RCPT_PATCARE_OTH_VAL))/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS5\": ['72111', '72112'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_ECOMM_DVAL\",\n        \"DESCRIPTION\": \"Electronic Revenue\",\n        \"CALCULATION\": \"csv.RCPT_ECOMM_ES_VAL + csv.RCPT_ECOMM_HOTEL_OWN3RD_VAL\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS3\": ['622'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_PAT_IN_DVAL\",\n        \"DESCRIPTION\": \" Inpatient Care Services\",\n        \"CALCULATION\": \"(csv.RCPT_PAT_IN_PCT * (csv.RCPT_MEDICARE_VAL + csv.RCPT_MEDICAID_VAL + csv.RCPT_WORKCOMP_VAL + csv.RCPT_OTH_GOVPROG_VAL + csv.RCPT_HLTHCARE_PRVDRS_VAL + csv.RCPT_PVTHLTH_INS_VAL + csv.RCPT_PROPCSLTY_INS_VAL + csv.RCPT_PAT_OUTPCKT_VAL + csv.RCPT_PATCARE_OTH_VAL)) / 100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS4\": ['6215'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_NONOP_DVAL\",\n        \"DESCRIPTION\": \"Non-Patient Care Revenue\",\n        \"CALCULATION\": \"csv.RCPT_NONOP_GIFTS_VAL + csv.RCPT_NONOP_INVST_VAL + csv.RCPT_NONPT_HCARE_PRVDRS_VAL + csv.RCPT_NONPT_OTH_VAL\",\n        \"Temp or Perm\": \"T\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS3\": ['621', '622', '623'], \"_TXRCD00\": ['T'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_NONOP_GIFT_INVST_DVAL\",\n        \"DESCRIPTION\": \"subsidies, Contr., Gifts & Grants+Investment and property income\",\n        \"CALCULATION\": \"csv.RCPT_NONOP_GIFTS_VAL + csv.RCPT_NONOP_INVST_VAL\",\n        \"Temp or Perm\": \"T\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS3\": ['621', '622', '623'], \"NAICS4!\": ['6215', '6219'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_NONTELEMED_DVAL\",\n        \"DESCRIPTION\": \"Non-Telemedicine\",\n        \"CALCULATION\": \"(csv.RCPT_TOT_VAL-csv.RCPT_TELEMED_VAL)\",\n        \"Temp or Perm\": \"T\",\n        \"Order\": 2,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS2\": ['62'], \"NAICS3!\": ['624', '623', '6215'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_PATCARE1_DVAL\",\n        \"DESCRIPTION\": \"Patient Care Revenue\",\n        \"CALCULATION\": \"csv.RCPT_MEDICARE_VAL + csv.RCPT_MEDICAID_VAL + csv.RCPT_WORKCOMP_VAL + csv.RCPT_OTH_GOVPROG_VAL + csv.RCPT_HLTHCARE_PRVDRS_VAL + csv.RCPT_PVTHLTH_INS_VAL + csv.RCPT_PROPCSLTY_INS_VAL + csv.RCPT_PAT_OUTPCKT_VAL + csv.RCPT_PATCARE_OTH_VAL\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS3\": [\"623\"] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_PATCARE2_DVAL\",\n        \"DESCRIPTION\": \"Patient Care Revenue\",\n        \"CALCULATION\": \"csv.RCPT_MEDICARE_VAL + csv.RCPT_MEDICAID_VAL + csv.RCPT_WORKCOMP_VAL + csv.RCPT_OTH_GOVPROG_VAL + csv.RCPT_PVTHLTH_INS_VAL + csv.RCPT_PROPCSLTY_INS_VAL + csv.RCPT_PAT_OUTPCKT_VAL + csv.RCPT_PATCARE_OTH_VAL + csv.RCPT_NEWPT_SSBNFTS_VAL\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS4\": [\"6215\"] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_PATCARE3_DVAL\",\n        \"DESCRIPTION\": \"Patient Care Revenue\",\n        \"CALCULATION\": \"csv.RCPT_MEDICARE_VAL + csv.RCPT_MEDICAID_VAL + csv.RCPT_WORKCOMP_VAL + csv.RCPT_OTH_GOVPROG_VAL + csv.RCPT_HLTHCARE_PRVDRS_VAL + csv.RCPT_PVTHLTH_INS_VAL + csv.RCPT_PROPCSLTY_INS_VAL + csv.RCPT_PAT_OUTPCKT_VAL + csv.RCPT_PATCARE_OTH_VAL\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": {\"NAICS6\": [\"561330\"]},\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_BILL_PAY_DVAL\",\n        \"DESCRIPTION\": \"all other operating revenue\",\n        \"CALCULATION\": \"(csv.RCPT_BILL_OTHOP_PCT*csv.RCPT_GROSSBILL_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": {\"NAICS6\": [\"561330\"]},\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_GROSSBILL_PAY_DVAL\",\n        \"DESCRIPTION\": \"Gross Billings x Payroll Services\",\n        \"CALCULATION\": \"(csv.RCPT_BILL_PAY_PCT*csv.RCPT_GROSSBILL_VAL)/100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": {\"NAICS6\": [\"511140\"]},\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_SYSOFT_DVAL\",\n        \"DESCRIPTION\": \"system software\",\n        \"CALCULATION\": \"csv.RCPT_SYSOFT_PERS_DVAL + csv.RCPT_SYSOFT_ENTR_DVAL + csv.RCPT_SYSOFT_MAIN_DVAL + csv.RCPT_SYSOFT_OTH_DVAL\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 2,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": {\"NAICS6\": [\"511140\"]},\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_APSOFT_DVAL\",\n        \"DESCRIPTION\": \"application software\",\n        \"CALCULATION\": \"csv.RCPT_APSOFT_PERS_DVAL + csv.RCPT_APSOFT_ENTR_DVAL + csv.RCPT_APSOFT_MAIN_DVAL + csv.RCPT_APSOFT_OTH_DVAL\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 2,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": ['511140'] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_DIR_PUB_DVAL\",\n        \"DESCRIPTION\": \"Database and Directory Publisher revenue\",\n        \"CALCULATION\": \"csv.RCPT_DIR_PUB_VAL + csv.RCPT_ADV_SPACE_VAL\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": {\"NAICS2\": [\"42\", \"44\", \"45\"]},\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"PURCHASES_DPCT\",\n        \"DESCRIPTION\": \"purchases percent of sales\",\n        \"CALCULATION\": \"(csv.EXPS_PRCH_RESALE_VAL / csv.RCPT_TOT_VAL) * 100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": {\"NAICS2\": [\"42\", \"44\", \"45\"]},\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"INVENTORY_DPCT\",\n        \"DESCRIPTION\": \"total inventory percent of sales\",\n        \"CALCULATION\": \"(csv.INV_PREADJ_LIFO_VAL/csv.RCPT_TOT_VAL) * 100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": {\"NAICS2\": [\"42\", \"44\", \"45\"]},\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"EXP_DPCT\",\n        \"DESCRIPTION\": \"expenses percent of sales\",\n        \"CALCULATION\": \"(csv.EXPS_TOT_VAL/csv.RCPT_TOT_VAL) * 100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": {\"NAICS2\": [\"42\", \"44\", \"45\"]},\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"ECOMM_DPCT\",\n        \"DESCRIPTION\": \"ecommerce percent of sales\",\n        \"CALCULATION\": \"(csv.RCPT_ECOMM_VAL / csv.RCPT_TOT_VAL) * 100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS2\": [\"42\", \"44\", \"45\"] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"PROFIT_LOSS_DVAL\",\n        \"DESCRIPTION\": \"profit/loss amount\",\n        \"CALCULATION\": \"(csv.RCPT_TOT_VAL - csv.EXPS_PRCH_RESALE_VAL - csv.EXPS_TOT_VAL)\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS2\": [\"42\", \"44\", \"45\"] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"REPORTED_WEEKS_DNUM\",\n        \"DESCRIPTION\": \"number of weeks reported for\",\n        \"CALCULATION\": \"(csv.YEAR_END_DATE - csv.YEAR_START_DATE)/7\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": [\"454110\"] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"MRCH_SALES_DVAL\",\n        \"DESCRIPTION\": \"sum of sales merchandise lines\",\n        \"CALCULATION\": \"csv.RCPT_BOOK_VAL + csv.RCPT_CLOTH_VAL + csv.RCPT_COMP_VAL + csv.RCPT_SOFT_VAL + csv.RCPT_DRUGS_VAL + csv.RCPT_ELAPPL_VAL + csv.RCPT_FDBRWN_VAL + csv.RCPT_FURNTR_VAL + csv.RCPT_JWLRY_VAL + csv.RCPT_AUDVID_VAL + csv.RCPT_OFCEQ_VAL + csv.RCPT_SPTGD_VAL + csv.RCPT_TOYS_VAL + csv.RCPT_OTHMRCH_VAL + csv.RCPT_SHPHDL_VAL + csv.RCPT_ADVERT_VAL + csv.RCPT_NONMRCH_VAL\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": [\"454110\"] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"MRCH_NONMERCH_SALES_DVAL\",\n        \"DESCRIPTION\": \"non-merchandise sales derived estimate\",\n        \"CALCULATION\": \"csv.RCPT_SHPHDL_VAL + csv.RCPT_ADVERT_VAL + csv.RCPT_NONMRCH_VAL\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": [\"454110\"] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"MRCH_ECOMMERCE_DVAL\",\n        \"DESCRIPTION\": \"sum of ecommerce merchadise lines\",\n        \"CALCULATION\": \"csv.RCPT_ECOMM_BOOK_VAL + csv.RCPT_ECOMM_CLOTH_VAL + csv.RCPT_ECOMM_COMP_VAL + csv.RCPT_ECOMM_SOFT_VAL + csv.RCPT_ECOMM_DRUGS_VAL + csv.RCPT_ECOMM_ELAPPL_VAL + csv.RCPT_ECOMM_FDBRWN_VAL + csv.RCPT_ECOMM_FURNTR_VAL + csv.RCPT_ECOMM_JWLRY_VAL + csv.RCPT_ECOMM_AUDVID_VAL + csv.RCPT_ECOMM_OFCEQ_VAL + csv.RCPT_ECOMM_SPTGD_VAL + csv.RCPT_ECOMM_TOYS_VAL + csv.RCPT_OTHMRCH_VAL + csv.RCPT_ECOMM_SHPHDL_VAL + csv.RCPT_ECOMM_ADVERT_VAL + csv.RCPT_ECOMM_NONMRCH_VAL\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": { \"NAICS6\": [\"454110\"] },\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"MRCH_NONMERCH_EC_DVAL\",\n        \"DESCRIPTION\": \"non-merchandise ecommerce derived estimate\",\n        \"CALCULATION\": \"csv.RCPT_ECOMM_SHPHDL_VAL + csv.RCPT_ECOMM_ADVERT_VAL + csv.RCPT_ECOMM_NONMRCH_VAL\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": {\"NAICS2\":['42']},\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"INV_FOREIGN_DPCT\",\n        \"DESCRIPTION\": \"foreign inventory as a percent of total inventory\",\n        \"CALCULATION\": \"(csv.INV_ENROUTE_VAL / csv.INV_PREADJ_LIFO_VAL) * 100\",\n        \"Temp or Perm\": \"P\",\n        \"Order\": 1,\n        \"Flag\": \"D\"\n    },\n    {\n        \"NAICS/Tax status\": {\"NAICS5\":['72111','72112']},\n        \"UNIT\": \"KAU\",\n        \"DERIVED ITEM\": \"RCPT_TOT_DVAL\",\n        \"DESCRIPTION\": \"Total Revenue\",\n        \"CALCULATION\": \"csv.RCPT_TOT_HOTEL_OWN_VAL + csv.RCPT_TOT_HOTEL_OWN3RD_VAL\"\n    }\n]\n\nfor (const json of items) {\n    const naicsStatus = json[\"NAICS/Tax status\"];\n    const unit = json[\"UNIT\"];\n    const derivedItem = json[\"DERIVED ITEM\"];\n    const calculation = json[\"CALCULATION\"];\n\n    if (\n        naicsStatus &&\n        unit === csv[\"UNIT\"]\n    ) {\n        if (naicsStatus == \"All\") {\n            try {\n                const derivedValue = eval(calculation);\n                csv[derivedItem] = derivedValue;\n                csv.Perm = json[\"Temp or Perm\"] || \"P\";\n                csv.Order = json[\"Order\"] || 1;\n                csv.Flag = json[\"Flag\"] || \"D\";\n            } catch (error) {\n                console.error(\"Missing necessary variables for calculation:\", error);\n            }\n        } else {\n            if ((naicsStatus.NAICS2 && naicsStatus.NAICS2.includes(csv[\"NAICS2\"]?.toString())) || (naicsStatus.NAICS3 && naicsStatus.NAICS3.includes(csv[\"NAICS3\"]?.toString())) || (naicsStatus.NAICS4 && naicsStatus.NAICS4.includes(csv[\"NAICS4\"]?.toString())) || (naicsStatus.NAICS5 && naicsStatus.NAICS5.includes(csv[\"NAICS5\"]?.toString())) || (naicsStatus.NAICS6 && naicsStatus.NAICS6.includes(csv[\"NAICS6\"]?.toString()))) {\n                if ((!naicsStatus[\"NAICS3!\"] && !naicsStatus[\"NAICS4!\"]) || (naicsStatus[\"NAICS3!\"] && !naicsStatus[\"NAICS3!\"].includes(csv[\"NAICS3\"].toString())) || (naicsStatus[\"NAICS4!\"] && !naicsStatus[\"NAICS4!\"].includes(csv[\"NAICS4\"].toString()))) {\n                    if (!naicsStatus[\"_TXRCD00\"] || (naicsStatus[\"_TXRCD00\"] && naicsStatus[\"_TXRCD00\"].includes(csv[\"_TXRCD00\"]))) {\n                        try {\n                            const derivedValue = eval(calculation);\n                            csv[derivedItem] = derivedValue;\n                            csv.Perm = json[\"Temp or Perm\"] || \"P\";\n                            csv.Order = json[\"Order\"] || 1;\n                            csv.Flag = json[\"Flag\"] || \"D\";\n                        } catch (error) {\n                            console.error(\"Missing necessary variables for calculation:\", error);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 280,
        "wires": [
            [
                "2e09b853297763c9"
            ]
        ]
    },
    {
        "id": "7a7af6643c8cdc10",
        "type": "link in",
        "z": "f63af22e81ed47a8",
        "name": "link in 28",
        "links": [
            "ff27924ce01b7894",
            "f4fc1424aec01ccf"
        ],
        "x": 135,
        "y": 280,
        "wires": [
            [
                "a464ed1d6f2d6fc2"
            ]
        ]
    },
    {
        "id": "2e09b853297763c9",
        "type": "link out",
        "z": "f63af22e81ed47a8",
        "name": "link out 22",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 495,
        "y": 280,
        "wires": []
    },
    {
        "id": "aad0ca24d9250f35",
        "type": "function",
        "z": "91e923b1d58a25de",
        "name": "post edit function",
        "func": "if (msg.payload.csv[0].flag) {\n    msg.payload.csv[0].FAIL = true\n    msg.payload.csv[0].TABSTAT = 1\n    msg.payload.csv[0].action = \"Go to: Imputation\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 220,
        "wires": [
            [
                "62e629bde644c4ac",
                "712df2980b334bc5"
            ]
        ]
    },
    {
        "id": "60a8272cfde55a5e",
        "type": "link in",
        "z": "91e923b1d58a25de",
        "name": "link in 30",
        "links": [
            "1597f28db268d317",
            "fa7a570c778cff30"
        ],
        "x": 145,
        "y": 220,
        "wires": [
            [
                "aad0ca24d9250f35"
            ]
        ]
    },
    {
        "id": "712df2980b334bc5",
        "type": "debug",
        "z": "91e923b1d58a25de",
        "name": "post edit debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 140,
        "wires": []
    },
    {
        "id": "62e629bde644c4ac",
        "type": "link out",
        "z": "91e923b1d58a25de",
        "name": "link out 24",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 505,
        "y": 220,
        "wires": []
    },
    {
        "id": "7700d41f2bff649a",
        "type": "digitaloak-postgresql-query",
        "z": "d772b64609d590ad",
        "d": true,
        "name": "",
        "server": "ea3e0b5d6b96f47a",
        "inputs": 1,
        "outputs": 1,
        "x": 250,
        "y": 80,
        "wires": [
            [
                "6c5c30122a8dd550",
                "75a9736d9a433f4b"
            ]
        ]
    },
    {
        "id": "313558df85cfacfe",
        "type": "inject",
        "z": "d772b64609d590ad",
        "name": "",
        "props": [
            {
                "p": "query",
                "v": "SELECT * FROM product_aies.item_estabs_2023a1 LIMIT 12500;",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 80,
        "wires": [
            [
                "7700d41f2bff649a"
            ]
        ]
    },
    {
        "id": "6c5c30122a8dd550",
        "type": "function",
        "z": "d772b64609d590ad",
        "name": "getSurveyDatefromTableName",
        "func": "let query = msg.query;\nlet parts = query.split('FROM');\nlet fullTableName = parts[1].trim();\n\nlet tableNameParts = fullTableName.split('.');\ntableNameParts = tableNameParts[1].split(' ');\nlet tbNamePartsYear = tableNameParts[0].split('_');\nmsg.surveyYear = parseInt(tbNamePartsYear[2].slice(0,4));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "75a9736d9a433f4b",
        "type": "function",
        "z": "d772b64609d590ad",
        "name": "parse",
        "func": "msg.payload = JSON.parse(JSON.stringify(msg.payload))\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "f6c5a7e7.8b1d28",
        "type": "inject",
        "z": "7904b0afeb2b68c0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"api_key\":\"x5nDCpvGTkvHniq8wJ9m\",\"page\":1,\"itemsPerPage\":10,\"filter\":\"\",\"jobName\":\"New Job\",\"totalRows\":100}",
        "payloadType": "json",
        "x": 190,
        "y": 260,
        "wires": [
            [
                "f3a3d8d2.5b1b98"
            ]
        ]
    },
    {
        "id": "f3a3d8d2.5b1b98",
        "type": "ui_form",
        "z": "7904b0afeb2b68c0",
        "name": "JOB",
        "label": "",
        "group": "eb430edea69b48da",
        "order": 3,
        "width": 24,
        "height": 1,
        "options": [
            {
                "label": "Job Name",
                "value": "jobName",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Records per batch",
                "value": "itemsPerPage",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Where",
                "value": "filters",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Rule Types (csv)",
                "value": "ruleTypes",
                "type": "multiline",
                "required": false,
                "rows": 1
            },
            {
                "label": "Start Page",
                "value": "page",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Time to submit",
                "value": "time_to_submit",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Total Rows",
                "value": "totalRows",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "jobName": "",
            "itemsPerPage": "",
            "filters": "",
            "ruleTypes": "",
            "page": "",
            "time_to_submit": "",
            "totalRows": ""
        },
        "payload": "",
        "submit": "Submit",
        "cancel": "Cancel",
        "topic": "",
        "topicType": "str",
        "splitLayout": true,
        "className": "",
        "x": 430,
        "y": 260,
        "wires": [
            [
                "f5e5a6d4.7a9c28"
            ]
        ]
    },
    {
        "id": "f5e5a6d4.7a9c28",
        "type": "function",
        "z": "7904b0afeb2b68c0",
        "name": "",
        "func": "flow.set('startTime', new Date())\nlet elapsedTime = 0\nlet startTime = flow.get('startTime')\n\nlet timerInterval = setInterval(() => {\n    const currentTime = Date.now();\n    elapsedTime = currentTime - startTime;\n\n    let milliseconds = parseInt(elapsedTime % 1000);\n    let seconds = parseInt((elapsedTime / 1000) % 60);\n    let minutes = parseInt((elapsedTime / (1000 * 60)) % 60);\n\n    milliseconds = milliseconds < 10 ? \"0\" + milliseconds : milliseconds;\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n\n}, 10)\n\nflow.set('interval', timerInterval)\nflow.set('timer', elapsedTime)\n\n// time\nfunction getTime() {\n    const currentDate = new Date();\n    const hours = String(currentDate.getHours()).padStart(2, '0');\n    const minutes = String(currentDate.getMinutes()).padStart(2, '0');\n    const seconds = String(currentDate.getSeconds()).padStart(2, '0');\n    const milliseconds = String(currentDate.getMilliseconds()).padStart(3, '0');\n\n    const formattedDate = ` - ${hours}:${minutes}:${seconds}:${milliseconds}`;\n\n\n    return formattedDate\n}\n\nvar jobName = msg.payload.jobName+getTime();\nvar api_token = msg.payload.api_token;\nvar time_to_submit = msg.payload.time_to_submit;\nvar filterString = msg.payload.filters || \"{}\"\nvar filters = JSON.parse(filterString);//msg.payload.filters);\nvar itemsPerPage = msg.payload.itemsPerPage;\nvar page = msg.payload.page;\nvar totalRows = msg.payload.totalRows;\n\n\n\n\n\n\n\n\nvar ruleTypes = msg.payload.ruleTypes || 'new,estab'\n\nmsg.payload = JSON.stringify({\n    \"jobName\": jobName,\n    \"api_key\": \"x5nDCpvGTkvHniq8wJ9m\",\n    \"time_to_submit\": time_to_submit,\n    \"where\": filters,\n    \"whereClause\": filterString,\n    \"limit\": itemsPerPage,\n    \"offset\": page,\n    \"ruleTypes\": ruleTypes,\n    \"totalRows\": totalRows\n})\n\n\n\n//msg.payload = `{\"filters\":{\"parent_name\":\"\"},\"page\":1,\"itemsPerPage\":5}`\nmsg.topic = \"jobRequest\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 260,
        "wires": [
            [
                "298f0efcfe6e4509"
            ]
        ]
    },
    {
        "id": "f8a3b1e8.ee2b",
        "type": "http request",
        "z": "7904b0afeb2b68c0",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost/companies?api_key=x5nDCpvGTkvHniq8wJ9m&DEBUG=false&filters=' + encodeURIComponent(msg.payload.filters) + '&page=' + encodeURIComponent(msg.payload.page)",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 850,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "e515d6fd.b0b65",
        "type": "inject",
        "z": "7904b0afeb2b68c0",
        "name": "Sample Data",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"id\":1,\"name\":\"John\"},{\"id\":2,\"name\":\"Alice\"},{\"id\":3,\"name\":\"Bob\"},{\"id\":4,\"name\":\"Emma\"},{\"id\":5,\"name\":\"Michael\"},{\"id\":6,\"name\":\"Olivia\"},{\"id\":7,\"name\":\"William\"},{\"id\":8,\"name\":\"Sophia\"},{\"id\":9,\"name\":\"James\"},{\"id\":10,\"name\":\"Charlotte\"},{\"id\":11,\"name\":\"Alexander\"},{\"id\":12,\"name\":\"Emily\"},{\"id\":13,\"name\":\"Daniel\"},{\"id\":14,\"name\":\"Mia\"},{\"id\":15,\"name\":\"Henry\"},{\"id\":16,\"name\":\"Ava\"},{\"id\":17,\"name\":\"Oliver\"},{\"id\":18,\"name\":\"Amelia\"},{\"id\":19,\"name\":\"Benjamin\"},{\"id\":20,\"name\":\"Ella\"},{\"id\":21,\"name\":\"Jacob\"},{\"id\":22,\"name\":\"Grace\"},{\"id\":23,\"name\":\"Matthew\"},{\"id\":24,\"name\":\"Lily\"},{\"id\":25,\"name\":\"Joseph\"},{\"id\":26,\"name\":\"Lucy\"},{\"id\":27,\"name\":\"Samuel\"},{\"id\":28,\"name\":\"Chloe\"},{\"id\":29,\"name\":\"David\"},{\"id\":30,\"name\":\"Abigail\"}]",
        "payloadType": "json",
        "x": 170,
        "y": 620,
        "wires": [
            [
                "4f4b7e54.8b7164"
            ]
        ]
    },
    {
        "id": "4f4b7e54.8b7164",
        "type": "function",
        "z": "7904b0afeb2b68c0",
        "name": "Paging",
        "func": "// Load 10 records per page by default\nvar perPage = 10;\n\n// Retrieve the payload from the input message\nvar payload = msg.payload;\n\n// Retrieve the current page from the input message\nvar page = msg.page || 1;\n\n// Calculate the starting index for the current page\nvar startIndex = (page - 1) * perPage;\n\n// Calculate the ending index for the current page\nvar endIndex = page * perPage;\n\n// Slice the data array to retrieve the records for the current page\nvar pagedData = payload.slice(startIndex, endIndex);\n\n// Create a new message with the paged data\nmsg.payload = pagedData;\n\n// Return the modified message\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 360,
        "y": 620,
        "wires": [
            [
                "e0ef206c.ae46b8"
            ]
        ]
    },
    {
        "id": "e0ef206c.ae46b8",
        "type": "ui_table",
        "z": "7904b0afeb2b68c0",
        "group": "",
        "name": "",
        "order": 1,
        "width": "6",
        "height": "4",
        "columns": [
            {
                "field": "id",
                "title": "ID",
                "width": "80px",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "name",
                "title": "Name",
                "width": "200px",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 560,
        "y": 620,
        "wires": []
    },
    {
        "id": "950bc7a38b7588b2",
        "type": "Kafka Admin",
        "z": "7904b0afeb2b68c0",
        "name": "Connect",
        "broker": "01239f0e2e5d8173",
        "x": 120,
        "y": 500,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "f94006127c4e3798",
        "type": "debug",
        "z": "7904b0afeb2b68c0",
        "name": "Debug Facts Requested",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 380,
        "wires": []
    },
    {
        "id": "d9fb626ff6d93c12",
        "type": "inject",
        "z": "7904b0afeb2b68c0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "topic": "getFacts",
        "payload": "{\"filters\":{\"parent_name\":\"\"},\"page\":1,\"itemsPerPage\":5}",
        "payloadType": "str",
        "x": 410,
        "y": 220,
        "wires": [
            [
                "298f0efcfe6e4509"
            ]
        ]
    },
    {
        "id": "298f0efcfe6e4509",
        "type": "Kafka Producer",
        "z": "7904b0afeb2b68c0",
        "name": "",
        "broker": "01239f0e2e5d8173",
        "topic": "getFacts15",
        "topicSlash2dot": false,
        "requireAcks": 1,
        "ackTimeoutMs": 100,
        "partitionerType": 0,
        "key": "",
        "partition": 0,
        "attributes": 0,
        "connectionType": "Producer",
        "convertFromJson": false,
        "x": 740,
        "y": 160,
        "wires": []
    },
    {
        "id": "9df7ae035994eeaa",
        "type": "kafka-consumer",
        "z": "7904b0afeb2b68c0",
        "name": "getFactsKafka",
        "broker": "a734a95fe6c7b3dc",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "jobRequest",
        "groupid": "",
        "x": 670,
        "y": 440,
        "wires": [
            [
                "1e011873a5266a77"
            ]
        ]
    },
    {
        "id": "4f09d6b681cf35af",
        "type": "ui_table",
        "z": "7904b0afeb2b68c0",
        "group": "eb430edea69b48da",
        "name": "Submitted JOBS",
        "order": 2,
        "width": 24,
        "height": 8,
        "columns": [
            {
                "field": "timestamp",
                "title": "Index",
                "width": "80",
                "align": "left",
                "formatter": "rownum",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "valueJSON.jobName",
                "title": "JOB Name",
                "width": "180",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "valueJSON.ruleTypes",
                "title": "Rule Types (csv)",
                "width": "120",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "valueJSON.whereClause",
                "title": "Where",
                "width": "120",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "valueJSON.limit",
                "title": "Limit",
                "width": "80",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "valueJSON.offset",
                "title": "Offset",
                "width": "80",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "timestamp",
                "title": "Time",
                "width": "120",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "valueJSON.totalRows",
                "title": "Total Rows",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1290,
        "y": 440,
        "wires": []
    },
    {
        "id": "1e011873a5266a77",
        "type": "function",
        "z": "7904b0afeb2b68c0",
        "name": "Get Submitted JOBs Request",
        "func": "\nlet getFactsRequest =flow.get(\"getFactsRequest\") || []\n\n\n\nmsg.payload.valueJSON = JSON.parse(msg.payload.value)\ngetFactsRequest.unshift(msg.payload)\n\nif(getFactsRequest.length > 50) getFactsRequest.pop()\nflow.set('getFactsRequest', getFactsRequest)\n\nmsg.payload = getFactsRequest\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 440,
        "wires": [
            [
                "f94006127c4e3798",
                "4f09d6b681cf35af"
            ]
        ]
    },
    {
        "id": "2fe66324eaaf88a2",
        "type": "function",
        "z": "7904b0afeb2b68c0",
        "name": "function 1",
        "func": "msg.payload =[\n    {\n\n        \"topic\": \"getFacts2\",\n        \"value\": \"{\\\"filters\\\":{\\\"parent_name\\\":\\\"\\\"},\\\"page\\\":1,\\\"itemsPerPage\\\":5}\",\n        \"offset\": 55,\n        \"partition\": 0,\n        \"highWaterOffset\": 56,\n        \"key\": \"JOB2\",\n        \"timestamp\": \"2023-05-22T17:51:37.915Z\"\n    },\n    {\n        \"topic\": \"getFacts3\",\n        \"value\": \"{\\\"filters\\\":{\\\"parent_name\\\":\\\"\\\"},\\\"page\\\":1,\\\"itemsPerPage\\\":5}\",\n        \"offset\": 55,\n        \"partition\": 0,\n        \"highWaterOffset\": 56,\n        \"key\": \"JOB3\",\n        \"timestamp\": \"2023-05-22T17:51:37.915Z\"\n    }\n]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "efb170aa269caec2",
        "type": "inject",
        "z": "7904b0afeb2b68c0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 840,
        "y": 540,
        "wires": [
            [
                "2fe66324eaaf88a2"
            ]
        ]
    },
    {
        "id": "9f5e64e6da2963a2",
        "type": "kafka-consumer",
        "z": "7904b0afeb2b68c0",
        "name": "getNotification",
        "broker": "a734a95fe6c7b3dc",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "notification",
        "groupid": "",
        "x": 420,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "cc85bb2b1dcd0c22",
        "type": "ui_button",
        "z": "7904b0afeb2b68c0",
        "name": "",
        "group": "eb430edea69b48da",
        "order": 1,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "Add",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-plus",
        "payload": "{\"api_key\":\"x5nDCpvGTkvHniq8wJ9m\",\"page\":1,\"itemsPerPage\":10,\"filters\":\"\",\"jobName\":\"New Job\",\"time_to_submit\":\"now\",\"ruleTypes\":\"estab\",\"where\":{},\"totalRows\":100}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 340,
        "wires": [
            [
                "f3a3d8d2.5b1b98"
            ]
        ]
    },
    {
        "id": "e95f3d11.449c1",
        "type": "inject",
        "z": "50e56d1290888d82",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 120,
        "wires": [
            [
                "4ff91880.4d278"
            ]
        ]
    },
    {
        "id": "4ff91880.4d278",
        "type": "function",
        "z": "50e56d1290888d82",
        "name": "Initial Filter",
        "func": "msg.payload = {\n\n    filters:{ \"parent_name1\":\"\"},\n    page: 1,\n    itemsPerPage: 1\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 120,
        "wires": [
            [
                "8d257f7c.160ea"
            ]
        ]
    },
    {
        "id": "8d257f7c.160ea",
        "type": "http request",
        "z": "50e56d1290888d82",
        "name": "API Request",
        "method": "GET",
        "ret": "json",
        "paytoqs": "body",
        "url": "http://localhost/companies?api_token=x5nDCpvGTkvHniq8wJ9m&DEBUG=false&filters={}&page={{payload.page}}&itemsPerPage={{payload.itemsPerPage}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 480,
        "y": 120,
        "wires": [
            [
                "2ee7e10c.eedc26"
            ]
        ]
    },
    {
        "id": "2ee7e10c.eedc26",
        "type": "function",
        "z": "50e56d1290888d82",
        "name": "Data Transformation",
        "func": "// Perform data transformation here\n\ntry {\n    // Parse the response string as JSON\n    var rows = JSON.parse(msg.payload);\n\n    // Assign the parsed JSON to the payload for further processing\n    msg.payload = rows;\n\n    // Return the modified message object\n\n\n    // Calculate the next page number\n    var nextPage = msg.payload.page + 1;\n\n    // // Check if there are more pages to fetch\n    if (nextPage <= msg.payload.totalPages) {\n        msg.payload.page = nextPage;\n        return [msg, null]; // Send the updated filter to fetch more data\n    } else {\n        return [null, msg]; // End the flow\n\n\n\n    }\n\n\n    return msg;\n} catch (error) {\n    // Handle parsing errors\n    node.error(\"Failed to parse JSON: \" + error.message);\n    return null;\n}\n\n\n\n\n// Extract the necessary data from the API response\nvar rows = msg.payload.data;\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 420,
        "wires": [
            [],
            [
                "7f7cc704.f4ee0c"
            ]
        ]
    },
    {
        "id": "7f7cc704.f4ee0c",
        "type": "debug",
        "z": "50e56d1290888d82",
        "name": "Final Result",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 120,
        "wires": []
    },
    {
        "id": "f4f42ec4abed4ed1",
        "type": "debug",
        "z": "50e56d1290888d82",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 580,
        "wires": []
    },
    {
        "id": "dc7fae5b6b8d3247",
        "type": "Kafka Admin",
        "z": "50e56d1290888d82",
        "d": true,
        "name": "",
        "broker": "01239f0e2e5d8173",
        "x": 130,
        "y": 340,
        "wires": [
            [
                "f4f42ec4abed4ed1"
            ],
            [
                "f4f42ec4abed4ed1"
            ]
        ]
    },
    {
        "id": "a8eca61a1377607f",
        "type": "kafka-producer",
        "z": "50e56d1290888d82",
        "d": true,
        "name": "GetFacts",
        "broker": "a734a95fe6c7b3dc",
        "topic": "getFacts",
        "requireAcks": 1,
        "ackTimeoutMs": 100,
        "attributes": 0,
        "x": 160,
        "y": 440,
        "wires": []
    },
    {
        "id": "68b02e77b331c7e0",
        "type": "kafka-consumer",
        "z": "5b93d75bf6b1464b",
        "d": true,
        "name": "gotFactsAndRules",
        "broker": "a734a95fe6c7b3dc",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "gotFactsAndRules",
        "groupid": "monitor-FactsAndRules",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "d7313916b7f09773"
            ]
        ]
    },
    {
        "id": "2590f66be1246f75",
        "type": "ui_gauge",
        "z": "5b93d75bf6b1464b",
        "name": "gotFactsAndRules",
        "group": "48f7a1eaae28d5a3",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Prep (gotFactsAndRules)",
        "label": "msg/s",
        "format": "{{value}}",
        "min": 0,
        "max": "1000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 870,
        "y": 40,
        "wires": []
    },
    {
        "id": "0e9a705cb36107a9",
        "type": "kafka-consumer",
        "z": "5b93d75bf6b1464b",
        "d": true,
        "name": "gotQBES",
        "broker": "a734a95fe6c7b3dc",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "gotQBES",
        "groupid": "monitor-QBES",
        "x": 160,
        "y": 320,
        "wires": [
            [
                "5fbc44228a934cef"
            ]
        ]
    },
    {
        "id": "5fbc44228a934cef",
        "type": "function",
        "z": "5b93d75bf6b1464b",
        "name": "",
        "func": "let count = flow.get('Qcount') || 0\n++count\n\nflow.set('Qcount', count)\nmsg.payload = count\n\n// time\n// const currentDate = new Date();\n// const hours = String(currentDate.getHours()).padStart(2, '0');\n// const minutes = String(currentDate.getMinutes()).padStart(2, '0');\n// const seconds = String(currentDate.getSeconds()).padStart(2, '0');\n// const milliseconds = String(currentDate.getMilliseconds()).padStart(3, '0');\n\n// const formattedDate = `${hours}:${minutes}:${seconds}.${milliseconds}`;\n// console.log(formattedDate);\n\n\n// msg.time = formattedDate\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 320,
        "wires": [
            [
                "736a098e0d89c486",
                "f1e3cc8d17f0d90a"
            ]
        ]
    },
    {
        "id": "cb61f630f72a3a72",
        "type": "ui_gauge",
        "z": "5b93d75bf6b1464b",
        "name": "gotQBES",
        "group": "996eec6072a83356",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "gotQBES",
        "label": "msg/s",
        "format": "{{value}}",
        "min": 0,
        "max": "1000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 640,
        "y": 280,
        "wires": []
    },
    {
        "id": "047292666e30524f",
        "type": "ui_chart",
        "z": "5b93d75bf6b1464b",
        "name": "gotFactsAndRules Rate",
        "group": "48f7a1eaae28d5a3",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "1500",
        "removeOlder": "20",
        "removeOlderPoints": "",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 930,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "d7313916b7f09773",
        "type": "function",
        "z": "5b93d75bf6b1464b",
        "name": "function 3",
        "func": "let count = flow.get('FRcount') || 0\n++count\n\nflow.set('FRcount', count)\nmsg.payload = count\n\n// time\nconst currentDate = new Date();\nconst hours = String(currentDate.getHours()).padStart(2, '0');\nconst minutes = String(currentDate.getMinutes()).padStart(2, '0');\nconst seconds = String(currentDate.getSeconds()).padStart(2, '0');\nconst milliseconds = String(currentDate.getMilliseconds()).padStart(3, '0');\n\nconst formattedDate = `${hours}:${minutes}:${seconds}.${milliseconds}`;\nconsole.log(formattedDate);\n\n\nmsg.time = formattedDate\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 120,
        "wires": [
            [
                "209dc2041dfe2c8f",
                "6a35c7156aa8dac8"
            ]
        ]
    },
    {
        "id": "f0a226f43452b982",
        "type": "ui_chart",
        "z": "5b93d75bf6b1464b",
        "name": "gotQBES Rate",
        "group": "996eec6072a83356",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "1500",
        "removeOlder": "20",
        "removeOlderPoints": "",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 920,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "209dc2041dfe2c8f",
        "type": "msg-speed",
        "z": "5b93d75bf6b1464b",
        "name": "Rate of gotFactsAndRules",
        "frequency": "sec",
        "interval": 1,
        "estimation": false,
        "ignore": false,
        "pauseAtStartup": false,
        "topicDependent": false,
        "x": 580,
        "y": 40,
        "wires": [
            [
                "2590f66be1246f75",
                "662dc610f097b1d5"
            ],
            []
        ]
    },
    {
        "id": "736a098e0d89c486",
        "type": "msg-speed",
        "z": "5b93d75bf6b1464b",
        "name": "Rate of gotQBES",
        "frequency": "sec",
        "interval": 1,
        "estimation": false,
        "ignore": false,
        "pauseAtStartup": false,
        "topicDependent": false,
        "x": 470,
        "y": 320,
        "wires": [
            [
                "cb61f630f72a3a72",
                "7f56704fac4a07f8"
            ],
            []
        ]
    },
    {
        "id": "f1e3cc8d17f0d90a",
        "type": "ui_text",
        "z": "5b93d75bf6b1464b",
        "group": "996eec6072a83356",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "large-text",
        "x": 490,
        "y": 420,
        "wires": []
    },
    {
        "id": "6a35c7156aa8dac8",
        "type": "ui_text",
        "z": "5b93d75bf6b1464b",
        "group": "48f7a1eaae28d5a3",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": ".num1",
        "x": 490,
        "y": 200,
        "wires": []
    },
    {
        "id": "2435f540dcad5cd3",
        "type": "kafka-consumer",
        "z": "5b93d75bf6b1464b",
        "d": true,
        "name": "gotFLOW",
        "broker": "a734a95fe6c7b3dc",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "gotFLOW",
        "groupid": "monitor-FLOW",
        "x": 120,
        "y": 540,
        "wires": [
            [
                "0b818dde7278d861"
            ]
        ]
    },
    {
        "id": "0b818dde7278d861",
        "type": "function",
        "z": "5b93d75bf6b1464b",
        "name": "",
        "func": "let count = flow.get('Flcount') || 0\n++count\n\nflow.set('Flcount', count)\nmsg.payload = count\n\n// time\n// const currentDate = new Date();\n// const hours = String(currentDate.getHours()).padStart(2, '0');\n// const minutes = String(currentDate.getMinutes()).padStart(2, '0');\n// const seconds = String(currentDate.getSeconds()).padStart(2, '0');\n// const milliseconds = String(currentDate.getMilliseconds()).padStart(3, '0');\n\n// const formattedDate = `${hours}:${minutes}:${seconds}.${milliseconds}`;\n// console.log(formattedDate);\n\n\n// msg.time = formattedDate\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 540,
        "wires": [
            [
                "ad770cdd757f61b0",
                "910cda8ecced866a"
            ]
        ]
    },
    {
        "id": "b5b3f3ba092e5086",
        "type": "ui_gauge",
        "z": "5b93d75bf6b1464b",
        "name": "gotFLOW",
        "group": "114d7a8d369bd580",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "gotFLOW",
        "label": "msg/s",
        "format": "{{value}}",
        "min": 0,
        "max": "1000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 620,
        "y": 500,
        "wires": []
    },
    {
        "id": "5ffca1f4b79bed35",
        "type": "ui_chart",
        "z": "5b93d75bf6b1464b",
        "name": "gotFLOW Rate",
        "group": "114d7a8d369bd580",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "1500",
        "removeOlder": "20",
        "removeOlderPoints": "",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 800,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "ad770cdd757f61b0",
        "type": "msg-speed",
        "z": "5b93d75bf6b1464b",
        "name": "Rate of gotFLOW",
        "frequency": "sec",
        "interval": 1,
        "estimation": false,
        "ignore": false,
        "pauseAtStartup": false,
        "topicDependent": false,
        "x": 450,
        "y": 540,
        "wires": [
            [
                "b5b3f3ba092e5086",
                "f4a31c78cdd7a7ed"
            ],
            []
        ]
    },
    {
        "id": "910cda8ecced866a",
        "type": "ui_text",
        "z": "5b93d75bf6b1464b",
        "group": "114d7a8d369bd580",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "large-text",
        "x": 470,
        "y": 640,
        "wires": []
    },
    {
        "id": "ef4f0392366d1ebc",
        "type": "ui_button",
        "z": "5b93d75bf6b1464b",
        "name": "",
        "group": "e9f83f755d518ecd",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "replay",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 760,
        "wires": [
            [
                "71bfae055bcddd8c"
            ]
        ]
    },
    {
        "id": "71bfae055bcddd8c",
        "type": "function",
        "z": "5b93d75bf6b1464b",
        "name": "function",
        "func": "flow.set('Flcount', 0)\nflow.set('Qcount', 0)\nflow.set('FRcount', 0)\n\nmsg.payload = 0\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 760,
        "wires": [
            [
                "33715e06582ea903"
            ]
        ]
    },
    {
        "id": "33715e06582ea903",
        "type": "link out",
        "z": "5b93d75bf6b1464b",
        "name": "link out clearbutton",
        "mode": "link",
        "links": [
            "f453bd68030b7579",
            "acfb6194fd1c2634",
            "429686d6c1a3a7c7"
        ],
        "x": 435,
        "y": 760,
        "wires": []
    },
    {
        "id": "429686d6c1a3a7c7",
        "type": "link in",
        "z": "5b93d75bf6b1464b",
        "name": "link in clear text 3",
        "links": [
            "33715e06582ea903"
        ],
        "x": 365,
        "y": 640,
        "wires": [
            [
                "910cda8ecced866a"
            ]
        ]
    },
    {
        "id": "acfb6194fd1c2634",
        "type": "link in",
        "z": "5b93d75bf6b1464b",
        "name": "link in clear text 2",
        "links": [
            "33715e06582ea903"
        ],
        "x": 385,
        "y": 420,
        "wires": [
            [
                "f1e3cc8d17f0d90a"
            ]
        ]
    },
    {
        "id": "f453bd68030b7579",
        "type": "link in",
        "z": "5b93d75bf6b1464b",
        "name": "link in clear text 1",
        "links": [
            "33715e06582ea903"
        ],
        "x": 385,
        "y": 200,
        "wires": [
            [
                "6a35c7156aa8dac8"
            ]
        ]
    },
    {
        "id": "662dc610f097b1d5",
        "type": "rbe",
        "z": "5b93d75bf6b1464b",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 730,
        "y": 100,
        "wires": [
            [
                "047292666e30524f"
            ]
        ]
    },
    {
        "id": "7f56704fac4a07f8",
        "type": "rbe",
        "z": "5b93d75bf6b1464b",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 690,
        "y": 320,
        "wires": [
            [
                "f0a226f43452b982"
            ]
        ]
    },
    {
        "id": "f4a31c78cdd7a7ed",
        "type": "rbe",
        "z": "5b93d75bf6b1464b",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 630,
        "y": 540,
        "wires": [
            [
                "5ffca1f4b79bed35"
            ]
        ]
    },
    {
        "id": "918f1a6a7f8e0da0",
        "type": "ui_table",
        "z": "762437ab597e66e7",
        "group": "f1ba9b7b3ccb3021",
        "name": "PreData",
        "order": 1,
        "width": 8,
        "height": 13,
        "columns": [
            {
                "field": "preData",
                "title": "PreData",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 720,
        "y": 320,
        "wires": []
    },
    {
        "id": "08499d1a576e8c5e",
        "type": "function",
        "z": "762437ab597e66e7",
        "name": "Edit PreData for table display",
        "func": "let arr = []\n\nif (msg.payload.rows[0]) {\n    msg.payload = msg.payload.rows[0]\n}\n\nfor (let prop in msg.payload) {\n    if (msg.payload.hasOwnProperty(prop)) {\n        arr.push(\n            {\n                \"preData\": JSON.stringify(prop) + \": \" + JSON.stringify(msg.payload[prop])\n            }\n        )\n    }\n}\n\nmsg.payload = arr\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 320,
        "wires": [
            [
                "918f1a6a7f8e0da0"
            ]
        ]
    },
    {
        "id": "3078bbd57bbee057",
        "type": "digitaloak-postgresql-query",
        "z": "762437ab597e66e7",
        "d": true,
        "name": "",
        "server": "d25654593e23b264",
        "inputs": 1,
        "outputs": 1,
        "x": 230,
        "y": 260,
        "wires": [
            [
                "56566e824f8876c0"
            ]
        ]
    },
    {
        "id": "d083dbfbcc7f8565",
        "type": "inject",
        "z": "762437ab597e66e7",
        "name": "",
        "props": [
            {
                "p": "query",
                "v": "SELECT *  FROM product_aies.balance",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "3078bbd57bbee057"
            ]
        ]
    },
    {
        "id": "56566e824f8876c0",
        "type": "function",
        "z": "762437ab597e66e7",
        "name": "function 26",
        "func": "msg.payload = JSON.parse(JSON.stringify(msg.payload))\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 320,
        "wires": [
            [
                "4487da4bad26b086",
                "08499d1a576e8c5e",
                "b1b0259364f23c4f"
            ]
        ]
    },
    {
        "id": "4487da4bad26b086",
        "type": "debug",
        "z": "762437ab597e66e7",
        "name": "debug 53",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 260,
        "y": 360,
        "wires": []
    },
    {
        "id": "b1b0259364f23c4f",
        "type": "function",
        "z": "762437ab597e66e7",
        "name": "balance module",
        "func": "\nif (msg.payload.rows[0]) {\n    msg.payload = msg.payload.rows[0]\n}\n\nfunction sumOfVariables(total, arr) {\n    let sumDET = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sumDET += arr[i];\n    }    \n    \n    if (sumDET > 0 && total == 0 ) {\n        total = sumDET\n        msg.payload.total_flg ? msg.payload.total_flg + 'L' : msg.payload.total_flg = 'L'\n    } else if (sumDET == 0 && total > 0 ) {\n        total = sumDET\n        msg.payload.details_flg ? msg.payload.details_flg + 'X' : msg.payload.details_flg = 'X'\n    } else if (sumDET > 0 && total > 0) {\n        let ratio = sumDET / total;\n        if (ratio >= 0.8 && ratio <= 1.2) {\n            msg.payload.details_flg ? msg.payload.details_flg + 'X' : msg.payload.details_flg = 'X'\n        } else {\n            total = sumDET\n            msg.payload.details_flg ? msg.payload.details_flg + 'X' : msg.payload.details_flg = 'X'\n        }\n    } else if (sumDET == 0 && total == 0 ) {\n        msg.imputations = true\n        msg.payload.details_flg ? msg.payload.details_flg + 'X' : msg.payload.details_flg = 'X'\n    }\n}\n\nsumOfVariables(msg.payload.capex_mach_tot_dval, [msg.payload.capex_build_new_val, msg.payload.capex_build_used_val] )\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 420,
        "wires": [
            [
                "fef8d59666620920",
                "ee87e1c7492c79a6"
            ]
        ]
    },
    {
        "id": "f992b22ba61fed2a",
        "type": "ui_table",
        "z": "762437ab597e66e7",
        "group": "05ad88d05dd28ef3",
        "name": "PostData",
        "order": 1,
        "width": 8,
        "height": 13,
        "columns": [
            {
                "field": "postData",
                "title": "PostData",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 960,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "fef8d59666620920",
        "type": "function",
        "z": "762437ab597e66e7",
        "name": "Edit PostData for table display",
        "func": "let arr = []\n\nfor (let prop in msg.payload) {\n    if (msg.payload.hasOwnProperty(prop)) {\n        arr.push(\n            {\n                \"postData\": JSON.stringify(prop) + \": \" + JSON.stringify(msg.payload[prop])\n            }\n        )\n    }\n}\n\nmsg.payload = arr\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 420,
        "wires": [
            [
                "f992b22ba61fed2a"
            ]
        ]
    },
    {
        "id": "ee87e1c7492c79a6",
        "type": "debug",
        "z": "762437ab597e66e7",
        "name": "debug 54",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 540,
        "wires": []
    },
    {
        "id": "e9fa3350f5c93cb6",
        "type": "switch",
        "z": "6e9fd4ed1a3126bb",
        "name": "AIES_SCOPE = Y?",
        "property": "payload.csv[0].AIES_SCOPE",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "Y",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Y",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 410,
        "y": 60,
        "wires": [
            [
                "0cca7ad92d65e9cb"
            ],
            []
        ]
    },
    {
        "id": "0cca7ad92d65e9cb",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6e9fd4ed1a3126bb",
        "name": "No, go to KAU to Company Additivity Check",
        "x": 730,
        "y": 60,
        "wires": [
            [
                "91a9fa721bc780a7"
            ]
        ]
    },
    {
        "id": "28d12ec798feff1f",
        "type": "comment",
        "z": "6e9fd4ed1a3126bb",
        "name": "Yes, Estab",
        "info": "",
        "x": 180,
        "y": 120,
        "wires": []
    },
    {
        "id": "3be8086856cf7054",
        "type": "comment",
        "z": "6e9fd4ed1a3126bb",
        "name": "KAU",
        "info": "",
        "x": 190,
        "y": 420,
        "wires": []
    },
    {
        "id": "8308a860a28a667a",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6e9fd4ed1a3126bb",
        "name": "Estab to KAU Additivity Check",
        "x": 430,
        "y": 600,
        "wires": [
            [
                "79ec7e7740105338"
            ]
        ]
    },
    {
        "id": "9a33c9d5fc0da1ac",
        "type": "comment",
        "z": "6e9fd4ed1a3126bb",
        "name": "Company",
        "info": "",
        "x": 180,
        "y": 680,
        "wires": []
    },
    {
        "id": "316698c0494d4e3b",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6e9fd4ed1a3126bb",
        "name": "KAU to Company Additivity Check",
        "x": 440,
        "y": 760,
        "wires": [
            [
                "b0b45ae1f1bdcdbd"
            ]
        ]
    },
    {
        "id": "b0b45ae1f1bdcdbd",
        "type": "switch",
        "z": "6e9fd4ed1a3126bb",
        "name": "Changes made?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Y",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "Y",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 740,
        "y": 760,
        "wires": [
            [
                "3157732f4bf84ecd"
            ],
            [
                "0af56ba421e1a804"
            ]
        ]
    },
    {
        "id": "3157732f4bf84ecd",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6e9fd4ed1a3126bb",
        "name": "Yes, go to BR stat evaluation",
        "x": 980,
        "y": 760,
        "wires": [
            [
                "ae6ad5331182af2d"
            ]
        ]
    },
    {
        "id": "0af56ba421e1a804",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6e9fd4ed1a3126bb",
        "name": "Company Complete",
        "x": 760,
        "y": 840,
        "wires": [
            [
                "93e6d382a25077f2"
            ]
        ]
    },
    {
        "id": "93e6d382a25077f2",
        "type": "subflow:03552ca229e3a7a0",
        "z": "6e9fd4ed1a3126bb",
        "name": "Rerun data prep edits or just Derived Items?",
        "x": 1110,
        "y": 840,
        "wires": [
            [
                "36ac45a273e5509f"
            ]
        ]
    },
    {
        "id": "91a9fa721bc780a7",
        "type": "link out",
        "z": "6e9fd4ed1a3126bb",
        "name": "go to KAU additivity check",
        "mode": "link",
        "links": [
            "67f5350a6d95fbeb"
        ],
        "x": 945,
        "y": 60,
        "wires": []
    },
    {
        "id": "67f5350a6d95fbeb",
        "type": "link in",
        "z": "6e9fd4ed1a3126bb",
        "name": "link in 31",
        "links": [
            "91a9fa721bc780a7"
        ],
        "x": 285,
        "y": 760,
        "wires": [
            [
                "316698c0494d4e3b"
            ]
        ]
    },
    {
        "id": "ae6ad5331182af2d",
        "type": "link out",
        "z": "6e9fd4ed1a3126bb",
        "name": "go to BR stat eval",
        "mode": "link",
        "links": [
            "86d4c2b68eb247d4"
        ],
        "x": 1115,
        "y": 760,
        "wires": []
    },
    {
        "id": "9f944ba2a098566c",
        "type": "function",
        "z": "6e9fd4ed1a3126bb",
        "name": "Append Data",
        "func": "let s = flow.get(\"state\") || []\nlet p = msg.payload.csv[0]\np.inputOrOutput = \"out\"\np.timestamp = generateTimestamp()\ns.unshift(p)\n\nif (s.length > 50) {\n    s = s.slice(0, 50);\n}\n\nflow.set(\"state\", s)\nmsg.payload = s\n\n\nfunction generateTimestamp() {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    let hour = now.getHours();\n    const minute = String(now.getMinutes()).padStart(2, '0');\n    const second = String(now.getSeconds()).padStart(2, '0');\n\n    let period = 'AM';\n    if (hour >= 12) {\n        period = 'PM';\n        hour -= 12;\n    }\n    if (hour === 0) {\n        hour = 12;\n    }\n\n    const timestamp = `${year}-${month}-${day} ${hour}:${minute}:${second} ${period}`;\n    return timestamp;\n}\n\n\nnode.send(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1000,
        "wires": [
            [
                "8adc41f28f4031b3",
                "cb8e966fa360d484"
            ]
        ]
    },
    {
        "id": "8adc41f28f4031b3",
        "type": "ui_table",
        "z": "6e9fd4ed1a3126bb",
        "group": "6414e38571345793",
        "name": "Modules Data",
        "order": 1,
        "width": "18",
        "height": "20",
        "columns": [
            {
                "field": "EPPAYANN",
                "title": "Index",
                "width": "",
                "align": "left",
                "formatter": "rownum",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "timestamp",
                "title": "Created",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "module",
                "title": "Module",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "inputOrOutput",
                "title": "In / Out",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "PAY_ANN_VAL",
                "title": "PAY_ANN_VAL",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "EMP_MAR12_NUM",
                "title": "EMP_MAR12_NUM",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "PAY_QTR1_VAL",
                "title": "PAY_QTR1_VAL",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "RCPT_TOT_VAL",
                "title": "RCPT_TOT_VAL",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 620,
        "y": 1000,
        "wires": []
    },
    {
        "id": "d50a64a5a0668810",
        "type": "link in",
        "z": "6e9fd4ed1a3126bb",
        "name": "link in TABLE",
        "links": [
            "0213c59c5c3e5daa",
            "1728e38a2a40b462",
            "29f9126c35b5deb6",
            "2a4d52398bb3d587",
            "455c8bacb3059701",
            "4b287c6a84b703e2",
            "5a039fea024b882c",
            "5e2818279732d1d4",
            "608e1d25710336f8",
            "86016fdfc48b4351",
            "875ce7d3fc33f058",
            "892b56b0bc650876",
            "97538a9f125810a7",
            "9f74945d93f983f1",
            "b65643afe0093cf5",
            "b73c8d9aecceec59",
            "ba4f6f3992473497",
            "c261422973f8441f",
            "c8729912fca5fc84",
            "d8f39773080a0179",
            "e3b9801fea0e353f",
            "eebe4f43ea98127d",
            "f2e55b876978ee47",
            "f51d8c89650868a3",
            "f8c507b76d49363e",
            "76611ce4593cf7cb"
        ],
        "x": 305,
        "y": 1000,
        "wires": [
            [
                "9f944ba2a098566c"
            ]
        ]
    },
    {
        "id": "f2e55b876978ee47",
        "type": "link out",
        "z": "6e9fd4ed1a3126bb",
        "name": "link out 28",
        "mode": "link",
        "links": [
            "d50a64a5a0668810"
        ],
        "x": 455,
        "y": 200,
        "wires": []
    },
    {
        "id": "86016fdfc48b4351",
        "type": "link out",
        "z": "6e9fd4ed1a3126bb",
        "name": "link out 29",
        "mode": "link",
        "links": [
            "d50a64a5a0668810"
        ],
        "x": 655,
        "y": 200,
        "wires": []
    },
    {
        "id": "5a039fea024b882c",
        "type": "link out",
        "z": "6e9fd4ed1a3126bb",
        "name": "link out 30",
        "mode": "link",
        "links": [
            "d50a64a5a0668810"
        ],
        "x": 975,
        "y": 200,
        "wires": []
    },
    {
        "id": "2a4d52398bb3d587",
        "type": "link out",
        "z": "6e9fd4ed1a3126bb",
        "name": "link out 31",
        "mode": "link",
        "links": [
            "d50a64a5a0668810"
        ],
        "x": 1335,
        "y": 200,
        "wires": []
    },
    {
        "id": "c261422973f8441f",
        "type": "link out",
        "z": "6e9fd4ed1a3126bb",
        "name": "link out 32",
        "mode": "link",
        "links": [
            "d50a64a5a0668810"
        ],
        "x": 1695,
        "y": 200,
        "wires": []
    },
    {
        "id": "c8729912fca5fc84",
        "type": "link out",
        "z": "6e9fd4ed1a3126bb",
        "name": "link out 33",
        "mode": "link",
        "links": [
            "d50a64a5a0668810"
        ],
        "x": 455,
        "y": 300,
        "wires": []
    },
    {
        "id": "892b56b0bc650876",
        "type": "link out",
        "z": "6e9fd4ed1a3126bb",
        "name": "link out 34",
        "mode": "link",
        "links": [
            "d50a64a5a0668810"
        ],
        "x": 655,
        "y": 300,
        "wires": []
    },
    {
        "id": "97538a9f125810a7",
        "type": "link out",
        "z": "6e9fd4ed1a3126bb",
        "name": "link out 35",
        "mode": "link",
        "links": [
            "d50a64a5a0668810"
        ],
        "x": 895,
        "y": 300,
        "wires": []
    },
    {
        "id": "f8c507b76d49363e",
        "type": "link out",
        "z": "6e9fd4ed1a3126bb",
        "name": "link out 36",
        "mode": "link",
        "links": [
            "d50a64a5a0668810"
        ],
        "x": 1115,
        "y": 300,
        "wires": []
    },
    {
        "id": "ba4f6f3992473497",
        "type": "link out",
        "z": "6e9fd4ed1a3126bb",
        "name": "link out 37",
        "mode": "link",
        "links": [
            "d50a64a5a0668810"
        ],
        "x": 455,
        "y": 420,
        "wires": []
    },
    {
        "id": "4b287c6a84b703e2",
        "type": "link out",
        "z": "6e9fd4ed1a3126bb",
        "name": "link out 38",
        "mode": "link",
        "links": [
            "d50a64a5a0668810"
        ],
        "x": 815,
        "y": 420,
        "wires": []
    },
    {
        "id": "d8f39773080a0179",
        "type": "link out",
        "z": "6e9fd4ed1a3126bb",
        "name": "link out 39",
        "mode": "link",
        "links": [
            "d50a64a5a0668810"
        ],
        "x": 1015,
        "y": 420,
        "wires": []
    },
    {
        "id": "5e2818279732d1d4",
        "type": "link out",
        "z": "6e9fd4ed1a3126bb",
        "name": "link out 40",
        "mode": "link",
        "links": [
            "d50a64a5a0668810"
        ],
        "x": 1215,
        "y": 420,
        "wires": []
    },
    {
        "id": "b65643afe0093cf5",
        "type": "link out",
        "z": "6e9fd4ed1a3126bb",
        "name": "link out 41",
        "mode": "link",
        "links": [
            "d50a64a5a0668810"
        ],
        "x": 1415,
        "y": 420,
        "wires": []
    },
    {
        "id": "eebe4f43ea98127d",
        "type": "link out",
        "z": "6e9fd4ed1a3126bb",
        "name": "link out 42",
        "mode": "link",
        "links": [
            "d50a64a5a0668810"
        ],
        "x": 1635,
        "y": 420,
        "wires": []
    },
    {
        "id": "f51d8c89650868a3",
        "type": "link out",
        "z": "6e9fd4ed1a3126bb",
        "name": "link out 43",
        "mode": "link",
        "links": [
            "d50a64a5a0668810"
        ],
        "x": 1615,
        "y": 480,
        "wires": []
    },
    {
        "id": "875ce7d3fc33f058",
        "type": "link out",
        "z": "6e9fd4ed1a3126bb",
        "name": "link out 45",
        "mode": "link",
        "links": [
            "d50a64a5a0668810"
        ],
        "x": 455,
        "y": 680,
        "wires": []
    },
    {
        "id": "9f74945d93f983f1",
        "type": "link out",
        "z": "6e9fd4ed1a3126bb",
        "name": "link out 46",
        "mode": "link",
        "links": [
            "d50a64a5a0668810"
        ],
        "x": 665,
        "y": 680,
        "wires": []
    },
    {
        "id": "1728e38a2a40b462",
        "type": "link out",
        "z": "6e9fd4ed1a3126bb",
        "name": "link out 47",
        "mode": "link",
        "links": [
            "d50a64a5a0668810"
        ],
        "x": 855,
        "y": 680,
        "wires": []
    },
    {
        "id": "29f9126c35b5deb6",
        "type": "link out",
        "z": "6e9fd4ed1a3126bb",
        "name": "link out 48",
        "mode": "link",
        "links": [
            "d50a64a5a0668810"
        ],
        "x": 1075,
        "y": 680,
        "wires": []
    },
    {
        "id": "0213c59c5c3e5daa",
        "type": "link out",
        "z": "6e9fd4ed1a3126bb",
        "name": "link out 49",
        "mode": "link",
        "links": [
            "d50a64a5a0668810"
        ],
        "x": 1255,
        "y": 680,
        "wires": []
    },
    {
        "id": "b73c8d9aecceec59",
        "type": "link out",
        "z": "6e9fd4ed1a3126bb",
        "name": "link out 52",
        "mode": "link",
        "links": [
            "d50a64a5a0668810"
        ],
        "x": 1495,
        "y": 200,
        "wires": []
    },
    {
        "id": "0d309d88aeecd224",
        "type": "subflow:acd9862f30af144d",
        "z": "6e9fd4ed1a3126bb",
        "name": "PV",
        "x": 1430,
        "y": 200,
        "wires": [
            [
                "b73c8d9aecceec59",
                "611bd7ef087d0ee4"
            ]
        ]
    },
    {
        "id": "611bd7ef087d0ee4",
        "type": "subflow:ae0faa518ff234d5",
        "z": "6e9fd4ed1a3126bb",
        "name": "Derived Items",
        "x": 1610,
        "y": 200,
        "wires": [
            [
                "c261422973f8441f",
                "eab9d1159d0ab151"
            ]
        ]
    },
    {
        "id": "6247de9ac9e28642",
        "type": "subflow:ae0faa518ff234d5",
        "z": "6e9fd4ed1a3126bb",
        "name": "Derived Items",
        "x": 810,
        "y": 300,
        "wires": [
            [
                "97538a9f125810a7",
                "fa428e05926d3d8a"
            ]
        ]
    },
    {
        "id": "7ace8ac968735bb7",
        "type": "subflow:ae0faa518ff234d5",
        "z": "6e9fd4ed1a3126bb",
        "name": "Derived Items",
        "x": 930,
        "y": 420,
        "wires": [
            [
                "d8f39773080a0179",
                "43300b21ac0a44a9"
            ]
        ]
    },
    {
        "id": "bf0ad18b66b393bb",
        "type": "subflow:ae0faa518ff234d5",
        "z": "6e9fd4ed1a3126bb",
        "name": "Derived Items",
        "x": 1550,
        "y": 420,
        "wires": [
            [
                "eebe4f43ea98127d",
                "a813b3bcc9032af7"
            ]
        ]
    },
    {
        "id": "79ec7e7740105338",
        "type": "subflow:ae0faa518ff234d5",
        "z": "6e9fd4ed1a3126bb",
        "name": "Derived Items",
        "x": 370,
        "y": 680,
        "wires": [
            [
                "875ce7d3fc33f058",
                "c63ae1c91226875b"
            ]
        ]
    },
    {
        "id": "9458a5a943e34e9a",
        "type": "subflow:ae0faa518ff234d5",
        "z": "6e9fd4ed1a3126bb",
        "name": "Derived Items",
        "x": 990,
        "y": 680,
        "wires": [
            [
                "29f9126c35b5deb6",
                "054a7fbcddde2975"
            ]
        ]
    },
    {
        "id": "eab9d1159d0ab151",
        "type": "subflow:473d6735cc46fccd",
        "z": "6e9fd4ed1a3126bb",
        "name": "Logical Edits",
        "x": 370,
        "y": 300,
        "wires": [
            [
                "c8729912fca5fc84",
                "faa95fef437a3a8f"
            ]
        ]
    },
    {
        "id": "43300b21ac0a44a9",
        "type": "subflow:473d6735cc46fccd",
        "z": "6e9fd4ed1a3126bb",
        "name": "Logical Edits",
        "x": 1130,
        "y": 420,
        "wires": [
            [
                "5e2818279732d1d4",
                "d1d4ee74592f6469"
            ]
        ]
    },
    {
        "id": "c63ae1c91226875b",
        "type": "subflow:473d6735cc46fccd",
        "z": "6e9fd4ed1a3126bb",
        "name": "Logical Edits",
        "x": 580,
        "y": 680,
        "wires": [
            [
                "9f74945d93f983f1",
                "84eeb0777962ace2"
            ]
        ]
    },
    {
        "id": "faa95fef437a3a8f",
        "type": "subflow:fd9469a0efbb8a77",
        "z": "6e9fd4ed1a3126bb",
        "name": "Unit Balance",
        "x": 570,
        "y": 300,
        "wires": [
            [
                "892b56b0bc650876",
                "6247de9ac9e28642"
            ]
        ]
    },
    {
        "id": "d1d4ee74592f6469",
        "type": "subflow:fd9469a0efbb8a77",
        "z": "6e9fd4ed1a3126bb",
        "name": "Unit Balance",
        "x": 1330,
        "y": 420,
        "wires": [
            [
                "b65643afe0093cf5",
                "bf0ad18b66b393bb"
            ]
        ]
    },
    {
        "id": "84eeb0777962ace2",
        "type": "subflow:fd9469a0efbb8a77",
        "z": "6e9fd4ed1a3126bb",
        "name": "Unit Balance",
        "x": 770,
        "y": 680,
        "wires": [
            [
                "1728e38a2a40b462",
                "9458a5a943e34e9a"
            ]
        ]
    },
    {
        "id": "cb8e966fa360d484",
        "type": "debug",
        "z": "6e9fd4ed1a3126bb",
        "name": "Modules Data to Table",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 1060,
        "wires": []
    },
    {
        "id": "fa428e05926d3d8a",
        "type": "subflow:96f29b19e2260e65",
        "z": "6e9fd4ed1a3126bb",
        "name": "Post Edit",
        "x": 1040,
        "y": 300,
        "wires": [
            [
                "f8c507b76d49363e"
            ]
        ]
    },
    {
        "id": "a813b3bcc9032af7",
        "type": "subflow:96f29b19e2260e65",
        "z": "6e9fd4ed1a3126bb",
        "name": "Post Edit",
        "x": 1540,
        "y": 480,
        "wires": [
            [
                "f51d8c89650868a3",
                "8308a860a28a667a"
            ]
        ]
    },
    {
        "id": "054a7fbcddde2975",
        "type": "subflow:96f29b19e2260e65",
        "z": "6e9fd4ed1a3126bb",
        "name": "Post Edit",
        "x": 1180,
        "y": 680,
        "wires": [
            [
                "0213c59c5c3e5daa",
                "316698c0494d4e3b"
            ]
        ]
    },
    {
        "id": "23051ea3268843f2",
        "type": "ui_button",
        "z": "6e9fd4ed1a3126bb",
        "name": "",
        "group": "6414e38571345793",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 390,
        "y": 920,
        "wires": [
            [
                "358bd9e6e520f05e"
            ]
        ]
    },
    {
        "id": "358bd9e6e520f05e",
        "type": "function",
        "z": "6e9fd4ed1a3126bb",
        "name": "Clear Data",
        "func": "flow.set(\"state\", []);\n\nmsg.payload = []\n\nnode.send(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 920,
        "wires": [
            [
                "8adc41f28f4031b3"
            ]
        ]
    },
    {
        "id": "76611ce4593cf7cb",
        "type": "link out",
        "z": "6e9fd4ed1a3126bb",
        "name": "link out 53",
        "mode": "link",
        "links": [
            "d50a64a5a0668810"
        ],
        "x": 255,
        "y": 60,
        "wires": []
    },
    {
        "id": "86d4c2b68eb247d4",
        "type": "link in",
        "z": "6e9fd4ed1a3126bb",
        "name": "link in 32",
        "links": [
            "ae6ad5331182af2d"
        ],
        "x": 265,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "e3b9801fea0e353f",
        "type": "link out",
        "z": "6e9fd4ed1a3126bb",
        "name": "link out 25",
        "mode": "link",
        "links": [
            "d50a64a5a0668810"
        ],
        "x": 495,
        "y": 120,
        "wires": []
    },
    {
        "id": "608e1d25710336f8",
        "type": "link out",
        "z": "6e9fd4ed1a3126bb",
        "name": "link out 26",
        "mode": "link",
        "links": [
            "d50a64a5a0668810"
        ],
        "x": 695,
        "y": 120,
        "wires": []
    },
    {
        "id": "455c8bacb3059701",
        "type": "link out",
        "z": "6e9fd4ed1a3126bb",
        "name": "link out 27",
        "mode": "link",
        "links": [
            "d50a64a5a0668810"
        ],
        "x": 895,
        "y": 120,
        "wires": []
    },
    {
        "id": "113d3062305ee712",
        "type": "inject",
        "z": "6e9fd4ed1a3126bb",
        "name": "Incoming Data from QBES",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"csv\":[{\"failure\":1,\"SUM(DET)\":1,\"TOT\":1,\"INDP\":1,\"ESMD\":1,\"REPORTING_ID_TYP\":\"SU\",\"FORM_CODE_IRS\":\"01\",\"NAICS_SECTOR\":51,\"RCPT_NET_IRS_CURR\":24041,\"RCPT_INTEREST_IRS_CURR\":10,\"RCPT_GROSSRENT_IRS_CURR\":20,\"RCPT_OTHINCOME_IRS_CURR\":30,\"RCPT_GROSSINC_IRS_CURR\":40,\"RCPT_TOTINC_IRS_CURR\":50,\"RCPT_TOTREV_IRS_CURR\":60,\"COST_GOODSOLD_IRS_CURR\":70,\"AIES_SCOPE\":\"Y\",\"BR_STAT\":\"Y\",\"NAICS_CODE_OLD\":4821,\"NAICS_WRITIN_TEXT\":\"na\",\"KAU_NAICS\":6221101,\"COVCHGCD\":111,\"COVCHGDT\":\"2022-12-31\",\"Data\":0,\"PDIV\":\"S\",\"ANAIC\":1151234,\"EDTROUTE\":1,\"NAICOLD\":2151234,\"NAICSDSG\":3151234,\"NAICMAIL\":4151234,\"TRADCODE\":\"M\",\"STFIPS\":\"01\",\"GEOREG\":\"03\",\"ACTV_MIO_NUM\":8,\"ACTV_MIO_NUM_FLG\":\"RC\",\"OPSTATS\":\"\",\"OPSTATS_FLG\":\"R\",\"COV_CHG_CODE\":791,\"ACTVMIO_R\":10,\"COV_CHG_DATE\":\"2022-12-31\",\"OPSTAT\":5,\"OPSTAT_FLAG\":\"R\",\"RECORD_TYP\":89,\"BMF_FR941\":3,\"EPPAYANN\":0,\"NONNORM_FLG\":\"\",\"NONNORM\":\"\",\"PAY_QTR1_VAL\":0,\"EMP_MAR12_NUM\":0,\"OPSTATS_F\":\"RC\",\"TEMPMIO\":0,\"ECPAYQ1\":0,\"ACTV_MIO_VAL\":0,\"ACTV_MIO_VAL_FLG\":\"L\",\"ECPAYQ2\":3,\"ECPAYQ3\":4,\"ECPAYQ4\":5,\"ECPAYQ4_F\":\"\",\"REFPER\":2023,\"MADBPAYANN\":0,\"EMP_MAR12_NUM_F\":\"RG\",\"PAY_ANN_VAL\":0,\"PAY_QTR1_VAL_R\":0,\"PAY_QTR1_VAL_FLG\":\"R\",\"EMP_MAR12_NUM_FLG\":\"R\",\"CY_PAY_QTR1_VAL\":1,\"ECPAYQ1ZERO\":\"\",\"CY_EMP_MAR12_NUM\":1,\"ECEMPQ1\":1,\"RCPT_TOT_VAL\":0,\"module\":\"Incoming QBES\",\"UNIT\":\"ESTAB\",\"PAY_ANN_LSD\":0,\"EXPS_TEMPSTAF_VAL\":0,\"PROCESS_DIV_CODE\":\"I\",\"PAY_ANN_PRDWRK_VAL\":0,\"PAY_ANN_NONPRDWRK_VAL\":0,\"ECPAYANN\":10900,\"CY_PAY_ANN\":0,\"CY_PAY_ANN_FLG\":\"K123\",\"ESTABS\":1,\"HISTORIC_ECON_CENSUS\":1,\"MADB_2022_PAYANN\":1,\"ECRCPTOT\":1000,\"MONTHLY_data\":1,\"QSS_data\":1,\"MONTHLY_CMON\":1000,\"QUARTERLY_QREV\":1,\"MADB_2022_RCPTOT\":1,\"MADB_2022_PAYQ1\":1,\"RCPT_TOT_VAL_FLG\":\"\",\"PAY_QTR1_PRDWRK_VAL\":400,\"PAY_QTR1_NONPRDWRK_VAL\":12,\"EMP_MAR12_VAL\":0,\"EMP_MAR12_PRDWRK_NUM\":0,\"EMP_MAR12_NONPRDWRK_NUM\":0,\"MADB_2022_EMPQ1\":120,\"CY_EMP_MAR12\":70,\"CY_EMP_MAR12_FLG\":\"B\",\"EMP_MAR12_VAL_FLG\":\"C\"}]}",
        "payloadType": "json",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "e9fa3350f5c93cb6",
                "76611ce4593cf7cb"
            ]
        ]
    },
    {
        "id": "4480a2673228edf6",
        "type": "link in",
        "z": "6e9fd4ed1a3126bb",
        "name": "link in gotQBES",
        "links": [
            "47bbe840e0da7226",
            "3ec01d49fbdfba54"
        ],
        "x": 265,
        "y": 20,
        "wires": [
            [
                "e9fa3350f5c93cb6"
            ]
        ]
    },
    {
        "id": "36ac45a273e5509f",
        "type": "link out",
        "z": "6e9fd4ed1a3126bb",
        "name": "link out to gotFLOW",
        "mode": "link",
        "links": [
            "b982c1cf6a93e62d",
            "8ad2ab7c27d8d248"
        ],
        "x": 1335,
        "y": 840,
        "wires": []
    },
    {
        "id": "0c4def347547a284",
        "type": "function",
        "z": "0952db06f674f8bc",
        "name": "logical edits function",
        "func": "// const items = [\n//     {\n//         \"VARIABLE\": \"TYPOP_CODE_STAT  RCPT_COMSN_GSV_VAL RCPT_OWN_VAL \\nRCPT_TOT_VAL\",\n//         \"UNIT\": \"estab\",\n//         \"NAICS\": \"NAICS3='425'\",\n//         \"CONDITION \": \"TYPOP_CODE_STAT eq '4X' and RCPT_COMSN_GSV_VAL + RCPT_OWN_VAL ne RCPT_TOT_VAL\",\n//         \"ACTION\": \"set review flag\"\n//     },\n//     {\n//         \"VARIABLE\": \"TYPOP_CODE_STAT  RCPT_COMSN_GSV_VAL RCPT_COMSN_EARN_VAL RCPT_COMSN_AVG_RATE \",\n//         \"UNIT\": \"estab\",\n//         \"NAICS\": \"NAICS3='425'\",\n//         \"CONDITION \": \"TYPOP_CODE_STAT eq '4X' and RCPT_COMSN_GSV_VAL not in (0,.) and RCPT_COMSN_EARN_VAL in (0,.) and RCPT_COMSN_AVG_RATE not in (0,.)\",\n//         \"ACTION\": \"RCPT_COMSN_EARN_VAL = RCPT_COMSN_GSV_VAL * RCPT_COMSN_AVG_RATE\",\n//         \" DESCRIPTION\": \"if they reported a gross selling value from goods gold on commission, and an average commission rate, but didn't provide the amount of commissions (or set to 0), use GSV * average commission rate to derive commission\"\n//     },\n//     {\n//         \"VARIABLE\": \"TYPOP_CODE_STAT  RCPT_COMSN_GSV_VAL RCPT_COMSN_EARN_VAL RCPT_COMSN_AVG_RATE \",\n//         \"UNIT\": \"estab\",\n//         \"NAICS\": \"NAICS3='425'\",\n//         \"CONDITION \": \"TYPOP_CODE_STAT eq '4X' and RCPT_COMSN_GSV_VAL in (0,.) and RCPT_COMSN_EARN_VAL not in (0,.) and RCPT_COMSN_AVG_RATE not in (0,.)\",\n//         \"ACTION\": \"RCPT_COMSN_GSV_VAL = RCPT_COMSN_EARN_VAL \\/ RCPT_COMSN_AVG_RATE\",\n//         \" DESCRIPTION\": \"if they reported commissions and an average commission rate but no GSV, use the commission and commission rate to calculate GSV\"\n//     },\n//     {\n//         \"VARIABLE\": \"TYPOP_CODE_STAT\\nRCPT_OWN_VAL \\nRCPT_TOT_VAL RCPT_COMSN_GSV_VAL \\n RCPT_COMSN_EARN_VAL\",\n//         \"UNIT\": \"estab\",\n//         \"NAICS\": \"NAICS3='425'\",\n//         \"CONDITION \": \"TYPOP_CODE_STAT = '4X' and RCPT_OWN_VAL eq 0 and RCPT_COMSN_GSV_VAL ne RCPT_TOT_VAL and RCPT_COMSN_GSV_VAL < RCPT_TOT_VAL and RCPT_TOT_VAL eq sum(RCPT_COMSN_GSV_VAL, RCPT_COMSN_EARN_VAL)\",\n//         \"ACTION\": \"RCPT_TOT_VAL = RCPT_COMSN_GSV_VAL\",\n//         \" DESCRIPTION\": \"if no sales on own account (i.e., all commission-based) and GSV does not equal total sales (which, by definition can't happen, because GSV + OWN = total sales and if OWN = 0, then GSV = SALES) and SALES = the sum of GSV + COMMISSION, set sales to GSV because commissions should not be included in total sales\"\n//     },\n//     {\n//         \"VARIABLE\": \"TYPOP_CODE_STAT\\nRCPT_OWN_VAL \\nRCPT_TOT_VAL RCPT_COMSN_GSV_VAL \\n RCPT_COMSN_EARN_VAL\",\n//         \"UNIT\": \"estab\",\n//         \"NAICS\": \"NAICS3='425'\",\n//         \"CONDITION \": \"TYPOP_CODE_STAT = '4X' and RCPT_OWN_VAL eq 0 and RCPT_COMSN_GSV_VAL ne RCPT_TOT_VAL and RCPT_COMSN_GSV_VAL > RCPT_TOT_VAL and RCPT_TOT_VAL eq RCPT_COMSN_EARN_VAL\",\n//         \"ACTION\": \"RCPT_TOT_VAL = RCPT_COMSN_GSV_VAL\",\n//         \" DESCRIPTION\": \"if they reported sales as commissions, set sales = GSV\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_ECOMM_VAL\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"42', '44', '45'\",\n//         \"CONDITION \": \"RCPT_ECOMM_STAT eq 2 \",\n//         \"ACTION\": \"RCPT_ECOMM_VAL = 0\",\n//         \" DESCRIPTION\": \"if ecommerce status = 2 (no) then the value for e-commerce should be 0\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_ECOMM_VAL\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"42', '44', '45'\",\n//         \"CONDITION \": \"RCPT_ECOMM_VAL gt 0\",\n//         \"ACTION\": \"RCPT_ECOMM_STAT = 1\",\n//         \" DESCRIPTION\": \"if there's a reliable value for ecommerce, then the e-commerce status variable should be 1\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_MOTR_HAZRD_STAT\\nRCPT_MOTR_HAZRD_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3= '484 '\",\n//         \"CONDITION \": \"If  RCPT_MOTR_HAZRD_STAT =2 and RCPT_MOTR_HAZRD_PCT  = missing\",\n//         \"ACTION\": \" then RCPT_MOTR_HAZRD_PCT =0.\",\n//         \" DESCRIPTION\": \"IF the flag for hazardas materials is reported   and the NAICS is in 484 and the checkbox is a no and % - Hazardous Materials is equal to missing then set the % - Hazardous Materials to 0.\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_MOTR_HAZRD_STAT\\nRCPT_MOTR_HAZRD_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3= '484 '\",\n//         \"CONDITION \": \"If RCPT_MOTR_HAZRD_STAT = . and RCPT_MOTR_HAZRD_PCT  is >0 \",\n//         \"ACTION\": \"then RCPT_MOTR_HAZRD_STAT  =1\",\n//         \" DESCRIPTION\": \"IF the flag for hazardas materials is reported   and the NAICS is in 484 and the checkbox is a missing and % - Hazardous Materials is greater than zero then set the hazardous materials checkbox to yes.\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_MOTR_HAZRD_STAT\\nRCPT_MOTR_HAZRD_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3= '484 '\",\n//         \"CONDITION \": \"If  RCPT_MOTR_HAZRD_STAT = . or 1 and RCPT_MOTR_HAZRD_PCT  is =0 \",\n//         \"ACTION\": \"then RCPT_MOTR_HAZRD_STAT=2\",\n//         \" DESCRIPTION\": \"IF the flag for hazardas materials is reported  and the NAICS is in 484 and the checkbox is a missing or equal to yes  and % - Hazardous Materials is equal to zero then set the hazardous materials checkbox to no\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_MOTR_HAZRD_STAT\\nRCPT_MOTR_HAZRD_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3= '484 '\",\n//         \"CONDITION \": \"If RCPT_MOTR_HAZRD_STAT is 2 and RCPT_MOTR_HAZRD_PCT  is >0 \",\n//         \"ACTION\": \"then RCPT_MOTR_HAZRD_STAT= 1\",\n//         \" DESCRIPTION\": \"IF the flag for hazardas materials is reported   and the NAICS is in 484 and the checkbox is a  equal to no and % - Hazardous Materials is greater than zero then set the hazardous materials checkbox to yes\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_BILL_PAY_PCT\\nRCPT_BILL_OTHOP_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS6=‘561330’ \",\n//         \"CONDITION \": \"If  the sum of RCPT_BILL_PAY_PCT and RCPT_BILL_OTHOP_PCT =0 \",\n//         \"ACTION\": \"then RCPT_BILL_PAY_PCT and\\nRCPT_BILL_OTHOP_PCT =.\",\n//         \" DESCRIPTION\": \"If status is active and NAICS is 561330 and the sum of % of total gross billings x Payroll srvc and % - All other operating revenue equals zero then set them to missing\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_BUS_PCT\\nRCPT_LEISURE_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS6=‘561510’,’561599’,'561520'\",\n//         \"CONDITION \": \"If the sum of RCPT_BUS_PCT and RCPT_LEISURE_PCT =0 \",\n//         \"ACTION\": \"then RCPT_BUS_PCT and RCPT_LEISURE_PCT =.\",\n//         \" DESCRIPTION\": \"If status is active and NAICS is in 561510 or 561599 and the sum of % - Percent of Revenue from Business and % - Percent of Revenue from Leisure equals zero then set them to missing\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_NEWS_PRNT_PCT\\nRCPT_NEWS_ONLINE_PCT\\nRCPT_NEWS_OTH_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS5='51111' \",\n//         \"CONDITION \": \"If sum(RCPT_NEWS_PRNT_PCT,  RCPT_NEWS_ONLINE_PCT, and RCPT_NEWS_OTH_PCT) =0 \",\n//         \"ACTION\": \"then RCPT_NEWS_PRNT_PCT,  RCPT_NEWS_ONLINE_PCT, and RCPT_NEWS_OTH_PCT = .\",\n//         \" DESCRIPTION\": \"If the status is active and the NAICS is in '51111' and the sum of % Print subscriptions and sales,  % Internet subscriptions and sales and % Newspapers - Other media advertising equals zero, then set them to missing.\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_ADV_CLASS_PCT\\nRCPT_ADV_OTH_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS5='51111' \",\n//         \"CONDITION \": \"If the sum of RCPT_ADV_CLASS_PCT and RCPT_ADV_OTH_PCT =0 \",\n//         \"ACTION\": \"then RCPT_ADV_CLASS_PCT and RCPT_ADV_OTH_PCT =.\",\n//         \" DESCRIPTION\": \"If the status is active and the NAICS is in '51111' and the sum of % Print subscriptions and % Advertising Rev - Other Advertising equals zero, then set them to missing.\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_PER_PRNT_PCT\\nRCPT_PER_ONLINE_PCT\\nRCPT_PER_OTH_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS5='51112' \",\n//         \"CONDITION \": \"If sum(RCPT_PER_PRNT_PCT,  RCPT_PER_ONLINE_PCT, and RCPT_PER_OTH_PCT) =0 \",\n//         \"ACTION\": \"then RCPT_NEWS_PRNT_PCT,  RCPT_NEWS_ONLINE_PCT, and RCPT_NEWS_OTH_PCT =.\",\n//         \" DESCRIPTION\": \"If the status is active and the NAICS is in '51112' and the sum of % Print subscriptions and sales, % Internet subscriptions and sales, and % Other media advertising is equal to zero then set them to missing.\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_BOOK_PRNT_PCT\\nRCPT_BOOK_ONLINE_PCT\\nRCPT_BOOK_OTH_PCT\\n\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS5='51113' \",\n//         \"CONDITION \": \"If sum (RCPT_BOOK_PRNT_PCT,  RCPT_BOOK_ONLINE_PCT, and RCPT_BOOK_OTH_PCT) =0\",\n//         \"ACTION\": \"then RCPT_BOOK_PRNT_PCT,  RCPT_BOOK_ONLINE_PCT, and RCPT_BOOK_OTH_PCT =.\",\n//         \" DESCRIPTION\": \"If the status is active and the NAICS is in '51113' and the sum of % Books - Print,  % Books - Internet, and % Books - other media is equal to zero then set them to missing.\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_DIR_PRNT_PCT\\nRCPT_DIR_ONLINE_PCT\\nRCPT_DIR_OTH_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS5='51114' \",\n//         \"CONDITION \": \"If sum(RCPT_DIR_PRNT_PCT,  RCPT_DIR_ONLINE_PCT, and RCPT_DIR_OTH_PCT) =0 \",\n//         \"ACTION\": \"then RCPT_DIR_PRNT_PCT,  RCPT_DIR_ONLINE_PCT, and RCPT_DIR_OTH_PCT =.\",\n//         \" DESCRIPTION\": \"If the status is active and the NAICS is in '51114' and the sum of % Print subscriptions and sales, % Internet subscriptions and sales, and % Other media advertising is equal to zero then set them to missing.\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_SYSOFT_PERS_PCT\\nRCPT_SYSOFT_ENTR_PCT\\nRCPT_SYSOFT_MAIN_PCT\\nRCPT_SYSOFT_OTH_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS5='51121' \",\n//         \"CONDITION \": \"If sum(RCPT_SYSOFT_PERS_PCT, RCPT_SYSOFT_ENTR_PCT, RCPT_SYSOFT_MAIN_PCT, and RCPT_SYSOFT_OTH_PCT)=0 \",\n//         \"ACTION\": \"then RCPT_SYSOFT_PERS_PCT, RCPT_SYSOFT_ENTR_PCT, RCPT_SYSOFT_MAIN_PCT, and RCPT_SYSOFT_OTH_PCT =.\",\n//         \" DESCRIPTION\": \"If the status is active and the NAICS is in '51121' and the sum of % rev - Personal computer systems rev, % Enterprise-systems software revenue, % Mainframe computer-Systems software, and % of other systems software revenue is equal to zero then set them to missing.\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_APSOFT_PERS_PCT\\nRCPT_APSOFT_ENTR_PCT\\nRCPT_APSOFT_MAIN_PCT\\nRCPT_APSOFT_OTH_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS5='51121' \",\n//         \"CONDITION \": \"If the sum of RCPT_APSOFT_PERS_PCT, RCPT_APSOFT_ENTR_PCT, RCPT_APSOFT_MAIN_PCT, and RCPT_APSOFT_OTH_PCT =0 \",\n//         \"ACTION\": \"then  RCPT_APSOFT_PERS_PCT, RCPT_APSOFT_ENTR_PCT, RCPT_APSOFT_MAIN_PCT, and RCPT_APSOFT_OTH_PCT =.\",\n//         \" DESCRIPTION\": \"If the status is active and the NAICS is in '51121' and the sum of % rev - Personal computer systems rev, % Enterprise-systems software revenue, % Mainframe computer-Systems software, and % of other systems software revenue is equal to zero then set them to missing.\"\n//     },\n//     {\n//         \"VARIABLE\": \"INV_STAT\\nINV_CY_GOODS_TOT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3='511','512'\",\n//         \"CONDITION \": \"If and INV_STAT =2 and INV_CY_GOODS_TOT_DVAL = .\",\n//         \"ACTION\": \"then INV_CY_GOODS_TOT_DVAL =0\",\n//         \" DESCRIPTION\": \"If NAICS in 511 or 512 and the flag for Total inventories is reported    and the inventory checkbox is equal to no and the total inventories is missing then set the inventories equal to zero. \"\n//     },\n//     {\n//         \"VARIABLE\": \"INV_STAT\\nINV_CY_GOODS_TOT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3='511','512'\",\n//         \"CONDITION \": \"If Substr(RECORD_NAICS_NUM,1,3) in ('511','512')  and INV_STAT =. and INV_CY_GOODS_TOT is >0 \",\n//         \"ACTION\": \"then INV_STAT =1\",\n//         \" DESCRIPTION\": \"If NAICS in 511 or 512 and the flag for Total inventories is reported   and the inventory checkbox is missing and the total inventories is greater than zero, then set the inventories checkbox to yes. \"\n//     },\n//     {\n//         \"VARIABLE\": \"INV_STAT\\nINV_CY_GOODS_TOT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3='511','512'\",\n//         \"CONDITION \": \"If Substr(RECORD_NAICS_NUM,1,3) in ('511','512') and INV_STAT = . or = 1  and INV_CY_GOODS_TOT is =0 \",\n//         \"ACTION\": \"then INV_STAT = 2\",\n//         \" DESCRIPTION\": \"If NAICS in 511 or 512 and the flag for Total inventories is reported   the inventory checkbox is missing or equal to yes and the total inventories is equal to zero, then set the inventories checkbox to no.\"\n//     },\n//     {\n//         \"VARIABLE\": \"INV_STAT\\nINV_CY_GOODS_TOT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3='511','512'\",\n//         \"CONDITION \": \"If Substr(RECORD_NAICS_NUM,1,3) in ('511','512')  and INV_STAT = 2  and INV_CY_GOODS_TOT is > 0 \",\n//         \"ACTION\": \"then INV_STAT =1\",\n//         \" DESCRIPTION\": \"If NAICS in 511 or 512 and the flag for Total inventories is is reported   , and the inventory checkbox is equal to no and the total inventories is freater than zero, then set the inventories checkbox to yes.\"\n//     },\n//     {\n//         \"VARIABLE\": \"EXPS_EHR_STAT\\nEXPS_EHR_VAL\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS2='62' and NAICS3 \\n<> ('624') \",\n//         \"CONDITION \": \"If EXPS_EHR_VAL ne . and EXPS_EHR_STAT =( . or 2) and EXPS_EHR_VAL is >0 \",\n//         \"ACTION\": \"then EXPS_EHR_STAT= 1\",\n//         \" DESCRIPTION\": \"If the NAICS is in 62, but no in 624, and the flag for Electronic health record expenses is equal is reported   and the electronic health records checkbox is equal to no and the Electronic health records expenses is greater than zero, then set the electronic health records checkbox to yes.\"\n//     },\n//     {\n//         \"VARIABLE\": \"EXPS_EHR_STAT \\nEXPS_EHR_VAL\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS2='62' and NAICS3 \\n<> ('624') \",\n//         \"CONDITION \": \"If EXPS_EHR_VAL ne . and EXPS_EHR_STAT = (. or 1) and EXPS_EHR_VAL is =0\",\n//         \"ACTION\": \"then   EXPS_EHR_STAT = 2\",\n//         \" DESCRIPTION\": \"If the NAICS is in 62, but no in 624, and the flag for Electronic health record expenses is reported   and the electronic health records checkbox is equal to yes  and the Electronic health records expenses is equal to zero, then set the electronic health records checkbox to no.\"\n//     },\n//     {\n//         \"VARIABLE\": \"EXPS_EHR_STAT \\nEXPS_EHR_VAL\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS2='62' and NAICS3 \\n<> '624'\",\n//         \"CONDITION \": \"If EXPS_EHR_STAT  ne . and EXPS_EHR_STAT =  2  and EXPS_EHR_VAL is =.\",\n//         \"ACTION\": \"then EXPS_EHR_VAL is = 0\",\n//         \" DESCRIPTION\": \"If the NAICS is in 62, but no in 624, and the flag for Electronic health record expenses is reported   and the electronic health records checkbox is equal to no  and the Electronic health records expenses is missing, then set the electronic health records to zero.\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_ECOMM_ES_VAL\\n RCPT_ECOMM_WEB_STAT  RCPT_ECOMM_THRD_STAT  RCPT_ECOMM_OTH_STAT  \",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS2='22','48','49,'51','52','53','54','55','56,'61','62','71','72,'81'\",\n//         \"CONDITION \": \"If RCPT_ECOMM_ES_VAL ne . and RCPT_ECOMM_WEB_STAT  = (. or 1) and RCPT_ECOMM_THRD_STAT =( . or 1) and RCPT_ECOMM_OTH_STAT = (. or 1 )and  RCPT_ECOMM_ES_VAL =0 \",\n//         \"ACTION\": \"then RCPT_ECOMM_WEB_STAT  = 2 RCPT_ECOMM_THRD_STAT = 2 RCPT_ECOMM_OTH_STAT  = 2\",\n//         \" DESCRIPTION\": \"If the e-commerce flag is reported   or the e-commerce percent flag is reported   and Electronic revenue- company website is missing or yes,  Electronic revenue- third party website is missing or yes, Electronic revenue- electronic system, and e-commerce is zero and the e-commerce percent equals zero then set - company website is missing or yes,  Electronic revenue- third party website is missing or yes, Electronic revenue- electronic system to no.\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_ECOMM_ES_VAL\\n RCPT_ECOMM_WEB_STAT  RCPT_ECOMM_THRD_STAT  RCPT_ECOMM_OTH_STAT  \",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS2='22','48','49,'51','52','53','54','55','56,'61','62','71','72,'81'\",\n//         \"CONDITION \": \"If RCPT_ECOMM_WEB_STAT = 2, RCPT_ECOMM_THRD_STAT  = 2, and RCPT_ECOMM_OTH_STAT  = 2 and RCPT_ECOMM_ES_VAL = . \",\n//         \"ACTION\": \"then RCPT_ECOMM_ES_VAL =0.\",\n//         \" DESCRIPTION\": \"If the Electronic revenue- company website flag is reported   and the Electronic revenue- third party website is reported   , Electronic revenue- electronic system, and is reported   and Electronic revenue- company website,  Electronic revenue- third party website, Electronic revenue- electronic system all are set to no and e-commerce is missing and ecommerce percent is missing or zero then set e-commerce to zero.\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_ECOMM_ES_VAL\\n RCPT_ECOMM_WEB_STAT  RCPT_ECOMM_THRD_STAT  RCPT_ECOMM_OTH_STAT  \",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS2='22','48','49,'51','52','53','54','55','56,'61','62','71','72,'81'\",\n//         \"CONDITION \": \"If RCPT_ECOMM_ES_VAL = . and RCPT_ECOMM_WEB_STAT  = . and RCPT_ECOMM_THRD_STAT = . and RCPT_ECOMM_OTH_STAT = . and  RCPT_ECOMM_ES_VAL  is >0 \",\n//         \"ACTION\": \"then RCPT_ECOMM_WEB_STAT  =1\",\n//         \" DESCRIPTION\": \"If e-commerce flag is reported   or e-commerce percent is reported   and Electronic revenue- company website,  Electronic revenue- third party website, Electronic revenue- electronic system all are missing and e-commerce is greater than zero or percent e-commerce is greater than zero then set Electronic revenue- company website to yes. \"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_ECOMM_ES_VAL\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS2='22','48','49,'51','52','53','54','55','56,'61','62','71','72,'81'\",\n//         \"CONDITION \": \"If RCPT_ECOMM_ES_VAL ne . and RCPT_ECOMM_WEB_STAT  is 2 and RCPT_ECOMM_THRD_STAT is 2, and RCPT_ECOMM_OTH_STAT is 2 and  RCPT_ECOMM_ES_VAL  is >0 \",\n//         \"ACTION\": \"then RCPT_ECOMM_WEB_STAT  =1\",\n//         \" DESCRIPTION\": \"If e-commerce flag  is reported   or e-commerce percent is reported   and Electronic revenue- company website,  Electronic revenue- third party website,  and Electronic revenue- electronic system all are no  and e-commerce is greater than zero or percent e-commerce is greater than zero then set Electronic revenue- company website to yes. \"\n//     },\n//     {\n//         \"VARIABLE\": \"EXPS_TOT_VAL\",\n//         \"UNIT\": \"KAU\",\n//         \"CONDITION \": \"If _qss00 in ('Y') and E190000 = . AND EQEXPD00 = 0 AND EQEXP00 > 0\",\n//         \"ACTION\": \" then E190000 = eqexp00\",\n//         \" DESCRIPTION\": \"If Total operating expenses is missing and QSS number of quarters imputed is equal to zero, and qss espense is greater than zero, then set total operating expense to qss expense\"\n//     },\n//     {\n//         \"VARIABLE\": \"TAX_EXEMPT_STAT\",\n//         \"UNIT\": \"KAU\",\n//         \"CONDITION \": \"If substr(RECORD_NAICS_NUM,1,5) = '51912' and TAX_EXEMPT_STAT = 1\",\n//         \"ACTION\": \"then NONPROFT_STAT=1\",\n//         \" DESCRIPTION\": \"If NAICS in 51912 and tax recode is equal to exempt, then set not for profit basses to 1.\"\n//     },\n//     {\n//         \"VARIABLE\": \"CPT_CUST_RES_PCT \\nCPT_CUST_NORES_PCT \",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS2='22'\",\n//         \"CONDITION \": \"If sum(CPT_CUST_RES_PCT,CPT_CUST_NORES_PCT) = 0\",\n//         \"ACTION\": \"then CPT_CUST_RES_PCT = . CPT_CUST_NORES_PCT = .\",\n//         \" DESCRIPTION\": \"If NAICS in sector 22 and is active, and the sum of residential customers and non-residential customers is zero then set residential customers and non-residential customers to missing\"\n//     },\n//     {\n//         \"VARIABLE\": \"CAPEX_OTH_NEW_VAL                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       CAPEX_OTH_USED_VAL                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 CAPEX_OTH_TOT\",\n//         \"UNIT\": \"industry\",\n//         \"CONDITION \": \"Value reported in other\",\n//         \"ACTION\": \"set referral flag for analyst review\",\n//         \" DESCRIPTION\": \"analyst reclassify value in other to structures or equipment\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_MOTR_AGR_PCT  RCPT_MOTR_GRAIN_PCT  RCPT_MOTR_STONE_PCT RCPT_MOTR_FUEL_PCT  RCPT_MOTR_PHARM_PCT  RCPT_MOTR_WOOD_PCT  RCPT_MOTR_METAL_PCT  RCPT_MOTR_ELECT_PCT  RCPT_MOTR_USEDGD_PCT  RCPT_MOTR_NEWFRN_PCT  RCPT_MOTR_OTH_PCT \",\n//         \"UNIT\": \"industry\",\n//         \"NAICS\": \"NAICS3='484'\",\n//         \"CONDITION \": \"If Sum(RCPT_MOTR_AGR_PCT,RCPT_MOTR_GRAIN_PCT,RCPT_MOTR_STONE_PCT,RCPT_MOTR_FUEL_PCT,RCPT_MOTR_PHARM_PCT,RCPT_MOTR_WOOD_PCT,RCPT_MOTR_METAL_PCT,RCPT_MOTR_ELECT_PCT, RCPT_MOTR_USEDGD_PCT,RCPT_MOTR_NEWFRN_PCT,RCPT_MOTR_OTH_PCT)=0\",\n//         \"ACTION\": \"then RCPT_MOTR_AGR_PCT = .; RCPT_MOTR_GRAIN_PCT = .; RCPT_MOTR_STONE_PCT = .; RCPT_MOTR_FUEL_PCT = .; RCPT_MOTR_PHARM_PCT = .; RCPT_MOTR_WOOD_PCT = .; RCPT_MOTR_METAL_PCT = .; RCPT_MOTR_ELECT_PCT = .; RCPT_MOTR_USEDGD_PCT = .; RCPT_MOTR_NEWFRN_PCT = .; RCPT_MOTR_OTH_PCT = .;\",\n//         \" DESCRIPTION\": \"If the NAICS is in 484 and active, and the sum of % - Agricultural Products, % - Grains, Alcohol, Tobacco Products, % - Stone, Nonmetallic minerals, % - Coal and Petroleum Products, % - Coal and Petroleum Products, % - Pharmaceutical and chemical products, % - Wood Products, Textiles, Leather, % - Electronic & Precision Instruments,% - Base Metal and Machinery % - Used household and office goods, % - New Furniture & Misc. Prods is zero, then set all to missing\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_CUST_BUS_PCT RCPT_CUST_IND_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS6=('517311','517312','517911', 519130')\",\n//         \"CONDITION \": \"If sum(RCPT_CUST_BUS_PCT,RCPT_CUST_IND_PCT)=0\",\n//         \"ACTION\": \"then RCPT_CUST_BUS_PCT=.; RCPT_CUST_IND_PCT=.;\",\n//         \" DESCRIPTION\": \"If the status is active and the NAICS is in  517110, 517210, 517911, or 519130 and the sum of % Household revenue and % of revenue by Government & Businesses equal zero then set them to missing.\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_CUST_LOCTEL_BUS_PCT RCPT_CUST_LOCTEL_IND_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS6='517311' \",\n//         \"CONDITION \": \"If sum(RCPT_CUST_LOCTEL_BUS_PCT,RCPT_CUST_LOCTEL_IND_PCT)=0\",\n//         \"ACTION\": \"then RCPT_CUST_LOCTEL_BUS_PCT=.; RCPT_CUST_LOCTEL_IND_PCT=.;\",\n//         \" DESCRIPTION\": \"If the status is active and the NIACS is in 51711 and the sum of % Household - local telephony and Fixed local Telephone - Gov & Business is equal to zero set them to mising.\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_CUST_LNGTEL_BUS_PCT RCPT_CUST_LNGTEL_IND_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS6='517311' \",\n//         \"CONDITION \": \"If sum(RCPT_CUST_LNGTEL_BUS_PCT, RCPT_CUST_LNGTEL_IND_PCT)=0\",\n//         \"ACTION\": \"then RCPT_CUST_LNGTEL_BUS_PCT=.; RCPT_CUST_LNGTEL_IND_PCT=.;\",\n//         \" DESCRIPTION\": \"If the status is active and the NIACS is in 51711 and the sum of  % Fixed Long dist - Gov & Business and % Household-long distance telephony is equal to zero set them to mising.\"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_CUST_SUBLIN_BUS_PCT RCPT_CUST_SUBLIN_IND_PCT\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS6='517311' \",\n//         \"CONDITION \": \"If sum(RCPT_CUST_SUBLIN_BUS_PCT, RCPT_CUST_SUBLIN_IND_PCT)=0\",\n//         \"ACTION\": \"then RCPT_CUST_SUBLIN_BUS_PCT=.; RCPT_CUST_SUBLIN_IND_PCT=.;\",\n//         \" DESCRIPTION\": \"If the status is active and the NIACS is in 51711 and the sum of  % Subscriber line charges - Household and % Subscriber Line - Gov & Business is equal to zero set them to mising.\"\n//     },\n//     {\n//         \"VARIABLE\": \"INV_STAT\\nTRUCKTRAC_NUM_TOT_DVAL TRAILER_NUM_TOT_DVAL\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3='484'\",\n//         \"CONDITION \": \"If INV_STAT = . and (TRUCK_NUM_TOT_DVAL > 0 or TRUCKTRAC_NUM_TOT_DVAL > 0 or TRAILER_NUM_TOT_DVAL > 0)\",\n//         \"ACTION\": \"then INV_STAT = 1;\",\n//         \" DESCRIPTION\": \"If the flag for total truck inventory, total truck-tractor inventory, or total tralers inventory is reported  (R,A,E,or O) and the NAICS is in 484, and the inventory checkbox is missing and the total truck inventory, total truck-tractor inventory, or total tralers inventory is greater than zero, then set the inventory checkbox to yes. \"\n//     },\n//     {\n//         \"VARIABLE\": \"INV_STAT\\nTRUCKTRAC_NUM_TOT_DVAL TRAILER_NUM_TOT_DVAL\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3='484'\",\n//         \"CONDITION \": \"If INV_STAT in (.,1) and TRUCK_NUM_TOT_DVAL = 0 and TRUCKTRAC_NUM_TOT_DVAL = 0 and TRAILER_NUM_TOT_DVAL = 0\",\n//         \"ACTION\": \"then INV_STAT = 2;\",\n//         \" DESCRIPTION\": \"If the flag for total truck inventory, total truck-tractor inventory, or total tralers inventory is reported  (R,A,E,or O)and the NAICS is in 484, and the inventory checkbox is equal to yes and the total truck inventory, total truck-tractor inventory, or total tralers inventory is equal to zero, then set the inventory checkbox to no.\"\n//     },\n//     {\n//         \"VARIABLE\": \"INV_STAT\\nTRUCKTRAC_NUM_TOT_DVAL TRAILER_NUM_TOT_DVAL\",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3='484'\",\n//         \"CONDITION \": \"If INV_STAT = 2 and (TRUCK_NUM_TOT_DVAL > 0 or TRUCKTRAC_NUM_TOT_DVAL > 0 or TRAILER_NUM_TOT_DVAL > 0)\",\n//         \"ACTION\": \"then INV_STAT = 1;\",\n//         \" DESCRIPTION\": \"If the flag for total truck inventory, total truck-tractor inventory, or total tralers inventory isreported (R,A,E,or O)and the NAICS is in 484, and the inventory checkbox is equal to no and the total truck inventory, total truck-tractor inventory, or total tralers inventory is greater than zero, then set the inventory checkbox to yes. \"\n//     },\n//     {\n//         \"VARIABLE\": \"HOTEL_OWN3RD_STAT RCPT_TOT_HOTEL_OWN3RD_VAL  RCPT_ECOMM_HOTEL_OWN3RD_VAL\\nEXPS_TOT_HOTEL_OWN3RD_VAL \",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS5='72111','72112'\",\n//         \"CONDITION \": \"If EXPS_TOT_HOTEL_OWN3RD_VAL <>2 and RCPT_TOT_HOTEL_OWN3RD_VAL=0 or RCPT_ECOMM_HOTEL_OWN3RD_VA=0  or EXPS_TOT_HOTEL_OWN3RD_VAL is >0\",\n//         \"ACTION\": \"then EXPS_TOT_HOTEL_OWN3RD_VAL =2\"\n//     },\n//     {\n//         \"VARIABLE\": \"HOTEL_OWN3RD_STAT RCPT_TOT_HOTEL_OWN3RD_VAL  RCPT_ECOMM_HOTEL_OWN3RD_VAL\\nEXPS_TOT_HOTEL_OWN3RD_VAL \",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS5='72111','72112'\",\n//         \"CONDITION \": \"If EXPS_TOT_HOTEL_OWN3RD_VAL <>1 and RCPT_TOT_HOTEL_OWN3RD_VAL > 0  or RCPT_ECOMM_HOTEL_OWN3RD_VAL is > 0  or EXPS_TOT_HOTEL_OWN3RD_VAL is >0 \",\n//         \"ACTION\": \"EXPS_TOT_HOTEL_OWN3RD_VAL=2\"\n//     },\n//     {\n//         \"VARIABLE\": \"HOTEL_OWN3RD_STAT RCPT_TOT_HOTEL_OWN3RD_VAL  RCPT_ECOMM_HOTEL_OWN3RD_VAL\\nEXPS_TOT_HOTEL_OWN3RD_VAL \",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS5='72111','72112'\",\n//         \"CONDITION \": \"If (HOTEL_OWN3RD_STAT = 2) AND (RCPT_TOT_HOTEL_OWN3RD_VAL = . AND  RCPT_ECOMM_HOTEL_OWN3RD_VAL = . AND EXPS_TOT_HOTEL_OWN3RD_VAL = .)\",\n//         \"ACTION\": \"then RCPT_TOT_HOTEL_OWN3RD_VAL = 0; RCPT_ECOMM_HOTEL_OWN3RD_VAL = 0; EXPS_TOT_HOTEL_OWN3RD_VAL = 0;\",\n//         \" DESCRIPTION\": \"If the NAICS is in 72111 or 72112 and the hotel management checkbox is set to no and hotel revenue of hotels managed, hotel e-commerce from hotels managed, and operating expense from hotels managed are all missing then set them all to zero. \"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_TELEMED_STAT RCPT_TELEMED_VAL  \",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3='621','622','623' AND NAICS4 <> ‘6215’,’6219’\",\n//         \"CONDITION \": \"If RCPT_TELEMED_STAT = . AND (RCPT_TELEMED_VAL > 0 \",\n//         \"ACTION\": \"then RCPT_TELEMED_STAT = 1;\",\n//         \" DESCRIPTION\": \"If the flag for Hospitals: Of 2020 total revenues reported, what was the dollar amount from telemedicine is reported (R,A,E,O)  or the flag for Hospitals: Of the total revenues reported, what was the percentage that was from telemedicine is reported (R,A,E,O)  and Hospitals: Did this receive revenues from telemedicine services in 2020 is missing and  total revenues reported, what was the dollar amount from telemedicine is greater than zero or Hospitals: Of the total revenues reported, what was the percentage that was from telemedicine is greater than zero then set Hospitals: Did this receive revenues from telemedicine services in 2020  to yes. \"\n//     },\n//     {\n//         \"VARIABLE\": \"RCPT_TELEMED_STAT RCPT_TELEMED_VAL  \",\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3='621','622','623' AND NAICS4 <> ‘6215’,’6219’\",\n//         \"CONDITION \": \"RCPT_TELEMED_STAT = (.,1) AND (RCPT_TELEMED_VAL = 0)\",\n//         \"ACTION\": \"then RCPT_TELEMED_STAT = 2;\",\n//         \" DESCRIPTION\": \"If the flag for Hospitals: Of 2020 total revenues reported, what was the dollar amount from telemedicine is reported (R,A,E,O)  or the flag for Hospitals: Of the total revenues reported, what was the percentage that was from telemedicine is reported (R,A,E,O)  and Hospitals: Did this receive revenues from telemedicine services in 2020 is missing or set to yes and  total revenues reported, what was the dollar amount from telemedicine is zero or Hospitals: Of the total revenues reported, what was the percentage that was from telemedicine is zero then set Hospitals: Did this receive revenues from telemedicine services in 2020  to no \"\n//     },\n//     {\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS6='721110','721120'\",\n//         \"ACTION\": \"then RCPT_ECOMM_ES_TOT_VAL=SUM(RCPT_TOT_VAL,RCPT_TOT_HOTEL_OWN3RD_VAL)\"\n//     },\n//     {\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS6='561330' \",\n//         \"ACTION\": \"then RCPTOT=RCPT_GROSSBILL_VAL\"\n//     },\n//     {\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS6='721110','721120'\",\n//         \"ACTION\": \"then RCPTOT=RCP_TOT_VAL_SUM+RCPT_TOT_HOTEL_OWN3RD_VAL\"\n//     },\n//     {\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3='621','622','623'\",\n//         \"CONDITION \": \"and _TXRCD00 <> 'E'\",\n//         \"ACTION\": \"then RCPT_NONOP_GIFTS_VAL=0\"\n//     },\n//     {\n//         \"UNIT\": \"KAU\",\n//         \"NAICS\": \"NAICS3='621','622','623'\",\n//         \"CONDITION \": \"and _TXRCD00 <> 'E'\",\n//         \"ACTION\": \"then RCPT_NONOP_INVST_VAL=0\"\n//     }\n// ]\n\n// let csv = msg.payload.csv[0]\n\n// for (let i = 0; i < items.length; i++) {\n//     const item = items[i];\n\n//     if (item[\"NAICS\"]) {\n//         if (item[\"UNIT\"] == csv.UNIT) {\n//             if (item.CONDITION) {\n//                 csv.ACTION = item.ACTION\n//             }\n//         }\n//     }\n// }\n\n// msg.payload.csv[0].RCPT_NONOP_GIFTS_VAL = 0\n\n// return msg;\nconst cache = global.get(\"lookupCache\");\nconst parameterData = cache.data[0]?.json_values || {};\n\nlet record = msg.payload.csv[global.get(\"ptrModuleFacts\")];\n\nconst getNAICSCode = () => {\n    switch (record['UNIT']) {\n        case 'ESTAB':\n            return record['NAICS_NUM'];\n        case 'KAU':\n            return record['KAU_NAICS'];\n        default:\n            return null;\n    }\n};\n\nconst naicsCode = getNAICSCode();\nconsole.log(456, { d: naicsCode })\n\nif (naicsCode && parameterData.NAICS === naicsCode) {\n    record.ACTION = 'Go to Unit Balance';\n}\nelse {\n    // rerun  todo\n    record.ACTION = '- Logical Checks';\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 260,
        "wires": [
            [
                "05e1e9f94e92a19d",
                "1833eeaacde5d9a4"
            ]
        ]
    },
    {
        "id": "6a660fccf443bde2",
        "type": "link in",
        "z": "0952db06f674f8bc",
        "name": "link in 29",
        "links": [
            "3fd3586e01a6e2dc",
            "6413daba1c8991e2"
        ],
        "x": 215,
        "y": 280,
        "wires": [
            [
                "c33fc2971a1649d2"
            ]
        ]
    },
    {
        "id": "05e1e9f94e92a19d",
        "type": "link out",
        "z": "0952db06f674f8bc",
        "name": "link out 23",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 2015,
        "y": 260,
        "wires": []
    },
    {
        "id": "1833eeaacde5d9a4",
        "type": "debug",
        "z": "0952db06f674f8bc",
        "name": "Logical Edit debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2050,
        "y": 160,
        "wires": []
    },
    {
        "id": "c33fc2971a1649d2",
        "type": "change",
        "z": "0952db06f674f8bc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.lookup",
                "pt": "msg",
                "to": "{\"moduleName\":\"logical_edits\",\"program\":\"aies\",\"unit_type\":\"estab\",\"params\":\"NAICS\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 440,
        "wires": [
            [
                "0e7e45c109b5dd47"
            ]
        ]
    },
    {
        "id": "0e7e45c109b5dd47",
        "type": "subflow:0be109393cb5f28a",
        "z": "0952db06f674f8bc",
        "name": "",
        "x": 610,
        "y": 440,
        "wires": [
            [
                "71d67fa527052259",
                "0c4def347547a284"
            ]
        ]
    },
    {
        "id": "71d67fa527052259",
        "type": "debug",
        "z": "0952db06f674f8bc",
        "name": "debug 115",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 540,
        "wires": []
    },
    {
        "id": "565f051f79fb97bc",
        "type": "subflow:ae0faa518ff234d5",
        "z": "b2e59c2394f7c26c",
        "name": "Derived Items",
        "x": 460,
        "y": 760,
        "wires": [
            [
                "bb33a353a8cc1cbd"
            ]
        ]
    },
    {
        "id": "ed77e55538e24a1f",
        "type": "link out",
        "z": "b2e59c2394f7c26c",
        "name": "link out classification",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 825,
        "y": 760,
        "wires": []
    },
    {
        "id": "bb33a353a8cc1cbd",
        "type": "subflow:473d6735cc46fccd",
        "z": "b2e59c2394f7c26c",
        "name": "",
        "x": 680,
        "y": 760,
        "wires": [
            [
                "ed77e55538e24a1f"
            ]
        ]
    },
    {
        "id": "55fbb4297e588b4b",
        "type": "subflow:ae0faa518ff234d5",
        "z": "b2e59c2394f7c26c",
        "name": "Derived Items",
        "x": 460,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "25b4ac02d36e687d",
        "type": "subflow:67a3cd3b754e4fbd",
        "z": "b2e59c2394f7c26c",
        "name": "",
        "x": 460,
        "y": 980,
        "wires": [
            [
                "b6bebbeac0549686"
            ]
        ]
    },
    {
        "id": "3a3f1620dbce8bb0",
        "type": "link in",
        "z": "b2e59c2394f7c26c",
        "name": "Post Edit Status Status Field Link",
        "links": [
            "270941def4b7c8b6"
        ],
        "x": 225,
        "y": 980,
        "wires": [
            [
                "25b4ac02d36e687d"
            ]
        ]
    },
    {
        "id": "b6bebbeac0549686",
        "type": "link out",
        "z": "b2e59c2394f7c26c",
        "name": "link out classification",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 625,
        "y": 980,
        "wires": []
    },
    {
        "id": "6ee2ec45fe951e56",
        "type": "subflow:9e4e212b0811233d",
        "z": "b2e59c2394f7c26c",
        "name": "",
        "x": 480,
        "y": 1140,
        "wires": [
            [
                "ece1e11393b49799"
            ]
        ]
    },
    {
        "id": "384ea40a25aa8e76",
        "type": "link in",
        "z": "b2e59c2394f7c26c",
        "name": "Pre Db Write Back For Leased",
        "links": [
            "fbcbf9510de0509c"
        ],
        "x": 225,
        "y": 1140,
        "wires": [
            [
                "6ee2ec45fe951e56"
            ]
        ]
    },
    {
        "id": "ece1e11393b49799",
        "type": "link out",
        "z": "b2e59c2394f7c26c",
        "name": "link out classification",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 685,
        "y": 1140,
        "wires": []
    },
    {
        "id": "c903163629df82af",
        "type": "function",
        "z": "6399b853963e761e",
        "name": "electricImputeModule",
        "func": "let record_idx = global.get(\"ptrModuleFacts\");\nlet record = msg.payload.csv[record_idx];\n\n// Assumed JavaScript function based on the newest extracted OCR text (Electric Impute Module)\nfunction electricImputeModule(T_STFIPS, REFPER, ELEC_PRCH_KWH_NUM, EXPS_ELEC_VAL) {\n    // Placeholder for NM_State parameter table\n    let NM_STATE_PARAMETER_TABLE = {\n        AVG1: 0,\n        AVG2: 0\n    };\n\n    let { AVG1, AVG2 } = NM_STATE_PARAMETER_TABLE;\n\n    if (EXPS_ELEC_VAL <= 10000) {\n        // Logic for Year 1 historic values (H_) referencing 2022 EC data. Year 2 and on will refer to prior year AIES data\n    }\n\n    if (ELEC_PRCH_KWH_NUM_F[3][1] !== 'B') {\n        ELEC_PRCH_KWH_NUM = Math.round(EXPS_ELEC_VAL * AVG2);\n        ELEC_PRCH_KWH_NUM_F[3][1] = 'B';\n    } else {\n        ELEC_PRCH_KWH_NUM = Math.round(EXPS_ELEC_VAL * AVG1);\n    }\n\n    // Additional logic...\n\n    return EXPS_ELEC_VAL;\n}\n\n",
        "outputs": 1,
        "noerr": 9,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 240,
        "wires": [
            [
                "ba693bb539d071b9",
                "eda519aa8a1db303"
            ]
        ]
    },
    {
        "id": "ba693bb539d071b9",
        "type": "debug",
        "z": "6399b853963e761e",
        "name": "debug electricImputeModule",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 160,
        "wires": []
    },
    {
        "id": "eda519aa8a1db303",
        "type": "link out",
        "z": "6399b853963e761e",
        "name": "link out 58",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 585,
        "y": 280,
        "wires": []
    },
    {
        "id": "5f5ca49f66f32b41",
        "type": "function",
        "z": "6399b853963e761e",
        "name": "electricImputeModule",
        "func": "let record_idx = global.get(\"ptrModuleFacts\");\nlet record = msg.payload.csv[record_idx];\n\n// Assumed JavaScript function based on the newest extracted OCR text (Electric Impute Module)\nfunction electricImputeModule(T_STFIPS, REFPER, ELEC_PRCH_KWH_NUM, EXPS_ELEC_VAL) {\n    // Placeholder for NM_State parameter table\n    let NM_STATE_PARAMETER_TABLE = {\n        AVG1: 0,\n        AVG2: 0\n    };\n\n    let { AVG1, AVG2 } = NM_STATE_PARAMETER_TABLE;\n\n    if (EXPS_ELEC_VAL <= 10000) {\n        // Logic for Year 1 historic values (H_) referencing 2022 EC data. Year 2 and on will refer to prior year AIES data\n    }\n\n    if (ELEC_PRCH_KWH_NUM_F[3][1] !== 'B') {\n        ELEC_PRCH_KWH_NUM = Math.round(EXPS_ELEC_VAL * AVG2);\n        ELEC_PRCH_KWH_NUM_F[3][1] = 'B';\n    } else {\n        ELEC_PRCH_KWH_NUM = Math.round(EXPS_ELEC_VAL * AVG1);\n    }\n\n    // Additional logic...\n\n    return EXPS_ELEC_VAL;\n}\n\n",
        "outputs": 1,
        "noerr": 9,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 460,
        "wires": [
            [
                "d024af4d5725903e",
                "8b699616f9c5a9b5"
            ]
        ]
    },
    {
        "id": "d024af4d5725903e",
        "type": "debug",
        "z": "6399b853963e761e",
        "name": "debug electricImputeModule",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 380,
        "wires": []
    },
    {
        "id": "8b699616f9c5a9b5",
        "type": "link out",
        "z": "6399b853963e761e",
        "name": "link out 59",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 585,
        "y": 500,
        "wires": []
    },
    {
        "id": "1455ef9792b755e9",
        "type": "function",
        "z": "6399b853963e761e",
        "name": "Main",
        "func": "let record_idx = global.get(\"ptrModuleFacts\");\nlet record = msg.payload.csv[record_idx];\n\nconst params = {\n    MN_ELECTRIC_STATE: [\n        { 'GEO_ST': '01', 'AVG1': 6.99263, 'AVG2': 12.1924, 'ELEC_INTERSECT': 1000, 'LL': 0.02, 'UL': 0.29 },\n        { 'GEO_ST': '02', 'AVG1': 2.97017, 'AVG2': 6.2589, 'ELEC_INTERSECT': 1000, 'LL': 0.03, 'UL': 0.21 },\n    ],\n    MN_ELEC_CUTOFF: {\n        REFPER: '2008A1',\n        CUTOFF1: '50000',\n        CUTOFF2: '10000',\n        FIXED: '684953',\n        BETA: '6.017'\n    }\n}\nconst input = {\n    STFIPS: '',\n    ELECGEN:'',\n    CSTELEC: '',\n    ELECSLD:'',\n    H_ELECGEN: '',\n    H_ELECSLD: '',\n    HISTSTAT: '',\n    EXPS_ELEC_VAL: 0,\n    ELEC_PRCH_KWH_NUM: 0\n}\nconst T_STFIPS = input?.STFIPS;\nlet MISSING_ST_FLIPS_ELECTRIC = 0;\nconst cutoffs = params.MN_ELEC_CUTOFF;\n\nfunction getParameterByGeoSt(geoSt) {\n    if (!geoSt || geoSt === 'NULL') return null;\n    return params.MN_ELECTRIC_STATE.find(item => item.GEO_ST === geoSt);\n}\nfunction electricEnergyModule(input){\n    const { EXPS_ELEC_VAL, ELEC_PRCH_KWH_NUM } = input;\n    if(EXPS_ELEC_VAL === 0 && ELEC_PRCH_KWH_NUM === 0){\n        // Go to A\n    }else if (EXPS_ELEC_VAL === 0 && ELEC_PRCH_KWH_NUM > 0){\n            // ELEC_PRCH_KWH_NUM = 0\n            // ELEC_PRCH_KWH_NUM_F (3,1) = 'J'\n            // go to A \n    }else if(T_STFIPS) {\n        // Go to electricEnergyModuleCont\n    }else{\n        MISSING_ST_FLIPS_ELECTRIC = 1;\n    }\n}\n// function electricEnergyModule(T_STFIPS, REFPER, ELEC_PRCH_KWH_NUM, x_CURR) {\n//     console.log(\"Executing electricEnergyModule...\");\n\n//     if (!T_STFIPS || !REFPER || !ELEC_PRCH_KWH_NUM || !x_CURR ||\n//         [T_STFIPS, REFPER, ELEC_PRCH_KWH_NUM, x_CURR].includes('NULL')) {\n//         console.log('Invalid parameters');\n//         return 'Invalid parameters';\n//     }\n\n//     const parameter = getParameterByGeoSt(T_STFIPS);\n//     if (!parameter) {\n//         console.log('Invalid STFIPS');\n//         return 'Invalid STFIPS';\n//     }\n\n//     // ... rest of the logic\n\n//     return electricEnergyModuleCont(T_STFIPS, REFPER, ELEC_PRCH_KWH_NUM, 0, x_CURR);\n// }\n\n// function electricEnergyModuleCont(T_STFIPS, REFPER, ELEC_PRCH_KWH_NUM, EXPS_ELEC_VAL, x_CURR) {\n//     console.log(\"Executing electricEnergyModuleCont...\");\n//     if (!T_STFIPS || !REFPER || ELEC_PRCH_KWH_NUM === null || EXPS_ELEC_VAL === null || !x_CURR ||\n//         [T_STFIPS, REFPER, ELEC_PRCH_KWH_NUM, EXPS_ELEC_VAL, x_CURR].includes('NULL')) {\n//         console.log('Invalid parameters');\n//         return 'Invalid parameters';\n//     }\n\n//     const parameter = getParameterByGeoSt(T_STFIPS);\n//     let FIXED = 0;\n//     let BETA = 0;\n\n//     if (EXPS_ELEC_VAL / ELEC_PRCH_KWH_NUM > BETA) {\n//         return electricImputeModule(T_STFIPS, REFPER, ELEC_PRCH_KWH_NUM, EXPS_ELEC_VAL, x_CURR);\n//     }\n\n//     console.log('Returning from electricEnergyModuleCont:', EXPS_ELEC_VAL);\n//     return EXPS_ELEC_VAL;\n// }\n\n// function electricImputeModule(T_STFIPS, REFPER, ELEC_PRCH_KWH_NUM, EXPS_ELEC_VAL, x_CURR) {\n//     console.log(\"Executing electricImputeModule...\");\n//     if (!T_STFIPS || !REFPER || ELEC_PRCH_KWH_NUM === null || EXPS_ELEC_VAL === null || !x_CURR ||\n//         [T_STFIPS, REFPER, ELEC_PRCH_KWH_NUM, EXPS_ELEC_VAL, x_CURR].includes('NULL')) {\n//         console.log('Invalid parameters');\n//         return 'Invalid parameters';\n//     }\n\n//     const parameter = getParameterByGeoSt(T_STFIPS);\n//     let NM_STATE_PARAMETER_TABLE = {\n//         AVG1: parameter ? parameter.AVG1 : 0,\n//         AVG2: parameter ? parameter.AVG2 : 0\n//     };\n\n//     // ... rest of the logic\n\n//     console.log('Returning from electricImputeModule:', EXPS_ELEC_VAL);\n//     return EXPS_ELEC_VAL;\n// }\n\n// console.log(electricEnergyModule(T_STFIPS, '2022', 1000, 'M'));\n\n// Test cases\n// console.log(electricEnergyModule('01', '2022', 1000, 'M'));  // Should execute all three functions for GEO_ST '01'\n// console.log(electricEnergyModule(undefined, '2022', 500, 'M'));  // Should return 'Invalid parameters'\n// console.log(electricEnergyModule('02', 'NULL', 500, 'M'));  // Should return 'Invalid parameters'\n// console.log(electricEnergyModule('03', '2022', 500, 'M'));  // Should return 'Invalid STFIPS' because '03' is not in parameterTableData\n\n// function getElecState(REFPER, params) {\n//     let stateParam;\n//     // Choose parameter table based on REFPER\n//     if (REFPER.slice(0, 4) === '2022') {\n//         stateParam = params.MN_ELECTRIC_STATE;\n//     } else if (REFPER === '2023A1') {\n//         stateParam = params.ASM23_ELECTRIC_STATE;\n//     } else if (REFPER === '2024A1') {\n//         stateParam = params.ASM24_ELECTRIC_STATE;\n//     } // ... add other conditions for other years\n\n//     return stateParam;\n// }\n// console.log(getElecState('2022', params));\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 680,
        "wires": [
            [
                "fb0490d46f6dac6d",
                "d9030a8fd1f031b8"
            ]
        ]
    },
    {
        "id": "fb0490d46f6dac6d",
        "type": "debug",
        "z": "6399b853963e761e",
        "name": "debug Main",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 600,
        "wires": []
    },
    {
        "id": "d9030a8fd1f031b8",
        "type": "link out",
        "z": "6399b853963e761e",
        "name": "link out 60",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9",
            "95d077dd39781efe"
        ],
        "x": 595,
        "y": 720,
        "wires": []
    },
    {
        "id": "82512cd1437a65ef",
        "type": "subflow:0be109393cb5f28a",
        "z": "6399b853963e761e",
        "name": "",
        "x": 630,
        "y": 980,
        "wires": [
            [
                "446e40b2499253e6"
            ]
        ]
    },
    {
        "id": "5ffef6c04222007d",
        "type": "debug",
        "z": "6399b853963e761e",
        "name": "debug 107",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 980,
        "wires": []
    },
    {
        "id": "446e40b2499253e6",
        "type": "function",
        "z": "6399b853963e761e",
        "name": "function 37",
        "func": "let paramsT = global.get(\"lookupCache\")\nmsg.cache = paramsT\nlet record_idx = global.get(\"ptrModuleFacts\");\nlet record = msg.payload.csv[record_idx];\nconst params = paramsT?.data[0]?.json_values\nconst input = record\nconst NAICS_NUM = input?.NAICS_NUM;\n\nfunction LogicalEdits(input) {\n    const { NAICS_NUM } = input;\n    if (parseFloat(EXPS_ELEC_VAL) <= 10000) {\n        console.log(1)\n        msg.payload.csv[record_idx].ACTION = \"Go To A\";\n    } else{\n        console.log(2)\n        msg.payload.csv[record_idx].ELEC_PRCH_KWH_NUM = Math.round(parseFloat(EXPS_ELEC_VAL) * parseFloat(parameter.AVG1));\n        msg.payload.csv[record_idx].ELEC_PRCH_KWH_NUM_F = 'B'; // What is (3,1) here ?\n        msg.payload.csv[record_idx].ACTION = \"Go To A - END\";\n    }\n    return msg;\n}\n\nreturn LogicalEdits(input)",
        "outputs": 1,
        "noerr": 5,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 980,
        "wires": [
            [
                "5ffef6c04222007d",
                "782e6a52f1a66003"
            ]
        ]
    },
    {
        "id": "affe73445eec8a4f",
        "type": "link in",
        "z": "6399b853963e761e",
        "name": "link in 46",
        "links": [
            "cede3264bdcd0a70",
            "36c4687d5f1bee6b",
            "24ae978c7feb5fc3"
        ],
        "x": 155,
        "y": 980,
        "wires": [
            [
                "d6716f22d2ac0593"
            ]
        ]
    },
    {
        "id": "d6716f22d2ac0593",
        "type": "change",
        "z": "6399b853963e761e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.lookup",
                "pt": "msg",
                "to": "{\"moduleName\":\"electric_energy\",\"program\":\"aies\",\"unit_type\":\"estab\",\"params\":\"electric_energy_module\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 980,
        "wires": [
            [
                "82512cd1437a65ef"
            ]
        ]
    },
    {
        "id": "782e6a52f1a66003",
        "type": "link out",
        "z": "6399b853963e761e",
        "name": "link out classification",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 930,
        "y": 1040,
        "wires": []
    },
    {
        "id": "bed4b9a48e50c41c",
        "type": "debug",
        "z": "d7d109e0d89be1c6",
        "name": "kafka consumer: gotQBES",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 400,
        "wires": []
    },
    {
        "id": "3ec01d49fbdfba54",
        "type": "link out",
        "z": "d7d109e0d89be1c6",
        "name": "link out gotQBES",
        "mode": "link",
        "links": [
            "4480a2673228edf6",
            "f765d14d056bec8a",
            "e0d75497828e672b"
        ],
        "x": 555,
        "y": 340,
        "wires": []
    },
    {
        "id": "8ad2ab7c27d8d248",
        "type": "link in",
        "z": "d7d109e0d89be1c6",
        "name": "link in gotFLOW",
        "links": [
            "36ac45a273e5509f",
            "084da167bd2adffa",
            "7cdbce6d4b28412b",
            "9aee892d0909f5a2",
            "c481f6b945425e82",
            "6c2616b9f8b16717"
        ],
        "x": 495,
        "y": 740,
        "wires": [
            [
                "60346d8f3d1bcd94",
                "e894cadacc02eb73"
            ]
        ]
    },
    {
        "id": "f9b02de75682c807",
        "type": "function",
        "z": "d7d109e0d89be1c6",
        "name": "function 25",
        "func": "msg.payload = JSON.parse(msg.payload.value)\n\nconst currentStepIndex = msg.payload.recipe.currentStepIndex;\nconst startTime = new Date().getTime();\n\nmsg.payload.recipe.steps[currentStepIndex].tsStart = startTime;\n\nmsg.payload.facts = [msg.payload.fact]\nmsg.payload.qflowInputFacts = JSON.parse(JSON.stringify(msg.payload.facts))\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 400,
        "wires": [
            [
                "bed4b9a48e50c41c",
                "3ec01d49fbdfba54"
            ]
        ]
    },
    {
        "id": "60346d8f3d1bcd94",
        "type": "debug",
        "z": "d7d109e0d89be1c6",
        "name": "gotFlow",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 780,
        "wires": []
    },
    {
        "id": "e894cadacc02eb73",
        "type": "function",
        "z": "d7d109e0d89be1c6",
        "name": "updateResultToPayload",
        "func": "\nconst findChangedKeyValuePairs = (oldObj, newObj) => {\n    const changedKeyValuePairs = [];\n\n    for (const key in newObj) {\n        if (oldObj[key] !== newObj[key]) {\n            changedKeyValuePairs.push({\n                key,\n                oldValue: oldObj[key],\n                newValue: newObj[key],\n                service: {\n                    name: 'qflow',\n                    timestamp: new Date()\n                }\n            });\n        }\n    }\n\n    return changedKeyValuePairs;\n}\n\nconst qFlowdelta = findChangedKeyValuePairs(msg.payload.qflowInputFacts[0], msg.payload.facts[0]);\n\nmsg.payload.delta.push(...qFlowdelta);\nmsg.payload.fact = msg.payload.facts[0];\ndelete msg.payload.facts;\ndelete msg.payload.qflowInputFacts;\n\nvar currentStepIndex = msg.payload.recipe.currentStepIndex;\nconst startTime = msg.payload.recipe.steps[currentStepIndex].tsStart;\n\nconst endTime = new Date().getTime();\n\nmsg.payload.recipe.steps[currentStepIndex].tsEnd = endTime;\nmsg.payload.recipe.steps[currentStepIndex].processedTime = endTime - startTime;\n\nmsg.payload.recipe.steps[currentStepIndex].delta = qFlowdelta;\nmsg.payload.recipe.currentStepIndex = currentStepIndex + 1\nmsg.topicName = msg.payload.recipe.steps[currentStepIndex+1].msName;\n\nmsg.payload = JSON.stringify(msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 720,
        "wires": [
            [
                "65ddc89844c5a58f",
                "3fec20bb8aaae008"
            ]
        ]
    },
    {
        "id": "65ddc89844c5a58f",
        "type": "debug",
        "z": "d7d109e0d89be1c6",
        "name": "Got updateResultToPayload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 620,
        "wires": []
    },
    {
        "id": "3fec20bb8aaae008",
        "type": "switch",
        "z": "d7d109e0d89be1c6",
        "name": "Switch the topic push",
        "property": "topicName",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "qbes",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "qflow",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "jobOutput",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1010,
        "y": 740,
        "wires": [
            [
                "8b0e07553bb5ee94"
            ],
            [
                "5006976f1193b7e2"
            ],
            [
                "d0b38c1e210e2c2b"
            ]
        ]
    },
    {
        "id": "8b0e07553bb5ee94",
        "type": "debug",
        "z": "d7d109e0d89be1c6",
        "name": "Producer Qubes",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 640,
        "wires": []
    },
    {
        "id": "5006976f1193b7e2",
        "type": "debug",
        "z": "d7d109e0d89be1c6",
        "name": "Producer QFlow",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 740,
        "wires": []
    },
    {
        "id": "d0b38c1e210e2c2b",
        "type": "debug",
        "z": "d7d109e0d89be1c6",
        "name": "Producer JobOutput",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 840,
        "wires": []
    },
    {
        "id": "38b1aa58eaaa6a28",
        "type": "function",
        "z": "d7d109e0d89be1c6",
        "name": "Getting Data and Makeing Index",
        "func": "msg.payload = JSON.parse(msg.payload.value)\n\nconst currentStepIndex = msg.payload.recipe.currentStepIndex;\nconst startTime = new Date().getTime();\n\nmsg.payload.recipe.steps[currentStepIndex].tsStart = startTime;\n\nmsg.payload.facts = [msg.payload.fact]\n\n\nmsg.payload.qflowInputFacts = JSON.parse(JSON.stringify(msg.payload.facts))\n\nmsg.payload.csv = JSON.parse(JSON.stringify(msg.payload.facts))\n\nglobal.set(\"ptrModuleFacts\", 0);\n\nmsg.modeName = msg.payload.recipe.steps[currentStepIndex].hasOwnProperty('testModule') ? msg.payload.recipe.steps[currentStepIndex].testModule : 'interactive_mode';\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1020,
        "wires": [
            [
                "dd4e4b47f3bb384d",
                "8549c72d66cffc9d"
            ]
        ]
    },
    {
        "id": "dd4e4b47f3bb384d",
        "type": "debug",
        "z": "d7d109e0d89be1c6",
        "name": "Got Kafka Connection",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 1080,
        "wires": []
    },
    {
        "id": "bc67b88faaeac7a5",
        "type": "inject",
        "z": "d7d109e0d89be1c6",
        "name": "Test Input for Qflow",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 1020,
        "wires": [
            [
                "79a0b1bc0114c75c"
            ]
        ]
    },
    {
        "id": "79a0b1bc0114c75c",
        "type": "function",
        "z": "d7d109e0d89be1c6",
        "name": "Raw data",
        "func": "msg.payload.csv = [\n    {\n    \"job\": {\n        \"history\": [],\n        \"jobName\": \"mark1\",\n        \"recipeID\": 1,\n        \"initiatedTs\": \"2023-09-11T17:51:55.574Z\"\n    },\n    \"fact\": {\n        \"ID\": 33133,\n        \"ENT_ID\": \"2099021295\",\n        \"KAU_ID\": \"3000003933\",\n        \"NR_ADJ\": \"1\",\n        \"NR_WGT\": \"1\",\n        \"PS_ADJ\": \"1\",\n        \"PS_WGT\": \"1\",\n        \"SMPCDE\": \"6\",\n        \"SMPWGT\": \"1\",\n        \"WSWTCH\": \"C\",\n        \"DUPFACT\": \"1\",\n        \"EIN_NUM\": \"730584841SUCCESS\",\n        \"OUTLIER\": \"1\",\n        \"SMPOWGT\": \"1\",\n        \"SUBSAMP\": \"1\",\n        \"TABSTAT\": \"Y\",\n        \"UNB_WGT\": \"1\",\n        \"VERSION\": \"PO\",\n        \"EXP_DPCT\": null,\n        \"INV_STAT\": null,\n        \"NONTABFL\": \"ABC\",\n        \"ZERO_VAL\": \"0\",\n        \"BIRTH_ADJ\": \"1\",\n        \"NAICS_NUM\": 51212000,\n        \"OPSTAT_STAT\": \"Y    \",\n        \"PAY_ANN_VAL\": 62229,\n        \"ACTV_MIO_NUM\": 2,\n        \"EXPS_TAX_VAL\": null,\n        \"EXPS_TOT_VAL\": null,\n        \"ITEM_OUTLIER\": \"1\",\n        \"NAICS_SECTOR\": \"51\",\n        \"PAY_QTR1_VAL\": 15525,\n        \"RATIO_FACTOR\": \"1\",\n        \"RCPT_TOT_VAL\": 52698,\n        \"RCPT_UFO_VAL\": null,\n        \"REPORTING_ID\": 2099024640,\n        \"ADD_OPEN_DATE\": \"2018-12-04T00:00:00\",\n        \"EMP_MAR12_NUM\": 115,\n        \"EXPS_ELEC_VAL\": null,\n        \"EXPS_FUEL_VAL\": null,\n        \"GROUP_KEY_TXT\": \"5121200000Y\",\n        \"INV_B_AVG_VAL\": null,\n        \"INV_B_FIN_VAL\": null,\n        \"INV_B_MAT_VAL\": null,\n        \"INV_B_STD_VAL\": null,\n        \"INV_B_TOT_VAL\": null,\n        \"INV_B_WIP_VAL\": null,\n        \"INV_E_AVG_VAL\": null,\n        \"INV_E_FIN_VAL\": null,\n        \"INV_E_MAT_VAL\": null,\n        \"INV_E_STD_VAL\": null,\n        \"INV_E_TOT_VAL\": null,\n        \"INV_E_WIP_VAL\": null,\n        \"NONPROFT_STAT\": \"N    \",\n        \"PAY_ANN_VAL_F\": \"t\",\n        \"RCPT_UFO_STAT\": null,\n        \"REPORTING_ID2\": \"2099024640\",\n        \"CAPEX_AUTO_VAL\": null,\n        \"CAPEX_TOT_DVAL\": null,\n        \"EXPS_OTHER_VAL\": null,\n        \"EXPS_SLVR_DVAL\": 0,\n        \"EXPS_TAX_VAL_F\": \"t\",\n        \"EXPS_TOT_VAL_F\": \"r\",\n        \"INV_B_FIFO_VAL\": null,\n        \"INV_B_LIFO_VAL\": null,\n        \"INV_E_FIFO_VAL\": null,\n        \"INV_E_LIFO_VAL\": null,\n        \"OPSTAT_SY_STAT\": \"4    \",\n        \"PAYANN_EMP_RAT\": \"541.0347826086957\",\n        \"PAY_QTR1_VAL_F\": \"k\",\n        \"RCPT_ESHIP_PCT\": null,\n        \"RCPT_TOT_VAL_F\": \"k\",\n        \"RCPT_UFO_VAL_F\": \"k\",\n        \"RECORD_TYP_TXT\": \"20\",\n        \"EMP_MAR12_NUM_F\": \"r\",\n        \"EXPS_ADVERT_VAL\": null,\n        \"EXPS_ELEC_VAL_F\": \"k\",\n        \"EXPS_EXSOFT_VAL\": null,\n        \"EXPS_FUEL_VAL_F\": \"k\",\n        \"EXPS_MAT_V1_VAL\": null,\n        \"EXPS_PCHTT_DVAL\": null,\n        \"EXPS_REFUSE_VAL\": null,\n        \"EXPS_RESALE_VAL\": null,\n        \"EXPS_RPTOT_DVAL\": null,\n        \"INV_B_AVG_VAL_F\": \"t\",\n        \"INV_B_FIN_VAL_F\": \"t\",\n        \"INV_B_MAT_VAL_F\": \"t\",\n        \"INV_B_OTHNL_VAL\": null,\n        \"INV_B_STD_VAL_F\": \"r\",\n        \"INV_B_TOT_VAL_F\": \"r\",\n        \"INV_B_WIP_VAL_F\": \"t\",\n        \"INV_E_AVG_VAL_F\": \"t\",\n        \"INV_E_FIN_VAL_F\": \"t\",\n        \"INV_E_MAT_VAL_F\": \"r\",\n        \"INV_E_OTHNL_VAL\": null,\n        \"INV_E_STD_VAL_F\": \"r\",\n        \"INV_E_TOT_VAL_F\": \"k\",\n        \"INV_E_WIP_VAL_F\": \"t\",\n        \"NAICS_WRTIN_TXT\": \"lorem ipsum\",\n        \"PAY_ANN_OM_DVAL\": null,\n        \"RCPT_TOT_PY_VAL\": 42721,\n        \"ROBOT_INDST_VAL\": null,\n        \"ROBOT_WRTIN_TXT\": null,\n        \"TAX_EXEMPT_STAT\": \"N    \",\n        \"TYPOP_CODE_STAT\": null,\n        \"CAPEX_AUTO_VAL_F\": \"t\",\n        \"CAPEX_COMPTR_VAL\": null,\n        \"ELEC_GEN_KWH_NUM\": null,\n        \"EXPS_COMMSVC_VAL\": null,\n        \"EXPS_OTHER_VAL_F\": \"k\",\n        \"HOURS_PRDWRK_NUM\": null,\n        \"INV_B_FIFO_VAL_F\": \"k\",\n        \"INV_B_LIFO_VAL_F\": \"r\",\n        \"INV_E_FIFO_VAL_F\": \"k\",\n        \"INV_E_LIFO_VAL_F\": \"k\",\n        \"INV_FIN_DIF_DVAL\": null,\n        \"INV_WIP_DIF_DVAL\": null,\n        \"RCPT_ESHIP_PCT_F\": \"t\",\n        \"REPORTING_TYP_ID\": \"MU\",\n        \"VALUE_ADDED_DVAL\": null,\n        \"CAPEX_OTHMACH_VAL\": null,\n        \"CAPEX_OTH_NEW_VAL\": null,\n        \"ELEC_PRCH_KWH_NUM\": null,\n        \"ELEC_SOLD_KWH_NUM\": null,\n        \"EMP_MAR12_OM_DNUM\": null,\n        \"EXPS_ADVERT_VAL_F\": \"t\",\n        \"EXPS_CONTRACT_VAL\": null,\n        \"EXPS_CSTMTOT_DVAL\": null,\n        \"EXPS_DATAPROC_VAL\": null,\n        \"EXPS_EXSOFT_VAL_F\": \"t\",\n        \"EXPS_MACH_REP_VAL\": null,\n        \"EXPS_MAT_V1_VAL_F\": \"k\",\n        \"EXPS_PROFTECH_VAL\": null,\n        \"EXPS_REFUSE_VAL_F\": \"t\",\n        \"EXPS_RESALE_VAL_F\": \"t\",\n        \"EXPS_TEMPSTAF_VAL\": null,\n        \"INV_B_NL_TOT_DVAL\": null,\n        \"INV_B_OTHNL_VAL_F\": \"t\",\n        \"INV_E_NL_TOT_DVAL\": null,\n        \"INV_E_OTHNL_VAL_F\": \"t\",\n        \"PAY_ANN_SLVR_DVAL\": 46694,\n        \"RCPT_TOT_PY_VAL_F\": \"k\",\n        \"ROBOT_INDST_VAL_F\": \"t\",\n        \"CAPEX_COMPTR_VAL_F\": \"t\",\n        \"CAPEX_NEW_TOT_DVAL\": null,\n        \"CAPEX_OTH_TOT_DVAL\": null,\n        \"CAPEX_OTH_USED_VAL\": null,\n        \"ELEC_GEN_KWH_NUM_F\": \"r\",\n        \"EXPS_BUILD_REP_VAL\": null,\n        \"EXPS_COMMSVC_VAL_F\": \"k\",\n        \"EXPS_RENT_MACH_VAL\": null,\n        \"HOURS_PRDWRK_NUM_F\": \"k\",\n        \"INV_B_LIFO_RSV_VAL\": null,\n        \"INV_E_LIFO_RSV_VAL\": null,\n        \"NEG_INV_B_TOT_DVAL\": null,\n        \"PAY_ANN_PRDWRK_VAL\": null,\n        \"CAPEX_BUILD_NEW_VAL\": null,\n        \"CAPEX_MACH_TOT_DVAL\": null,\n        \"CAPEX_MACH_USED_VAL\": null,\n        \"CAPEX_OTHMACH_VAL_F\": \"r\",\n        \"CAPEX_OTH_NEW_VAL_F\": \"t\",\n        \"CAPEX_USED_TOT_DVAL\": null,\n        \"ELEC_PRCH_KWH_NUM_F\": \"r\",\n        \"ELEC_SOLD_KWH_NUM_F\": \"k\",\n        \"EXPS_CONTRACT_VAL_F\": \"r\",\n        \"EXPS_DATAPROC_VAL_F\": \"k\",\n        \"EXPS_MACH_REP_VAL_F\": \"k\",\n        \"EXPS_PROFTECH_VAL_F\": \"t\",\n        \"EXPS_RENT_BUILD_VAL\": null,\n        \"EXPS_TEMPSTAF_VAL_F\": \"t\",\n        \"INV_B_IVAL_TOT_DVAL\": null,\n        \"INV_B_NL_TOT_DVAL_F\": \"r\",\n        \"INV_E_IVAL_TOT_DVAL\": null,\n        \"INV_E_LIFO_NET_DVAL\": null,\n        \"INV_E_NL_TOT_DVAL_F\": \"r\",\n        \"MAJOR_ACT_CODE_STAT\": \"18\",\n        \"PAY_QTR1_PRDWRK_VAL\": null,\n        \"PHYSLOC_ADDR_ST_TXT\": \"KS\",\n        \"TYPOP_OTH_WRTIN_TXT\": null,\n        \"CAPEX_BUILD_TOT_DVAL\": null,\n        \"CAPEX_BUILD_USED_VAL\": null,\n        \"CAPEX_OTH_TOT_DVAL_F\": \"r\",\n        \"CAPEX_OTH_USED_VAL_F\": \"r\",\n        \"EMP_MAR12_PRDWRK_NUM\": null,\n        \"EXPS_BUILD_REP_VAL_F\": \"k\",\n        \"EXPS_OTHER_WRTIN_TXT\": null,\n        \"EXPS_RENT_MACH_VAL_F\": \"r\",\n        \"INV_B_LIFO_RSV_VAL_F\": \"k\",\n        \"INV_E_LIFO_RSV_VAL_F\": \"t\",\n        \"PAY_ANN_PRDWRK_VAL_F\": \"r\",\n        \"ROBOT_INDST_INOP_NUM\": null,\n        \"ROBOT_INDST_PRCH_NUM\": null,\n        \"CAPEX_BUILD_NEW_VAL_F\": \"k\",\n        \"CAPEX_MACH_USED_VAL_F\": \"k\",\n        \"EXPS_COMPTR_OTHEQ_VAL\": null,\n        \"EXPS_FRNG_BENEFIT_VAL\": null,\n        \"EXPS_RENT_BUILD_VAL_F\": \"t\",\n        \"INV_B_IVAL_TOT_DVAL_F\": \"k\",\n        \"INV_E_IVAL_TOT_DVAL_F\": \"r\",\n        \"NEG_EXPS_CSTMTOT_DVAL\": null,\n        \"PAY_ANN_NONPRDWRK_VAL\": null,\n        \"PAY_QTR1_PRDWRK_VAL_F\": \"r\",\n        \"CAPEX_BUILD_USED_VAL_F\": \"t\",\n        \"EMP_MAR12_PRDWRK_NUM_F\": \"r\",\n        \"PAY_QTR1_NONPRDWRK_VAL\": null,\n        \"ROBOT_INDST_INOP_NUM_F\": \"r\",\n        \"ROBOT_INDST_PRCH_NUM_F\": \"k\",\n        \"CAPEX_OTH_NEW_WRTIN_TXT\": null,\n        \"EMP_MAR12_NONPRDWRK_NUM\": null,\n        \"EXPS_COMPTR_OTHEQ_VAL_F\": \"t\",\n        \"EXPS_FRNG_BENEFIT_VAL_F\": \"r\",\n        \"PAY_ANN_NONPRDWRK_VAL_F\": \"r\",\n        \"CAPEX_OTH_USED_WRTIN_TXT\": null,\n        \"MAJOR_ACT_CODE_WRTIN_TXT\": \"lorem ipsum\",\n        \"PAY_QTR1_NONPRDWRK_VAL_F\": \"r\",\n        \"EMP_MAR12_NONPRDWRK_NUM_F\": \"k\",\n        \"ROBOT_INDST_INOP_WRTIN_TXT\": null,\n        \"ROBOT_INDST_PRCH_WRTIN_TXT\": null\n    },\n    \"meta\": {\n        \"id\": 758671,\n        \"type\": \"ESTAB\",\n        \"ent_id\": \"2099021295\",\n        \"kau_id\": \"3000003933\",\n        \"version\": null,\n        \"estab_id\": \"33133\"\n    },\n    \"delta\": [\n        {\n            \"key\": \"EIN_NUM\",\n            \"service\": {\n                \"name\": \"qbes\",\n                \"timestamp\": \"2023-09-11T17:52:03.848Z\"\n            },\n            \"newValue\": \"730584841SUCCESS\",\n            \"oldValue\": 730584841\n        },\n        {\n            \"key\": \"PAY_ANN_VAL\",\n            \"service\": {\n                \"name\": \"qbes\",\n                \"timestamp\": \"2023-09-11T17:52:03.848Z\"\n            },\n            \"newValue\": 62229,\n            \"oldValue\": 62219\n        }\n    ],\n    \"rules\": [\n        {\n            \"event\": {\n                \"name\": \"Set review flag for estab\",\n                \"type\": 238,\n                \"active\": true,\n                \"params\": {\n                    \"action\": [\n                        {\n                            \"Action\": \"\\\"Set Review for Flag\\\"\"\n                        }\n                    ],\n                    \"message\": \"Setting the review flag for ESTAB.\",\n                    \"rvsJSON\": [\n                        \"TYPOP_CODE_STAT\"\n                    ],\n                    \"apiSource\": {},\n                    \"actionType\": \"impute\",\n                    \"apiChecked\": false\n                },\n                \"ruleId\": 238,\n                \"actionType\": \"impute\",\n                \"rulePriority\": \"5\",\n                \"validationType\": \"estab\"\n            },\n            \"index\": -1,\n            \"priority\": 5,\n            \"conditions\": {\n                \"all\": [\n                    {\n                        \"fact\": \"checkCondition\",\n                        \"path\": \"$.value\",\n                        \"value\": true,\n                        \"params\": {\n                            \"conditionstring\": \"VERSION == \\\"ADJ\\\"\"\n                        },\n                        \"operator\": \"equal\"\n                    }\n                ]\n            }\n        },\n        {\n            \"event\": {\n                \"name\": \"Append Success to EIN NUMBER\",\n                \"type\": 239,\n                \"active\": true,\n                \"params\": {\n                    \"action\": [\n                        {\n                            \"EIN_NUM\": \"concat(EIN_NUM, \\\"SUCCESS\\\")\"\n                        }\n                    ],\n                    \"message\": \"Setting the review flag for ESTAB.\",\n                    \"rvsJSON\": [\n                        \"TYPOP_CODE_STAT\"\n                    ],\n                    \"apiSource\": {},\n                    \"actionType\": \"impute\",\n                    \"apiChecked\": false\n                },\n                \"ruleId\": 238,\n                \"actionType\": \"impute\",\n                \"rulePriority\": \"5\",\n                \"validationType\": \"estab\"\n            },\n            \"index\": -1,\n            \"priority\": 5,\n            \"conditions\": {\n                \"all\": [\n                    {\n                        \"fact\": \"checkCondition\",\n                        \"path\": \"$.value\",\n                        \"value\": true,\n                        \"params\": {\n                            \"conditionstring\": \"EIN_NUM != \\\"\\\"\"\n                        },\n                        \"operator\": \"equal\"\n                    }\n                ]\n            }\n        },\n        {\n            \"event\": {\n                \"name\": \"PAY_ANN_VAL test 1\",\n                \"type\": \"new_1\",\n                \"active\": true,\n                \"params\": {\n                    \"rvs\": [],\n                    \"action\": [\n                        {\n                            \"PAY_ANN_VAL\": \"PAY_ANN_VAL + 1\"\n                        }\n                    ],\n                    \"message\": \"PAY_ANN_VAL TEST\",\n                    \"rvsJSON\": []\n                },\n                \"actionType\": \"impute\",\n                \"validationType\": \"new_1\"\n            },\n            \"index\": -1,\n            \"priority\": null,\n            \"conditions\": {\n                \"all\": [\n                    {\n                        \"fact\": \"checkCondition\",\n                        \"path\": \"$.value\",\n                        \"value\": true,\n                        \"params\": {\n                            \"conditionString\": \"1 == 1\"\n                        },\n                        \"operator\": \"equal\"\n                    }\n                ]\n            }\n        },\n        {\n            \"event\": {\n                \"name\": \"PAY_ANN RULE\",\n                \"type\": \"new_1\",\n                \"active\": true,\n                \"params\": {\n                    \"rvs\": [\n                        \"PAY_ANN_VAL\"\n                    ],\n                    \"action\": [\n                        {\n                            \"PAY_ANN_VAL\": \"PAY_ANN_VAL + 10\"\n                        }\n                    ],\n                    \"message\": \"PAY_ANN_VAL_1\",\n                    \"rvsJSON\": [\n                        \"PAY_ANN_VAL\"\n                    ]\n                },\n                \"actionType\": \"impute\",\n                \"rulePriority\": \"4\",\n                \"validationType\": \"new_1\"\n            },\n            \"index\": -1,\n            \"priority\": 4,\n            \"conditions\": {\n                \"all\": [\n                    {\n                        \"fact\": \"checkCondition\",\n                        \"path\": \"$.value\",\n                        \"value\": true,\n                        \"params\": {\n                            \"conditionstring\": \"PAY_ANN_VAL != \\\"\\\"\"\n                        },\n                        \"operator\": \"equal\"\n                    }\n                ]\n            }\n        }\n    ],\n    \"recipe\": {\n        \"steps\": [\n            {\n                \"delta\": [\n                    {\n                        \"key\": \"EIN_NUM\",\n                        \"service\": {\n                            \"name\": \"qbes\",\n                            \"timestamp\": \"2023-09-11T17:52:03.848Z\"\n                        },\n                        \"newValue\": \"730584841SUCCESS\",\n                        \"oldValue\": 730584841\n                    },\n                    {\n                        \"key\": \"PAY_ANN_VAL\",\n                        \"service\": {\n                            \"name\": \"qbes\",\n                            \"timestamp\": \"2023-09-11T17:52:03.848Z\"\n                        },\n                        \"newValue\": 62229,\n                        \"oldValue\": 62219\n                    }\n                ],\n                \"tsEnd\": 1694454723848,\n                \"msName\": \"qbes\",\n                \"tsStart\": 1694454723842,\n                \"validRules\": [\n                    {\n                        \"id\": 239,\n                        \"rvs\": [],\n                        \"action\": [\n                            {\n                                \"EIN_NUM\": \"concat(EIN_NUM, \\\"SUCCESS\\\")\"\n                            }\n                        ],\n                        \"message\": \"Setting the review flag for ESTAB.\",\n                        \"computedRVS\": {\n                            \"EIN_NUM\": \"730584841SUCCESS\"\n                        }\n                    },\n                    {\n                        \"id\": \"new_1\",\n                        \"rvs\": [],\n                        \"action\": [\n                            {\n                                \"PAY_ANN_VAL\": \"PAY_ANN_VAL + 10\"\n                            }\n                        ],\n                        \"message\": \"PAY_ANN_VAL_1\",\n                        \"computedRVS\": {\n                            \"EIN_NUM\": \"730584841SUCCESS\",\n                            \"PAY_ANN_VAL\": 62229\n                        }\n                    }\n                ],\n                \"invalidRules\": [\n                    {\n                        \"id\": 238,\n                        \"rvs\": [],\n                        \"action\": [\n                            {\n                                \"Action\": \"\\\"Set Review for Flag\\\"\"\n                            }\n                        ],\n                        \"message\": \"Setting the review flag for ESTAB.\"\n                    },\n                    {\n                        \"id\": \"new_1\",\n                        \"rvs\": [],\n                        \"action\": [\n                            {\n                                \"PAY_ANN_VAL\": \"PAY_ANN_VAL + 1\"\n                            }\n                        ],\n                        \"message\": \"PAY_ANN_VAL TEST\"\n                    }\n                ],\n                \"processedTime\": 6\n            },\n            {\n                \"tsEnd\": 0,\n                \"msName\": \"jobOutput\",\n                \"jobType\": \"spadJob\",\n                \"tsStart\": 0,\n                \"destinationTable\": \"product_aies.spad_2\"\n            }\n        ],\n        \"currentStepIndex\": 1\n    },\n    \"upsert\": true\n}]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "8549c72d66cffc9d",
        "type": "switch",
        "z": "d7d109e0d89be1c6",
        "name": "Switch for Mode",
        "property": "modeName",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "interactive_mode",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "batch_mode_1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "batch_mode_2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1340,
        "y": 1020,
        "wires": [
            [
                "35871e68a9f50691",
                "4cde7fe113a4df66"
            ],
            [
                "54cb70dfe4b43956",
                "a46cb4be6617824c"
            ],
            [
                "d6116234e9829874",
                "eda398efc16a87d5"
            ]
        ]
    },
    {
        "id": "35871e68a9f50691",
        "type": "link out",
        "z": "d7d109e0d89be1c6",
        "name": "Go To InteractiveMode",
        "mode": "link",
        "links": [
            "f5168b892485e327",
            "746909370ced9c62"
        ],
        "x": 1505,
        "y": 980,
        "wires": []
    },
    {
        "id": "54cb70dfe4b43956",
        "type": "link out",
        "z": "d7d109e0d89be1c6",
        "name": "Go To BatchMode1",
        "mode": "link",
        "links": [
            "513713eac5d2b9ba"
        ],
        "x": 1505,
        "y": 1040,
        "wires": []
    },
    {
        "id": "d6116234e9829874",
        "type": "link out",
        "z": "d7d109e0d89be1c6",
        "name": "Go To BatchMode2",
        "mode": "link",
        "links": [
            "7524317b716e4316"
        ],
        "x": 1505,
        "y": 1120,
        "wires": []
    },
    {
        "id": "4cde7fe113a4df66",
        "type": "debug",
        "z": "d7d109e0d89be1c6",
        "name": "InteractiveMode",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 940,
        "wires": []
    },
    {
        "id": "a46cb4be6617824c",
        "type": "debug",
        "z": "d7d109e0d89be1c6",
        "name": "batchMode1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 1020,
        "wires": []
    },
    {
        "id": "eda398efc16a87d5",
        "type": "debug",
        "z": "d7d109e0d89be1c6",
        "name": "batchMode2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1610,
        "y": 1080,
        "wires": []
    },
    {
        "id": "6a2c84e1dce8bff9",
        "type": "function",
        "z": "e1c94d5011366338",
        "name": "BR Stat",
        "func": "let record_idx = global.get(\"ptrModuleFacts\");\nlet record = msg.payload.csv[record_idx];\nfunction A(msg) {\n    msg.payload.csv[record_idx].TABSTAT = \"N\";\n    msg.payload.csv[record_idx].NONTABFL = \"D\";\n    msg.payload.csv[record_idx].ACTION = \"Exit Edit\";\n    global.set('action', 'Exit Edit')\n}\n\n// Is RECORD_TYP_TXT in ('10','20','3O','90')\nif ([\"10\", \"20\", \"30\", \"90\"].includes(String(record.RECORD_TYP_TXT))) {\n    msg.payload.DEBUG_STATUS = \"RECORD_TYP_TXT-10-20-30-90-true\"\n    // Set TABSTAT and NONTABFL variables\n    msg.payload.csv[record_idx].TABSTAT = \"Y\";\n    msg.payload.csv[record_idx].NONTABFL = null;\n\n    // Is RECORD_TYP_TXT in ('10','20','90')\n    if ([\"10\", \"20\", \"90\"].includes(String(record.RECORD_TYP_TXT))) {\n        // Is BR_STAT equal to \"N\"\n        if (record.BR_STAT === \"N\") {\n            A(msg); // Go to A\n        } else { // BR_STAT not equal to \"N\"\n            // Is RECORD_TYP_TXT \"20\" or \"90\"\n            if ([\"20\", \"90\"].includes(String(record.RECORD_TYP_TXT))) {\n                msg.payload.csv[record_idx].ACTION = \"Go to main Routing\";\n                return msg;\n\n            } else { // RECORD_TYP_TXT not \"20\" or \"90\"\n                msg.payload.csv[record_idx].ACTION = \"Go to main Routing\";\n                return msg;\n            }\n        }\n\n    } else { // RECORD_TYP_TXT not in ('10','20','3O','90')\n        if (record.KAU_STAT === \"N\") {\n            A(msg); // Go to A\n        } else {\n            msg.payload.csv[record_idx].ACTION = \"Go to main Routing\";\n            global.set('action', 'Go to main Routing')\n            return msg;\n        }\n    }\n\n} else {  // RECORD_TYP_TXT not in ('10','20','3O','90')\n    msg.payload.record_idx = record_idx\n    msg.payload.DEBUG_STATUS = \"RECORD_TYP_TXT-10-20-30-90-false\"\n    msg.payload.csv[record_idx].ACTION = \"ERROR\";\n    global.set('action', 'ERROR')\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 180,
        "wires": [
            [
                "c74136ccac77c41a"
            ]
        ]
    },
    {
        "id": "d1302884ac348646",
        "type": "function",
        "z": "e1c94d5011366338",
        "name": "critical error",
        "func": "let record_idx = global.get(\"ptrModuleFacts\");\nlet record = msg.payload.csv[record_idx];\n\nfunction setResult() {\n    record['TABSTAT'] = \"N\";\n    record['NONTABFL'] = \"D\";\n    record['ACTION'] = \"Exit Edit\";\n    global.set('action', 'Exit Edit')\n}\n\n// function parseToNum(val) {\n//     return isNaN(val) ? 0 : parseInt(val, 10);\n// }\nfunction naicsSectorCheck() {\n    let result =\n        parseFloat(record['PAY_ANN_VAL']) +\n        parseFloat(record['EMP_MAR12_NUM']) +\n        parseFloat(record['PAY_QTR1_VAL']) +\n        parseFloat(record['ECPAYANN']) +\n        parseFloat(record['ECPAYQ1']) +\n        parseFloat(record['ECEMPQ1']) +\n        parseFloat(record['ECPAYANL']);\n\n    if (parseFloat(record['NAICS_SECTOR_OLD_NUM']) === 31) {\n        result = parseFloat(result) + parseFloat(record['EXPS_TEMPSTAF_VAL']);\n    }\n    return result\n}\nlet data = naicsSectorCheck();\nrecord['DATA'] = data\n\nif (record.hasOwnProperty('COV_CHG_CODE') &&\n    [\"111\", \"131\", \"791\"].includes(record['COV_CHG_CODE']?.toString()) &&\n    new Date(record['COV_CHG_DATE']) <=\n    new Date(\"01-01-\" + record.REF_PER.substring(0, 4)) &&\n    data == 0\n) {\n    setResult();\n    return msg;\n\n} else if (record.hasOwnProperty('COV_CHG_CODE') && [\"181\", \"201\", \"801\", \"091\", \"121\", \"171\"].includes(record['COV_CHG_CODE']?.toString())) {\n    setResult();\n    return msg;\n} else {\n    record['ACTION'] = \"Go To Main Routing\";\n    global.set('action', 'Go To Main Routing')\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 240,
        "wires": [
            [
                "8dd01db339ac1096"
            ]
        ]
    },
    {
        "id": "513713eac5d2b9ba",
        "type": "link in",
        "z": "e1c94d5011366338",
        "name": "Got Batchmode 1",
        "links": [
            "8eb6f6b4ca5cb88d",
            "54cb70dfe4b43956"
        ],
        "x": 235,
        "y": 160,
        "wires": [
            [
                "acfd749424c9c93f"
            ]
        ]
    },
    {
        "id": "d749199ab42b9801",
        "type": "debug",
        "z": "e1c94d5011366338",
        "name": "Results",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 220,
        "wires": []
    },
    {
        "id": "7cdbce6d4b28412b",
        "type": "link out",
        "z": "e1c94d5011366338",
        "name": "link out gotQBES",
        "mode": "link",
        "links": [
            "8ad2ab7c27d8d248"
        ],
        "x": 1415,
        "y": 340,
        "wires": []
    },
    {
        "id": "c9b7e7142a50a57a",
        "type": "function",
        "z": "e1c94d5011366338",
        "name": "Set Path",
        "func": "let record_idx = global.get(\"ptrModuleFacts\");\nlet record = msg.payload.csv[record_idx];\n\nrecord['RANDOM'] = Math.floor(Math.random() * 10) + 1\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 160,
        "wires": [
            [
                "c9f1b90676a7bee6"
            ]
        ]
    },
    {
        "id": "c9f1b90676a7bee6",
        "type": "function",
        "z": "e1c94d5011366338",
        "name": "Fake PV",
        "func": "\n// function setCharAt(str, index, chr) {\n//     if (index > str.length - 1) {\n//         let addstr = index - str.length\n//         let newstr = str\n//         for (let i = 0; i < addstr; i++) {\n//             newstr = newstr + ' ';            \n//         }\n//         newstr = newstr + chr \n//         return newstr;\n//     } else { return str.substring(0, index) + chr + str.substring(index + 1);\n//     }\n// }\n\n// function initializeVariables(record) {\n//     record.PAY_ANN_VAL_F = setCharAt(record.PAY_ANN_VAL_F.toString(), 2, 'X');\n//     record.RCPT_TOT_VAL_F = setCharAt(record.RCPT_TOT_VAL_F.toString(), 2, 'X');\n//     record.EMP_MAR12_NUM_F = setCharAt(record.EMP_MAR12_NUM_F.toString(), 2, 'X');\n//     record.PAY_QTR1_VAL_F = setCharAt(record.PAY_QTR1_VAL_F.toString(), 2, 'U');\n//     record.PAY_ANN_VAL = 0\n//     record.RCPT_TOT_VAL = 0\n//     record.EMP_MAR12_NUM = 0\n//     record.PAY_QTR1_VAL = 0\n//     return record;\n// }\n\n// let record_idx = global.get(\"ptrModuleFacts\");\n// let record = msg.payload.csv[record_idx];\n\n// // record.PAY_ANN_VAL = (record.PAY_ANN_VAL && record.PAY_ANN_VAL != 'NULL') ? record.PAY_ANN_VAL : \"0\";\n// // record.RCPT_TOT_VAL = (record.RCPT_TOT_VAL && record.RCPT_TOT_VAL != 'NULL') ? record.RCPT_TOT_VAL : \"0\";\n// // record.EMP_MAR12_NUM = (record.EMP_MAR12_NUM && record.EMP_MAR12_NUM != 'NULL') ? record.EMP_MAR12_NUM : \"0\";\n// // record.PAY_QTR1_VAL = (record.PAY_QTR1_VAL && record.PAY_QTR1_VAL != 'NULL') ? record.PAY_QTR1_VAL : \"0\";\n\n// if(parseInt(record['RANDOM']) > 5){\n//     record = initializeVariables(record);\n// }\n\n// return msg;\n\n\n// function setCharAt(str, index, chr) {\n//     if (index > str.length - 1) return str;\n//     return str.substring(0, index) + chr + str.substring(index + 1);\n// }\n\n// function initializeVariables(record) {\n//     record.PAY_ANN_VAL = setCharAt(record.PAY_ANN_VAL.toString(), 2, 'U');\n//     record.RCPT_TOT_VAL = setCharAt(record.RCPT_TOT_VAL.toString(), 2, 'X');\n//     record.EMP_MAR12_NUM = setCharAt(record.EMP_MAR12_NUM.toString(), 2, 'U');\n//     record.PAY_QTR1_VAL = setCharAt(record.PAY_QTR1_VAL.toString(), 2, 'U');\n\n//     return record;\n// }\n\n// let record_idx = global.get(\"ptrModuleFacts\");\n// let record = msg.payload.csv[record_idx];\n\n// record.PAY_ANN_VAL = (record.PAY_ANN_VAL && record.PAY_ANN_VAL !== 'NULL') ? record.PAY_ANN_VAL : \"0\";\n// record.RCPT_TOT_VAL = (record.RCPT_TOT_VAL && record.RCPT_TOT_VAL !== 'NULL') ? record.RCPT_TOT_VAL : \"0\";\n// record.EMP_MAR12_NUM = (record.EMP_MAR12_NUM && record.EMP_MAR12_NUM !== 'NULL') ? record.EMP_MAR12_NUM : \"0\";\n// record.PAY_QTR1_VAL = (record.PAY_QTR1_VAL && record.PAY_QTR1_VAL !== 'NULL') ? record.PAY_QTR1_VAL : \"0\";\n\n// if(parseInt(record['RANDOM']) > 5){\n//     record = initializeVariables(record);\n// }\n\n// return msg;\n\n// function setCharAt(str, index, chr) {\n//     if (index > str.length - 1) return str;\n//     return str.substring(0, index) + chr + str.substring(index + 1);\n// }\n\n// function initializeVariables(record) {\n//     record.PAY_ANN_VAL = setCharAt(record.PAY_ANN_VAL.toString(), 2, 'U');\n\n//     record.RCPT_TOT_VAL = setCharAt(record.RCPT_TOT_VAL.toString(), 2, 'X');\n\n//     record.EMP_MAR12_NUM = setCharAt(record.EMP_MAR12_NUM.toString(), 2, 'U');\n\n//     record.PAY_QTR1_VAL = setCharAt(record.PAY_QTR1_VAL.toString(), 2, 'U');\n\n//     return record;\n// }\n\n\n// let record_idx = global.get(\"ptrModuleFacts\");\n// let record = msg.payload.csv[record_idx];\n\n// record.PAY_ANN_VAL = record.PAY_ANN_VAL || \"0\";\n// record.RCPT_TOT_VAL = record.RCPT_TOT_VAL || \"0\";\n// record.EMP_MAR12_NUM = record.EMP_MAR12_NUM || \"0\";\n// record.PAY_QTR1_VAL = record.PAY_QTR1_VAL || \"0\";\n\n// if(parseInt(record['RANDOM']) > 10){\n//     record = initializeVariables(record);\n// }\n\n\n// return msg;\nfunction setCharAt(str, index, chr) {\n    if ([null, undefined].includes(str)) {\n        let newstr = ''\n        for (let i = 0; i < index; i++) {\n            newstr = newstr + ' ';\n        }\n        newstr = newstr + chr\n        return newstr;\n    } else {\n        if (index > str.length - 1) {\n            let addstr = index - str.length\n            let newstr = str\n            for (let i = 0; i < addstr; i++) {\n                newstr = newstr + ' ';\n            }\n            newstr = newstr + chr\n            return newstr;\n        } else {\n            return str.substring(0, index) + chr + str.substring(index + 1);\n        }\n    }\n}\n\n\nfunction initializeVariables(record) {\n    record.PAY_ANN_VAL_F = setCharAt(record.PAY_ANN_VAL_F, 2, 'X');\n    record.RCPT_TOT_VAL_F = setCharAt(record.RCPT_TOT_VAL_F, 2, 'X');\n    record.EMP_MAR12_NUM_F = setCharAt(record.EMP_MAR12_NUM_F, 2, 'X');\n    record.PAY_QTR1_VAL_F = setCharAt(record.PAY_QTR1_VAL_F, 2, 'U');\n    record.PAY_ANN_VAL = 0\n    record.RCPT_TOT_VAL = 0\n    record.EMP_MAR12_NUM = 0\n    record.PAY_QTR1_VAL = 0\n    return record;\n}\n\nlet record_idx = global.get(\"ptrModuleFacts\");\nlet record = msg.payload.csv[record_idx];\n\n// record.PAY_ANN_VAL = (record.PAY_ANN_VAL && record.PAY_ANN_VAL != 'NULL') ? record.PAY_ANN_VAL : \"0\";\n// record.RCPT_TOT_VAL = (record.RCPT_TOT_VAL && record.RCPT_TOT_VAL != 'NULL') ? record.RCPT_TOT_VAL : \"0\";\n// record.EMP_MAR12_NUM = (record.EMP_MAR12_NUM && record.EMP_MAR12_NUM != 'NULL') ? record.EMP_MAR12_NUM : \"0\";\n// record.PAY_QTR1_VAL = (record.PAY_QTR1_VAL && record.PAY_QTR1_VAL != 'NULL') ? record.PAY_QTR1_VAL : \"0\";\n\nif (parseInt(record['RANDOM']) > 5) {\n    record = initializeVariables(record);\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 160,
        "wires": [
            [
                "d749199ab42b9801",
                "45c8faeb65e8f7cb"
            ]
        ]
    },
    {
        "id": "45c8faeb65e8f7cb",
        "type": "function",
        "z": "e1c94d5011366338",
        "name": "Check and udpate Recipe",
        "func": "// msg.payload.recipe.currentStepIndex = msg.payload.recipe.currentStepIndex + 1\nmsg.payload.facts =  msg.payload.csv\n// msg.payload.results.fact = msg.payload.csv[global.get(\"ptrModuleFacts\")]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 160,
        "wires": [
            [
                "7cdbce6d4b28412b",
                "67cb21d2f5fc02bd"
            ]
        ]
    },
    {
        "id": "a7f0c8bc56765c6a",
        "type": "link in",
        "z": "e1c94d5011366338",
        "name": "Interactive Mode Batch Mode 1 UI Input",
        "links": [
            "6386460ff91d3960"
        ],
        "x": 225,
        "y": 260,
        "wires": [
            [
                "acfd749424c9c93f"
            ]
        ]
    },
    {
        "id": "67cb21d2f5fc02bd",
        "type": "link out",
        "z": "e1c94d5011366338",
        "name": "link out 64",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 1415,
        "y": 420,
        "wires": []
    },
    {
        "id": "c74136ccac77c41a",
        "type": "switch",
        "z": "e1c94d5011366338",
        "name": "Exit Check",
        "property": "action",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "Exit Edit",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "Exit Edit",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 320,
        "wires": [
            [
                "67cb21d2f5fc02bd",
                "7cdbce6d4b28412b"
            ],
            [
                "d1302884ac348646"
            ]
        ]
    },
    {
        "id": "8dd01db339ac1096",
        "type": "switch",
        "z": "e1c94d5011366338",
        "name": "Exit Check",
        "property": "action",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "Exit Edit",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "Exit Edit",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 850,
        "y": 280,
        "wires": [
            [
                "7cdbce6d4b28412b",
                "67cb21d2f5fc02bd"
            ],
            [
                "c9b7e7142a50a57a"
            ]
        ]
    },
    {
        "id": "acfd749424c9c93f",
        "type": "change",
        "z": "e1c94d5011366338",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "global",
                "to": "\"\"",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 120,
        "wires": [
            [
                "6a2c84e1dce8bff9"
            ]
        ]
    },
    {
        "id": "30cba14a34807b8f",
        "type": "function",
        "z": "cd5dca18afec6561",
        "name": "Unit Balance Function",
        "func": "let record_idx = global.get(\"ptrModuleFacts\");\nlet record = msg.payload.csv[record_idx];\n\nmsg.cache = global.get(\"lookupCache\").data.find(\n    item =>\n        item.module === \"balance\" &&\n        item.param === \"unit_balance\" &&\n        item.program === \"aies\" &&\n        item.unit_type === \"estab\"\n)?.json_values;\n\nfunction checkNaics(data, naics, rec_typ, rec_typop, rec_tax) {\n    let list = data['NAICS']\n    let unit = data['UNIT TYPE']\n    let typop = data['TYPOP']\n    let tax = data['TAXSTAT']\n    let rectyp = rec_typ\n    if (['20', '90', 20, 90].includes(rectyp)) {\n        rec_typ = 'ESTAB'\n    } else if (['30', 30].includes(rectyp)) {\n        rec_typ = 'KAU'\n    } else if ([10, '10'].includes(rectyp)) {\n        rec_typ = 'ENT'\n    }\n    if ([null, undefined, 'null', 'undefined'].includes(typop)) {\n        rec_typop = typop\n    }\n    if ([null, undefined, 'null', 'undefined'].includes(tax)) {\n        rec_tax = tax\n    }\n    // console.log(rec_tax, tax, rec_typop, typop)\n    if (rec_typ === unit && rec_tax === tax && rec_typop === typop) {\n        if ([\"ALL\", \"All\"].includes(list)) {\n            return (true);\n        } else {\n            list = list.replace(/ /g, \"\");\n            list = list.replace(/'/g, \"\");\n            var array = list.split(',')\n\n            if (array.find(r => naics.startsWith(r))) {\n                return (true);\n            } else {\n                return (false)\n            }\n        }\n    }\n}\n\nfunction sumRow(data) {\n    let sum = 0;\n    var keys = [];\n    for (var key in data) {\n        if (key.startsWith('DETAIL') && data[key] != null) {\n            let variable = data[key]\n            // console.log(variable)\n            if (!Number.isNaN(parseFloat(record[variable]))) {\n                sum = parseFloat(sum) + parseFloat(record[variable])\n            }\n            // else {\n            //     record[variable] = 0\n            // }\n            keys.push(variable)\n        }\n    }\n    return [sum, keys];\n}\n\nfunction raking(rectot, sum, keys, tol) {\n    if ((Math.abs(rectot - sum) / rectot) <= tol) {\n        keys.sort((a, b) => record[b] - record[a]);\n        let remainder = 0\n        for (let i = 0; i < keys.length; i++) {\n            let num1 = (rectot / sum) * parseFloat(record[keys[i]]) + remainder\n            let num2 = Math.round(num1)\n            remainder = num1 - num2\n            record[keys[i]] = num2\n        }\n    }\n}\n\nlet naics = record['NAICS_NUM']\nnaics = '' + naics\n\nconst RECORD_TYP_TXT = record['RECORD_TYP_TXT']\nlet TYPOP = record['TYPOP_WHSL_OLD_NUM']\nlet TAXSTAT = record['TAXSTAT']\n\nfor (let i in msg.cache['UNIT_BALANCE']) {\n    let unitBalance = msg.cache['UNIT_BALANCE'][i]\n    if (checkNaics(unitBalance, naics, RECORD_TYP_TXT, TYPOP, TAXSTAT)) {\n        let tot = unitBalance['TOTAL']\n        let rectot = 0\n        if ([100, '100'].includes(tot)) {\n            rectot = 100\n        } else {\n            if (!Number.isNaN(parseFloat(record[tot]))) {\n                rectot = parseFloat(record[tot])\n            }\n            // else {\n            //     record[tot] = 0\n            // }\n        }\n        let name_f = tot + '_F'\n        let [sum, keys] = sumRow(unitBalance)\n        sum = parseFloat(sum)\n        // let name = 'DET_' + tot\n        // record[name] = sum\n\n        // begin fail logic\n        if (rectot === sum && sum != 0) {\n            record['ACTION'] = 'Go To: Main Routing'\n            // global.set('action', 'Go To: Main Routing')\n        } else {\n            const tolerance = parseFloat(unitBalance['Tolerance'])\n            if (sum > 0 && rectot <= 0) {\n                record[tot] = sum\n                if (record[name_f] && record[name_f].length >= 3) {\n                    record[name_f] = record[name_f].substring(0, 2) + 'L' + record[name_f].substring(3);\n                } else if (record[name_f] && record[name_f].length >= 2) {\n                    record[name_f] = record[name_f].substring(0, 2) + 'L';\n                } else if (record[name_f] && record[name_f].length >= 1) {\n                    record[name_f] = record[name_f].substring(0, 1) + ' L';\n                } else {\n                    record[name_f] = '  L';\n                }\n            } else if (sum == 0 && rectot > 0) {\n                // raking(rectot, sum, keys, tolerance)\n                for (let i = 0; i < keys.length; i++) {\n                    let det_f = keys[i] + '_F'\n                    if (record[det_f] && record[det_f].length >= 3) {\n                        record[det_f] = record[det_f].substring(0, 2) + 'X' + record[det_f].substring(3);\n                    } else if (record[det_f] && record[det_f].length >= 2) {\n                        record[det_f] = record[det_f].substring(0, 2) + 'X';\n                    } else if (record[det_f] && record[det_f].length >= 1) {\n                        record[det_f] = record[det_f].substring(0, 1) + ' X';\n                    } else {\n                        record[det_f] = '  X';\n                    }\n                }\n            } else if (sum > 0 && rectot > 0) {\n                // check range\n                if ((Math.abs(rectot - sum) / rectot) <= tolerance) {\n                    let flag_check1 = ''\n                    try {\n                        if (['P', 'C', 'A', 'S', 'O', 'E', 'F'].includes(record[name_f].substring(1, 2))) {\n                            flag_check1 = 'Yes'\n                        }\n                    } catch {\n                        console.log('flag column does not exist: ' + name_f)\n                    }\n                    let flag_check2 = ''\n                    for (let i = 0; i < keys.length; i++) {\n                        let det_f = keys[i] + '_F'\n                        try {\n                            if (['P', 'C', 'A', 'S', 'O', 'E', 'F'].includes(record[det_f].substring(1, 2))) {\n                                flag_check2 = 'Yes'\n                            }\n                        } catch {\n                            console.log('flag column does not exist: ' + det_f)\n                        }\n                    }\n                    if (flag_check2 == 'Yes') {\n                        record[tot] = sum\n                        if (record[name_f] && record[name_f].length >= 3) {\n                            record[name_f] = record[name_f].substring(0, 2) + 'L' + record[name_f].substring(3);\n                        } else if (record[name_f] && record[name_f].length >= 2) {\n                            record[name_f] = record[name_f].substring(0, 2) + 'L';\n                        } else if (record[name_f] && record[name_f].length >= 1) {\n                            record[name_f] = record[name_f].substring(0, 1) + ' L';\n                        } else {\n                            record[name_f] = '  L';\n                        }\n                    } else {\n                        raking(rectot, sum, keys, tolerance)\n                        for (let i = 0; i < keys.length; i++) {\n                            let det_f = keys[i] + '_F'\n                            if (record[det_f] && record[det_f].length >= 3) {\n                                record[det_f] = record[det_f].substring(0, 2) + 'K' + record[det_f].substring(3);\n                            } else if (record[det_f] && record[det_f].length >= 2) {\n                                record[det_f] = record[det_f].substring(0, 2) + 'K';\n                            } else if (record[det_f] && record[det_f].length >= 1) {\n                                record[det_f] = record[det_f].substring(0, 1) + ' K';\n                            } else {\n                                record[det_f] = '  K';\n                            }\n                        }\n                    }\n                } else {\n                    // raking(rectot, sum, keys, tolerance)\n                    for (let i = 0; i < keys.length; i++) {\n                        let variable = keys[i]\n                        if (Number.isNaN(parseFloat(record[variable]))) {\n                            continue;\n                        }\n                        let det_f = keys[i] + '_F'\n                        if (record[det_f] && record[det_f].length >= 3) {\n                            record[det_f] = record[det_f].substring(0, 2) + 'X' + record[det_f].substring(3);\n                        } else if (record[det_f] && record[det_f].length >= 2) {\n                            record[det_f] = record[det_f].substring(0, 2) + 'X';\n                        } else if (record[det_f] && record[det_f].length >= 1) {\n                            record[det_f] = record[det_f].substring(0, 1) + ' X';\n                        } else {\n                            record[det_f] = '  X';\n                        }\n                    }\n                }\n            } else if (sum == 0 && rectot <= 0) {\n                if (record[name_f] && record[name_f].length >= 3) {\n                    record[name_f] = record[name_f].substring(0, 2) + 'X' + record[name_f].substring(3);\n                } else if (record[name_f] && record[name_f].length >= 2) {\n                    record[name_f] = record[name_f].substring(0, 2) + 'X';\n                } else if (record[name_f] && record[name_f].length >= 1) {\n                    record[name_f] = record[name_f].substring(0, 1) + ' X';\n                } else {\n                    record[name_f] = '  X';\n                }\n\n                for (let i = 0; i < keys.length; i++) {\n                    let det_f = keys[i] + '_F'\n                    if (record[det_f] && record[det_f].length >= 3) {\n                        record[det_f] = record[det_f].substring(0, 2) + 'X' + record[det_f].substring(3);\n                    } else if (record[det_f] && record[det_f].length >= 2) {\n                        record[det_f] = record[det_f].substring(0, 2) + 'X';\n                    } else if (record[det_f] && record[det_f].length >= 1) {\n                        record[det_f] = record[det_f].substring(0, 1) + ' X';\n                    } else {\n                        record[det_f] = '  X';\n                    }\n                }\n            } else {\n            }\n        }\n    }\n}\n\nrecord['ACTION'] = 'Go To: Main Routing'\n// global.set('action', 'Go To: Main Routing')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 280,
        "wires": [
            [
                "0adad313378dfbc6",
                "9988694dd625e1cd"
            ]
        ]
    },
    {
        "id": "7524317b716e4316",
        "type": "link in",
        "z": "cd5dca18afec6561",
        "name": "Got Batchmode 2",
        "links": [
            "8eb6f6b4ca5cb88d",
            "d6116234e9829874"
        ],
        "x": 165,
        "y": 280,
        "wires": [
            [
                "d8442184f4563e70"
            ]
        ]
    },
    {
        "id": "9aee892d0909f5a2",
        "type": "link out",
        "z": "cd5dca18afec6561",
        "name": "link out gotQBES",
        "mode": "link",
        "links": [
            "8ad2ab7c27d8d248"
        ],
        "x": 1305,
        "y": 280,
        "wires": []
    },
    {
        "id": "0adad313378dfbc6",
        "type": "debug",
        "z": "cd5dca18afec6561",
        "name": "Results",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 360,
        "wires": []
    },
    {
        "id": "d8442184f4563e70",
        "type": "change",
        "z": "cd5dca18afec6561",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.lookup",
                "pt": "msg",
                "to": "{\"moduleName\":\"balance\",\"program\":\"aies\",\"unit_type\":\"estab\",\"params\":\"unit_balance\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 280,
        "wires": [
            [
                "c0a9e032612eefc4"
            ]
        ]
    },
    {
        "id": "c0a9e032612eefc4",
        "type": "subflow:0be109393cb5f28a",
        "z": "cd5dca18afec6561",
        "name": "",
        "x": 590,
        "y": 280,
        "wires": [
            [
                "30cba14a34807b8f"
            ]
        ]
    },
    {
        "id": "9988694dd625e1cd",
        "type": "function",
        "z": "cd5dca18afec6561",
        "name": "Check and udpate Recipe",
        "func": "// msg.payload.recipe.currentStepIndex = msg.payload.recipe.currentStepIndex + 1\nmsg.payload.facts =  msg.payload.csv\n// msg.payload.results.fact = msg.payload.csv[global.get(\"ptrModuleFacts\")]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 280,
        "wires": [
            [
                "9aee892d0909f5a2",
                "5f40acc0f51bf3a2"
            ]
        ]
    },
    {
        "id": "f0c5660583e686c0",
        "type": "link in",
        "z": "cd5dca18afec6561",
        "name": "Interactive Mode Batch Mode 2 UI Input",
        "links": [
            "6982bc340b585149"
        ],
        "x": 165,
        "y": 360,
        "wires": [
            [
                "d8442184f4563e70"
            ]
        ]
    },
    {
        "id": "5f40acc0f51bf3a2",
        "type": "link out",
        "z": "cd5dca18afec6561",
        "name": "link out 65",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 1305,
        "y": 340,
        "wires": []
    },
    {
        "id": "4ddcca6cfb35501a",
        "type": "function",
        "z": "de517a9172230cbe",
        "name": "AIES NAPCS PREP",
        "func": "function AIESNAPCSPrep(){\n    if(record?.NAICS_SECTOR == '31' && record?.SUBSAMP_IND_TXT != 'MC'){\n        // call Reset NAPCS\n        // call Imputing with Historic NAPCS\n        let NAPCS_BLTOT = record?.reduce((sum, item) => {\n            return item.PROD_CODE.substring(6, 9) === '000' ? sum + item.PROD_CODE_VAL : sum;\n        }, 0);\n\n        let NAPCS_BAL = record?.RCPT_TOT_VAL - NAPCS_BLTOT;\n\n        let NAPCS_PRM = record?.reduce((sum, item) => {\n            return item.PROD_CODE.substring(0, 1) === '2' ? sum + item.PROD_CODE_VAL : sum;\n        }, 0);\n\n        let NAPCS_OTH = record?.reduce((sum, item) => {\n            return item.PROD_CODE.substring(0, 1) < '2' ? sum + item.PROD_CODE_VAL : sum;\n        }, 0);\n\n        let sumOfSpecificPROD_CODE_VAL = record?.reduce((sum, item) => {\n            return item.PROD_CODE.substring(0, 7) === '9000000' ? sum + item.PROD_CODE_VAL : sum;\n        }, 0);\n    }\n    \n}",
        "outputs": 1,
        "noerr": 19,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 320,
        "wires": [
            [
                "33026067404b94f9"
            ]
        ]
    },
    {
        "id": "1cd1d79faa68ac91",
        "type": "link in",
        "z": "de517a9172230cbe",
        "name": "AIES NAPCS PREP Link",
        "links": [],
        "x": 775,
        "y": 320,
        "wires": [
            [
                "4ddcca6cfb35501a"
            ]
        ]
    },
    {
        "id": "33026067404b94f9",
        "type": "link out",
        "z": "de517a9172230cbe",
        "name": "link out 87",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1"
        ],
        "x": 1045,
        "y": 320,
        "wires": []
    },
    {
        "id": "1c611eb0c30a9863",
        "type": "link in",
        "z": "3248e82e44cba772",
        "name": "link in 47",
        "links": [
            "cede3264bdcd0a70",
            "36c4687d5f1bee6b",
            "b9b9acc35bdd0b75"
        ],
        "x": 245,
        "y": 320,
        "wires": [
            [
                "1a56cedc7b9501e1"
            ]
        ]
    },
    {
        "id": "daa2e09cc7fbb842",
        "type": "link out",
        "z": "3248e82e44cba772",
        "name": "link out classification",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 1095,
        "y": 320,
        "wires": []
    },
    {
        "id": "a47059fee83d8264",
        "type": "subflow:89f071f1deb9a1b1",
        "z": "3248e82e44cba772",
        "name": "",
        "x": 940,
        "y": 320,
        "wires": [
            [
                "daa2e09cc7fbb842"
            ]
        ]
    },
    {
        "id": "1a56cedc7b9501e1",
        "type": "change",
        "z": "3248e82e44cba772",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.lookup",
                "pt": "msg",
                "to": "{\"moduleName\":\"electric_energy\",\"program\":\"aies\",\"unit_type\":\"estab\",\"params\":\"electric_energy_module\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 320,
        "wires": [
            [
                "e9d981f6b2f55e86"
            ]
        ]
    },
    {
        "id": "e9d981f6b2f55e86",
        "type": "subflow:0be109393cb5f28a",
        "z": "3248e82e44cba772",
        "name": "",
        "x": 690,
        "y": 320,
        "wires": [
            [
                "a47059fee83d8264"
            ]
        ]
    },
    {
        "id": "3f936d74a59fd02d",
        "type": "link in",
        "z": "624a1e6caab6a819",
        "name": "link in 13",
        "links": [
            "dc2a2ca809797dbd",
            "8e91643b66472855"
        ],
        "x": 335,
        "y": 320,
        "wires": [
            [
                "1001b705b43e55b4"
            ]
        ]
    },
    {
        "id": "edf06df5cb8410e9",
        "type": "link out",
        "z": "624a1e6caab6a819",
        "name": "link out 14",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 605,
        "y": 320,
        "wires": []
    },
    {
        "id": "1001b705b43e55b4",
        "type": "subflow:20d530cc0b193752",
        "z": "624a1e6caab6a819",
        "name": "",
        "x": 470,
        "y": 320,
        "wires": [
            [
                "edf06df5cb8410e9"
            ]
        ]
    },
    {
        "id": "95217c8ed8e79881",
        "type": "link in",
        "z": "5e1a962405c84d2b",
        "name": "link in 15",
        "links": [
            "a42aa429654aa772",
            "db3b91da76ec41a9"
        ],
        "x": 355,
        "y": 120,
        "wires": [
            [
                "1bda409d2c3f25ba"
            ]
        ]
    },
    {
        "id": "02482c164222726b",
        "type": "link out",
        "z": "5e1a962405c84d2b",
        "name": "link out 15",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 685,
        "y": 120,
        "wires": []
    },
    {
        "id": "1bda409d2c3f25ba",
        "type": "subflow:c54bc77310ce263a",
        "z": "5e1a962405c84d2b",
        "name": "",
        "x": 510,
        "y": 120,
        "wires": [
            [
                "02482c164222726b"
            ]
        ]
    },
    {
        "id": "2eee0041d9d93424",
        "type": "link in",
        "z": "2245e192a734f1bb",
        "name": "link in 21",
        "links": [
            "81f5d75ffbcd549e",
            "55c9e7195d7f2786"
        ],
        "x": 575,
        "y": 300,
        "wires": [
            [
                "3bb1c04de6dd0a22"
            ]
        ]
    },
    {
        "id": "eb575c3f71964e1e",
        "type": "link out",
        "z": "2245e192a734f1bb",
        "name": "link out 18",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 865,
        "y": 300,
        "wires": []
    },
    {
        "id": "3bb1c04de6dd0a22",
        "type": "subflow:aadaa91727c0d579",
        "z": "2245e192a734f1bb",
        "name": "",
        "x": 720,
        "y": 300,
        "wires": [
            [
                "eb575c3f71964e1e"
            ]
        ]
    },
    {
        "id": "8feba05e91ff48f3",
        "type": "link in",
        "z": "0a014270e6816fdf",
        "name": "link in 22",
        "links": [
            "b1540f3459d95049",
            "51e14578de8e4e73"
        ],
        "x": 215,
        "y": 240,
        "wires": [
            [
                "11714487a76a3d36"
            ]
        ]
    },
    {
        "id": "f7e7a2a2e4eb195a",
        "type": "link out",
        "z": "0a014270e6816fdf",
        "name": "link out 19",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 445,
        "y": 240,
        "wires": []
    },
    {
        "id": "11714487a76a3d36",
        "type": "subflow:42be4655fd3a8c84",
        "z": "0a014270e6816fdf",
        "name": "",
        "x": 330,
        "y": 240,
        "wires": [
            [
                "f7e7a2a2e4eb195a"
            ]
        ]
    },
    {
        "id": "8807ce2046dc8a32",
        "type": "link in",
        "z": "a51d10c50d9dbbe0",
        "name": "link in 27",
        "links": [
            "cd8a05808eedb5f3",
            "9b4f297579e277a4"
        ],
        "x": 295,
        "y": 180,
        "wires": [
            [
                "45eb8a37ebc4e2d8"
            ]
        ]
    },
    {
        "id": "d6c45ec5ceb3d90d",
        "type": "link out",
        "z": "a51d10c50d9dbbe0",
        "name": "link out 21",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 595,
        "y": 180,
        "wires": []
    },
    {
        "id": "45eb8a37ebc4e2d8",
        "type": "subflow:5eae5184a8f175fd",
        "z": "a51d10c50d9dbbe0",
        "name": "",
        "x": 430,
        "y": 180,
        "wires": [
            [
                "d6c45ec5ceb3d90d"
            ]
        ]
    },
    {
        "id": "b16c9d56493fb914",
        "type": "link in",
        "z": "f06fc99b8cb78464",
        "name": "link in 49",
        "links": [
            "cede3264bdcd0a70",
            "36c4687d5f1bee6b",
            "d5aac8a297ee6dd2"
        ],
        "x": 695,
        "y": 300,
        "wires": [
            [
                "9444a660b8b3c23e"
            ]
        ]
    },
    {
        "id": "42f918976305a0a4",
        "type": "link out",
        "z": "f06fc99b8cb78464",
        "name": "link out classification",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 945,
        "y": 300,
        "wires": []
    },
    {
        "id": "9444a660b8b3c23e",
        "type": "subflow:7c71f52633d8c794",
        "z": "f06fc99b8cb78464",
        "name": "",
        "x": 820,
        "y": 300,
        "wires": [
            [
                "42f918976305a0a4"
            ]
        ]
    },
    {
        "id": "76691f5ac3362ba9",
        "type": "link in",
        "z": "0e31453ffacd3b3c",
        "name": "link in 51",
        "links": [
            "cede3264bdcd0a70",
            "36c4687d5f1bee6b",
            "28494dbc74f30091"
        ],
        "x": 655,
        "y": 140,
        "wires": [
            [
                "b525b8d500819cf7"
            ]
        ]
    },
    {
        "id": "a6250f4cc9b410d4",
        "type": "link out",
        "z": "0e31453ffacd3b3c",
        "name": "link out classification",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 975,
        "y": 140,
        "wires": []
    },
    {
        "id": "b525b8d500819cf7",
        "type": "subflow:4781d07fda613850",
        "z": "0e31453ffacd3b3c",
        "name": "",
        "x": 810,
        "y": 140,
        "wires": [
            [
                "a6250f4cc9b410d4"
            ]
        ]
    },
    {
        "id": "b9aedad7e15bc0ed",
        "type": "link in",
        "z": "0a690414bffb7c2e",
        "name": "link in 50",
        "links": [
            "cede3264bdcd0a70",
            "36c4687d5f1bee6b",
            "5d05b108e4e3f722"
        ],
        "x": 545,
        "y": 200,
        "wires": [
            [
                "69d537b3cfab5e55"
            ]
        ]
    },
    {
        "id": "86f363969a0f8d77",
        "type": "link out",
        "z": "0a690414bffb7c2e",
        "name": "link out classification",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 795,
        "y": 200,
        "wires": []
    },
    {
        "id": "69d537b3cfab5e55",
        "type": "subflow:253763f13152858b",
        "z": "0a690414bffb7c2e",
        "name": "",
        "x": 680,
        "y": 200,
        "wires": [
            [
                "86f363969a0f8d77"
            ]
        ]
    },
    {
        "id": "447f05b7589104a7",
        "type": "link in",
        "z": "10a17d9f63b31aef",
        "name": "NONNORM: Init Set ACTVMIO & OPSTATS Link",
        "links": [
            "48c2bbd321b77688"
        ],
        "x": 535,
        "y": 200,
        "wires": [
            [
                "5df7927f5db4e60e"
            ]
        ]
    },
    {
        "id": "01595edbd5bb3ca9",
        "type": "link out",
        "z": "10a17d9f63b31aef",
        "name": "link out 66",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 905,
        "y": 200,
        "wires": []
    },
    {
        "id": "5df7927f5db4e60e",
        "type": "subflow:f9a2a2262f95bae3",
        "z": "10a17d9f63b31aef",
        "name": "",
        "x": 720,
        "y": 200,
        "wires": [
            [
                "01595edbd5bb3ca9"
            ]
        ]
    },
    {
        "id": "918d1db8979aef15",
        "type": "link in",
        "z": "0a29fbfc598a6eb6",
        "name": "NONNORM: Router Link",
        "links": [
            "a0a9a69afb297619"
        ],
        "x": 225,
        "y": 260,
        "wires": [
            [
                "a22f9b7c905c3c4f"
            ]
        ]
    },
    {
        "id": "ada77cfa9573c816",
        "type": "link out",
        "z": "0a29fbfc598a6eb6",
        "name": "link out 67",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 545,
        "y": 260,
        "wires": []
    },
    {
        "id": "a22f9b7c905c3c4f",
        "type": "subflow:b93bf22bc3258992",
        "z": "0a29fbfc598a6eb6",
        "name": "",
        "x": 390,
        "y": 260,
        "wires": [
            [
                "ada77cfa9573c816"
            ]
        ]
    },
    {
        "id": "7439226c767a87a3",
        "type": "link in",
        "z": "1ff0abce01e8a9b4",
        "name": "NONNORM: Set OPSTATS & ACTVMIO Link",
        "links": [
            "879c5a04e7f7b3ba"
        ],
        "x": 555,
        "y": 180,
        "wires": [
            [
                "6f80af51c885e7b1"
            ]
        ]
    },
    {
        "id": "9fe7f21d3c9037a4",
        "type": "link out",
        "z": "1ff0abce01e8a9b4",
        "name": "link out 68",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 905,
        "y": 180,
        "wires": []
    },
    {
        "id": "6f80af51c885e7b1",
        "type": "subflow:a661e33a6e4be4fe",
        "z": "1ff0abce01e8a9b4",
        "name": "",
        "x": 730,
        "y": 180,
        "wires": [
            [
                "9fe7f21d3c9037a4"
            ]
        ]
    },
    {
        "id": "bc67815db9dee1e7",
        "type": "link in",
        "z": "749f57d4ab869e77",
        "name": "NONNORM: Set NONORM Link",
        "links": [
            "601d06243349006e"
        ],
        "x": 605,
        "y": 160,
        "wires": [
            [
                "3a9a26d917d13d8d"
            ]
        ]
    },
    {
        "id": "daf2afc7f182f934",
        "type": "link out",
        "z": "749f57d4ab869e77",
        "name": "link out 69",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 905,
        "y": 160,
        "wires": []
    },
    {
        "id": "3a9a26d917d13d8d",
        "type": "subflow:5251d9acce14d156",
        "z": "749f57d4ab869e77",
        "name": "",
        "x": 750,
        "y": 160,
        "wires": [
            [
                "daf2afc7f182f934"
            ]
        ]
    },
    {
        "id": "b7d9dea2a407d5ab",
        "type": "link in",
        "z": "cc39e0013d1bbd14",
        "name": "NONNORM: Router Link",
        "links": [
            "9924458ebb7935cd"
        ],
        "x": 565,
        "y": 160,
        "wires": [
            [
                "46062d8781904fcb"
            ]
        ]
    },
    {
        "id": "9343c59ba9dd4152",
        "type": "link out",
        "z": "cc39e0013d1bbd14",
        "name": "link out 70",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 915,
        "y": 160,
        "wires": []
    },
    {
        "id": "46062d8781904fcb",
        "type": "subflow:b8154c600987e319",
        "z": "cc39e0013d1bbd14",
        "name": "",
        "x": 750,
        "y": 160,
        "wires": [
            [
                "9343c59ba9dd4152"
            ]
        ]
    },
    {
        "id": "7191fc9544f07b32",
        "type": "link in",
        "z": "2214caf84b0847ec",
        "name": "NONNORM: Special Season final",
        "links": [
            "51d4f6e460537ff8"
        ],
        "x": 465,
        "y": 180,
        "wires": [
            [
                "8cf1411b0623572f"
            ]
        ]
    },
    {
        "id": "55d8b26f48ef05bd",
        "type": "link out",
        "z": "2214caf84b0847ec",
        "name": "link out 71",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 835,
        "y": 180,
        "wires": []
    },
    {
        "id": "8cf1411b0623572f",
        "type": "subflow:e1f601e2c56dfda4",
        "z": "2214caf84b0847ec",
        "name": "",
        "x": 650,
        "y": 180,
        "wires": [
            [
                "55d8b26f48ef05bd"
            ]
        ]
    },
    {
        "id": "e74d8d0f9702bdb7",
        "type": "link out",
        "z": "bb181ffb5aeab92c",
        "name": "link out 72",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 835,
        "y": 120,
        "wires": []
    },
    {
        "id": "7fd7c15cd9b5a645",
        "type": "link in",
        "z": "bb181ffb5aeab92c",
        "name": "mfg_payqtr1",
        "links": [
            "8cc4aec631b9f7ab"
        ],
        "x": 585,
        "y": 120,
        "wires": [
            [
                "244fe14c689939c9"
            ]
        ]
    },
    {
        "id": "244fe14c689939c9",
        "type": "subflow:05d1a91987f08f14",
        "z": "bb181ffb5aeab92c",
        "name": "",
        "x": 710,
        "y": 120,
        "wires": [
            [
                "e74d8d0f9702bdb7"
            ]
        ]
    },
    {
        "id": "d638deea262939f1",
        "type": "link in",
        "z": "83d1ac7cb83077ea",
        "name": "mfg_payann",
        "links": [
            "6e0891f1d9b0f50b"
        ],
        "x": 625,
        "y": 300,
        "wires": [
            [
                "a4abbb5185e48558"
            ]
        ]
    },
    {
        "id": "b72ac573a0a35c8a",
        "type": "link out",
        "z": "83d1ac7cb83077ea",
        "name": "link out 73",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 895,
        "y": 300,
        "wires": []
    },
    {
        "id": "a4abbb5185e48558",
        "type": "subflow:48bdd199705157b9",
        "z": "83d1ac7cb83077ea",
        "name": "",
        "x": 750,
        "y": 300,
        "wires": [
            [
                "b72ac573a0a35c8a"
            ]
        ]
    },
    {
        "id": "c6e825877bca50ae",
        "type": "link in",
        "z": "c2d60c8918a1622a",
        "name": "mfg_empq1",
        "links": [
            "405380585cc28809"
        ],
        "x": 685,
        "y": 320,
        "wires": [
            [
                "81be448255c6de23"
            ]
        ]
    },
    {
        "id": "93b50ff4956eb444",
        "type": "link out",
        "z": "c2d60c8918a1622a",
        "name": "link out 74",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 925,
        "y": 320,
        "wires": []
    },
    {
        "id": "81be448255c6de23",
        "type": "subflow:9f8b85fce167ad51",
        "z": "c2d60c8918a1622a",
        "name": "",
        "x": 810,
        "y": 320,
        "wires": [
            [
                "93b50ff4956eb444"
            ]
        ]
    },
    {
        "id": "8bc3b4ce5f96ef53",
        "type": "link in",
        "z": "fe75af5be53552a9",
        "name": "NAPCS HDICAT Link",
        "links": [
            "f96645ae14ef8fb7"
        ],
        "x": 645,
        "y": 400,
        "wires": [
            [
                "1e4c9d1cf7b9c6de"
            ]
        ]
    },
    {
        "id": "91b34f7b64e183bd",
        "type": "link out",
        "z": "fe75af5be53552a9",
        "name": "link out 88",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1"
        ],
        "x": 975,
        "y": 400,
        "wires": []
    },
    {
        "id": "1e4c9d1cf7b9c6de",
        "type": "subflow:b3b1701e035827dc",
        "z": "fe75af5be53552a9",
        "name": "",
        "x": 820,
        "y": 400,
        "wires": [
            [
                "91b34f7b64e183bd"
            ]
        ]
    },
    {
        "id": "23a30ef7226c1c9c",
        "type": "link in",
        "z": "6ca99eb94adab0b6",
        "name": "NAPCS NODONOR Link",
        "links": [
            "628a357ebf92b85e"
        ],
        "x": 585,
        "y": 140,
        "wires": [
            [
                "2a88fb912978f3bc"
            ]
        ]
    },
    {
        "id": "b8f1ae7b487a68f6",
        "type": "link out",
        "z": "6ca99eb94adab0b6",
        "name": "link out 89",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1"
        ],
        "x": 928.05126953125,
        "y": 140.18634033203125,
        "wires": []
    },
    {
        "id": "2a88fb912978f3bc",
        "type": "subflow:4b2a066dec42e6f4",
        "z": "6ca99eb94adab0b6",
        "name": "",
        "x": 750,
        "y": 140,
        "wires": [
            [
                "b8f1ae7b487a68f6"
            ]
        ]
    },
    {
        "id": "ebd6fd2b33dd0765",
        "type": "link in",
        "z": "5f0ae7529035d4ee",
        "name": "NAPCS RECALCULATE Link",
        "links": [
            "13026c6f9554fd48"
        ],
        "x": 575,
        "y": 120,
        "wires": [
            [
                "63d111ccee4dd4bd"
            ]
        ]
    },
    {
        "id": "b2edc9dbdd9af134",
        "type": "link out",
        "z": "5f0ae7529035d4ee",
        "name": "link out 91",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1"
        ],
        "x": 995,
        "y": 120,
        "wires": []
    },
    {
        "id": "63d111ccee4dd4bd",
        "type": "subflow:e77217f4bfc52a38",
        "z": "5f0ae7529035d4ee",
        "name": "",
        "x": 780,
        "y": 120,
        "wires": [
            [
                "b2edc9dbdd9af134"
            ]
        ]
    },
    {
        "id": "aca56c4b68c05d08",
        "type": "link in",
        "z": "601cd75dc2c42d32",
        "name": "NAPCS BL ROUNDING Link",
        "links": [
            "184f643c8c0c9483"
        ],
        "x": 675,
        "y": 80,
        "wires": [
            [
                "f8dd3df2bd97bba6"
            ]
        ]
    },
    {
        "id": "b206e07710f5e28f",
        "type": "link out",
        "z": "601cd75dc2c42d32",
        "name": "link out 92",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1"
        ],
        "x": 975,
        "y": 80,
        "wires": []
    },
    {
        "id": "f8dd3df2bd97bba6",
        "type": "subflow:fbb1e70dfe5fe82f",
        "z": "601cd75dc2c42d32",
        "name": "",
        "x": 820,
        "y": 80,
        "wires": [
            [
                "b206e07710f5e28f"
            ]
        ]
    },
    {
        "id": "5749501cd685bc0c",
        "type": "link in",
        "z": "05f553d24173a3fe",
        "name": "NAPCS Balancing Link",
        "links": [
            "03b4a30c8b73aaa1"
        ],
        "x": 305,
        "y": 120,
        "wires": [
            [
                "c4afb9e4495acabb"
            ]
        ]
    },
    {
        "id": "d23c27e777f90ccd",
        "type": "link out",
        "z": "05f553d24173a3fe",
        "name": "link out 86",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1"
        ],
        "x": 1245,
        "y": 120,
        "wires": []
    },
    {
        "id": "c4afb9e4495acabb",
        "type": "change",
        "z": "05f553d24173a3fe",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.lookup",
                "pt": "msg",
                "to": "{\"moduleName\":\"naics\",\"program\":\"aies\",\"unit_type\":\"all\",\"params\":\"naics_tolerance\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 120,
        "wires": [
            [
                "37c7607695a89691"
            ]
        ]
    },
    {
        "id": "37c7607695a89691",
        "type": "subflow:0be109393cb5f28a",
        "z": "05f553d24173a3fe",
        "name": "",
        "x": 770,
        "y": 120,
        "wires": [
            [
                "2d33567cedf1c562"
            ]
        ]
    },
    {
        "id": "2d33567cedf1c562",
        "type": "subflow:c706d1ca2706f3bf",
        "z": "05f553d24173a3fe",
        "name": "",
        "x": 1060,
        "y": 120,
        "wires": [
            [
                "d23c27e777f90ccd"
            ]
        ]
    },
    {
        "id": "c4f38f25a401fb78",
        "type": "subflow:0be109393cb5f28a",
        "z": "184cce6ee0df3c6f",
        "name": "",
        "x": 870,
        "y": 200,
        "wires": [
            [
                "b4d2112570c75329"
            ]
        ]
    },
    {
        "id": "74648299b2662bf4",
        "type": "change",
        "z": "184cce6ee0df3c6f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.lookup",
                "pt": "msg",
                "to": "{\"moduleName\":\"inv_reserve\",\"program\":\"aies\",\"unit_type\":\"estab\",\"params\":\"inv_reserve\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 200,
        "wires": [
            [
                "c4f38f25a401fb78"
            ]
        ]
    },
    {
        "id": "2e8dc577c6d85be5",
        "type": "link in",
        "z": "184cce6ee0df3c6f",
        "name": "NAPCS Balance Link",
        "links": [
            "f2d1653b5ba3e5d2"
        ],
        "x": 425,
        "y": 200,
        "wires": [
            [
                "74648299b2662bf4"
            ]
        ]
    },
    {
        "id": "bb4dba28bc4486e1",
        "type": "link out",
        "z": "184cce6ee0df3c6f",
        "name": "link out 85",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1"
        ],
        "x": 1225,
        "y": 200,
        "wires": []
    },
    {
        "id": "b4d2112570c75329",
        "type": "subflow:d32a58c0544f501c",
        "z": "184cce6ee0df3c6f",
        "name": "",
        "x": 1100,
        "y": 200,
        "wires": [
            [
                "bb4dba28bc4486e1"
            ]
        ]
    },
    {
        "id": "61e767d06ab72a43",
        "type": "link in",
        "z": "05f39827e3106c22",
        "name": "MIV: NonLIFORANDOMModule Link",
        "links": [
            "9a0ffed7eefbb31e"
        ],
        "x": 615,
        "y": 80,
        "wires": [
            [
                "42e9d0a9115ef172"
            ]
        ]
    },
    {
        "id": "e75b332d63ba3e20",
        "type": "link out",
        "z": "05f39827e3106c22",
        "name": "link out 84",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1"
        ],
        "x": 975,
        "y": 80,
        "wires": []
    },
    {
        "id": "42e9d0a9115ef172",
        "type": "subflow:6f23d11cf5bb4bde",
        "z": "05f39827e3106c22",
        "name": "",
        "x": 790,
        "y": 80,
        "wires": [
            [
                "e75b332d63ba3e20"
            ]
        ]
    },
    {
        "id": "d81c18d7166b9e59",
        "type": "link in",
        "z": "306dda6a5dd83c4d",
        "name": "MIV: EvaluateNoNLIFOValuationMethodModule Link",
        "links": [
            "17eb7e821e3b7ea0"
        ],
        "x": 565,
        "y": 120,
        "wires": [
            [
                "a662db33cf9fb773"
            ]
        ]
    },
    {
        "id": "c79880fef432a005",
        "type": "link out",
        "z": "306dda6a5dd83c4d",
        "name": "link out 83",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1"
        ],
        "x": 1035,
        "y": 120,
        "wires": []
    },
    {
        "id": "a662db33cf9fb773",
        "type": "subflow:625b8c982fed66b7",
        "z": "306dda6a5dd83c4d",
        "name": "",
        "x": 800,
        "y": 120,
        "wires": [
            [
                "c79880fef432a005"
            ]
        ]
    },
    {
        "id": "e0fccd45e6604bda",
        "type": "link in",
        "z": "ad669800801ee84f",
        "name": "MIV: EvaluateDetailValuationMethods Link",
        "links": [
            "ff930476a898868c"
        ],
        "x": 565,
        "y": 80,
        "wires": [
            [
                "2731df84fc2e0f25"
            ]
        ]
    },
    {
        "id": "0b0f86b61f9edc20",
        "type": "link out",
        "z": "ad669800801ee84f",
        "name": "link out 82",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1"
        ],
        "x": 995,
        "y": 80,
        "wires": []
    },
    {
        "id": "2731df84fc2e0f25",
        "type": "subflow:3e0275f580e2d77c",
        "z": "ad669800801ee84f",
        "name": "",
        "x": 790,
        "y": 80,
        "wires": [
            [
                "0b0f86b61f9edc20"
            ]
        ]
    },
    {
        "id": "c72b098afa64f560",
        "type": "link in",
        "z": "f75347023218039f",
        "name": "MIV: EvaluateNoNLIFOValuationMethodsModule Link",
        "links": [
            "ac696618fbdb5b2b"
        ],
        "x": 575,
        "y": 80,
        "wires": [
            [
                "88a6f7156537b626"
            ]
        ]
    },
    {
        "id": "8be3531210d71bdc",
        "type": "link out",
        "z": "f75347023218039f",
        "name": "link out 81",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1"
        ],
        "x": 1065,
        "y": 80,
        "wires": []
    },
    {
        "id": "88a6f7156537b626",
        "type": "subflow:0ab9d9d713d5103c",
        "z": "f75347023218039f",
        "name": "",
        "x": 820,
        "y": 80,
        "wires": [
            [
                "8be3531210d71bdc"
            ]
        ]
    },
    {
        "id": "b55a0bc87142a940",
        "type": "link in",
        "z": "944313b2df8d5d35",
        "name": "MIV: NONLIFOValuationMethodsModule Link",
        "links": [
            "6a7a578fbd272b1f"
        ],
        "x": 545,
        "y": 80,
        "wires": [
            [
                "b192f1feeb177667"
            ]
        ]
    },
    {
        "id": "641e46c32d5b58f3",
        "type": "link out",
        "z": "944313b2df8d5d35",
        "name": "link out 80",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1"
        ],
        "x": 1015,
        "y": 80,
        "wires": []
    },
    {
        "id": "b192f1feeb177667",
        "type": "subflow:379e12b168b021d1",
        "z": "944313b2df8d5d35",
        "name": "",
        "x": 780,
        "y": 80,
        "wires": [
            [
                "641e46c32d5b58f3"
            ]
        ]
    },
    {
        "id": "f64b690f11b0f463",
        "type": "link in",
        "z": "f61aed28e038a8f6",
        "name": "MIV: Evaluate LIFO Module Link",
        "links": [
            "6e4d6926b48c4bfc"
        ],
        "x": 315,
        "y": 480,
        "wires": [
            [
                "b3c3dbb9ddb5784d"
            ]
        ]
    },
    {
        "id": "e608a1d198c82a60",
        "type": "link out",
        "z": "f61aed28e038a8f6",
        "name": "link out 79",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1"
        ],
        "x": 1155,
        "y": 480,
        "wires": []
    },
    {
        "id": "e76d4c9e9aa28d28",
        "type": "subflow:0be109393cb5f28a",
        "z": "f61aed28e038a8f6",
        "name": "",
        "x": 730,
        "y": 480,
        "wires": [
            [
                "7a4f1cd36c412a40"
            ]
        ]
    },
    {
        "id": "b3c3dbb9ddb5784d",
        "type": "change",
        "z": "f61aed28e038a8f6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.lookup",
                "pt": "msg",
                "to": "{\"moduleName\":\"inv_reserve\",\"program\":\"aies\",\"unit_type\":\"estab\",\"params\":\"inv_reserve\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 480,
        "wires": [
            [
                "e76d4c9e9aa28d28"
            ]
        ]
    },
    {
        "id": "7a4f1cd36c412a40",
        "type": "subflow:c65f463988b11e12",
        "z": "f61aed28e038a8f6",
        "name": "",
        "x": 990,
        "y": 480,
        "wires": [
            [
                "e608a1d198c82a60"
            ]
        ]
    },
    {
        "id": "62eb4cacd21b3528",
        "type": "link in",
        "z": "3ace7cf3e57a1ba5",
        "name": "MIV: Evaluate LIFO Reverse Module Link",
        "links": [
            "256113e429ce586b"
        ],
        "x": 175,
        "y": 320,
        "wires": [
            [
                "723565fcad0331db"
            ]
        ]
    },
    {
        "id": "76205591b8230183",
        "type": "link out",
        "z": "3ace7cf3e57a1ba5",
        "name": "link out 78",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1"
        ],
        "x": 1095,
        "y": 320,
        "wires": []
    },
    {
        "id": "24f61eeaf81cbbbc",
        "type": "subflow:0be109393cb5f28a",
        "z": "3ace7cf3e57a1ba5",
        "name": "",
        "x": 590,
        "y": 320,
        "wires": [
            [
                "024d9adc0a48a46a"
            ]
        ]
    },
    {
        "id": "723565fcad0331db",
        "type": "change",
        "z": "3ace7cf3e57a1ba5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.lookup",
                "pt": "msg",
                "to": "{\"moduleName\":\"inv_reserve\",\"program\":\"aies\",\"unit_type\":\"estab\",\"params\":\"inv_reserve\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 320,
        "wires": [
            [
                "24f61eeaf81cbbbc"
            ]
        ]
    },
    {
        "id": "024d9adc0a48a46a",
        "type": "subflow:17fe2bc799b77fa4",
        "z": "3ace7cf3e57a1ba5",
        "name": "",
        "x": 880,
        "y": 320,
        "wires": [
            [
                "76205591b8230183"
            ]
        ]
    },
    {
        "id": "0e055cc10b2d1df5",
        "type": "link in",
        "z": "23d58ce1d9a3a4af",
        "name": "MIV: LIFO Valuation Method Link",
        "links": [
            "961d21f9c9d6935d"
        ],
        "x": 335,
        "y": 60,
        "wires": [
            [
                "d771256cb48ed488"
            ]
        ]
    },
    {
        "id": "f34ac015feb048da",
        "type": "link out",
        "z": "23d58ce1d9a3a4af",
        "name": "link out 77",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1"
        ],
        "x": 1205,
        "y": 60,
        "wires": []
    },
    {
        "id": "25ab8754df5ee108",
        "type": "subflow:0be109393cb5f28a",
        "z": "23d58ce1d9a3a4af",
        "name": "",
        "x": 750,
        "y": 60,
        "wires": [
            [
                "a8b8a8b5330232be"
            ]
        ]
    },
    {
        "id": "d771256cb48ed488",
        "type": "change",
        "z": "23d58ce1d9a3a4af",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.lookup",
                "pt": "msg",
                "to": "{\"moduleName\":\"inv_reserve\",\"program\":\"aies\",\"unit_type\":\"estab\",\"params\":\"inv_reserve\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 60,
        "wires": [
            [
                "25ab8754df5ee108"
            ]
        ]
    },
    {
        "id": "a8b8a8b5330232be",
        "type": "subflow:7d33e2bb432d595f",
        "z": "23d58ce1d9a3a4af",
        "name": "",
        "x": 1010,
        "y": 60,
        "wires": [
            [
                "f34ac015feb048da"
            ]
        ]
    },
    {
        "id": "b2b244030212674a",
        "type": "link in",
        "z": "538d3e65e0f18773",
        "name": "MIV: Inventories Balance Link",
        "links": [
            "be79a45237eac5df"
        ],
        "x": 355,
        "y": 140,
        "wires": [
            [
                "a149aa12b074df73"
            ]
        ]
    },
    {
        "id": "290f0910bd81e94b",
        "type": "link out",
        "z": "538d3e65e0f18773",
        "name": "link out 76",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1"
        ],
        "x": 1165,
        "y": 140,
        "wires": []
    },
    {
        "id": "d0827a644fb21f89",
        "type": "subflow:0be109393cb5f28a",
        "z": "538d3e65e0f18773",
        "name": "",
        "x": 750,
        "y": 140,
        "wires": [
            [
                "cda5b0bb838b6adc"
            ]
        ]
    },
    {
        "id": "a149aa12b074df73",
        "type": "change",
        "z": "538d3e65e0f18773",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.lookup",
                "pt": "msg",
                "to": "{\"moduleName\":\"inv_reserve\",\"program\":\"aies\",\"unit_type\":\"estab\",\"params\":\"inv_reserve\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 140,
        "wires": [
            [
                "d0827a644fb21f89"
            ]
        ]
    },
    {
        "id": "cda5b0bb838b6adc",
        "type": "subflow:75eae7f006cc0f8a",
        "z": "538d3e65e0f18773",
        "name": "",
        "x": 1010,
        "y": 140,
        "wires": [
            [
                "290f0910bd81e94b"
            ]
        ]
    },
    {
        "id": "cd68a9923d85636d",
        "type": "link in",
        "z": "2eed7cf661bbf727",
        "name": "KAU To Company Additivity Check Link",
        "links": [
            "8ab5edfeddc79fdc"
        ],
        "x": 805,
        "y": 300,
        "wires": [
            [
                "d4df19e56ce67906"
            ]
        ]
    },
    {
        "id": "2b91281b80bace6b",
        "type": "link out",
        "z": "2eed7cf661bbf727",
        "name": "link out 75",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 1215,
        "y": 300,
        "wires": []
    },
    {
        "id": "d4df19e56ce67906",
        "type": "subflow:24afab78ca973c73",
        "z": "2eed7cf661bbf727",
        "name": "",
        "x": 1020,
        "y": 300,
        "wires": [
            [
                "2b91281b80bace6b"
            ]
        ]
    },
    {
        "id": "3bd1372bd16d2eb2",
        "type": "subflow:e4fb9739caef0397",
        "z": "9edb2d8ae946822f",
        "name": "",
        "x": 1070,
        "y": 120,
        "wires": [
            [
                "83cf5c1c02a121e8"
            ]
        ]
    },
    {
        "id": "83cf5c1c02a121e8",
        "type": "link out",
        "z": "9edb2d8ae946822f",
        "name": "link out classification",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 1245,
        "y": 120,
        "wires": []
    },
    {
        "id": "df20d97837fa1d09",
        "type": "link in",
        "z": "9edb2d8ae946822f",
        "name": "Unit Balance",
        "links": [
            "05b67576d444bda4"
        ],
        "x": 395,
        "y": 120,
        "wires": [
            [
                "b44b9fdec27454f0"
            ]
        ]
    },
    {
        "id": "b44b9fdec27454f0",
        "type": "change",
        "z": "9edb2d8ae946822f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.lookup",
                "pt": "msg",
                "to": "{\"moduleName\":\"balance\",\"program\":\"aies\",\"unit_type\":\"estab\",\"params\":\"unit_balance\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 120,
        "wires": [
            [
                "e429f87bbbca5ea4"
            ]
        ]
    },
    {
        "id": "e429f87bbbca5ea4",
        "type": "subflow:0be109393cb5f28a",
        "z": "9edb2d8ae946822f",
        "name": "",
        "x": 810,
        "y": 120,
        "wires": [
            [
                "3bd1372bd16d2eb2"
            ]
        ]
    },
    {
        "id": "108f9747956b439a",
        "type": "link out",
        "z": "236c2e1a5554a6f0",
        "name": "link out 61",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 1125,
        "y": 180,
        "wires": []
    },
    {
        "id": "c8919561eea2a059",
        "type": "link in",
        "z": "236c2e1a5554a6f0",
        "name": "Valid Zero Link",
        "links": [
            "45b768d58693d73d"
        ],
        "x": 345,
        "y": 180,
        "wires": [
            [
                "978e9426a1803b88"
            ]
        ]
    },
    {
        "id": "f6d4e4102317abc6",
        "type": "subflow:998aa04bd1bb677d",
        "z": "236c2e1a5554a6f0",
        "name": "",
        "x": 1000,
        "y": 180,
        "wires": [
            [
                "108f9747956b439a"
            ]
        ]
    },
    {
        "id": "978e9426a1803b88",
        "type": "change",
        "z": "236c2e1a5554a6f0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.lookup",
                "pt": "msg",
                "to": "{\"moduleName\":\"valid_zero\",\"program\":\"aies\",\"unit_type\":\"all\",\"params\":\"valid_zero\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 180,
        "wires": [
            [
                "1d9f4963787d9cc6"
            ]
        ]
    },
    {
        "id": "1d9f4963787d9cc6",
        "type": "subflow:0be109393cb5f28a",
        "z": "236c2e1a5554a6f0",
        "name": "",
        "x": 770,
        "y": 180,
        "wires": [
            [
                "f6d4e4102317abc6"
            ]
        ]
    },
    {
        "id": "25627bf820122fe8",
        "type": "link out",
        "z": "067b1d1ff9443ad3",
        "name": "link out 62",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 1175,
        "y": 120,
        "wires": []
    },
    {
        "id": "8671a6e9c3be6ad6",
        "type": "link in",
        "z": "067b1d1ff9443ad3",
        "name": "Valid Negative Value Link",
        "links": [
            "854cd7a417cbbc6e"
        ],
        "x": 405,
        "y": 120,
        "wires": [
            [
                "49bca15a17b08352"
            ]
        ]
    },
    {
        "id": "6094d4bb7aa33b22",
        "type": "subflow:c79b244779411ead",
        "z": "067b1d1ff9443ad3",
        "name": "",
        "x": 1040,
        "y": 120,
        "wires": [
            [
                "25627bf820122fe8"
            ]
        ]
    },
    {
        "id": "49bca15a17b08352",
        "type": "change",
        "z": "067b1d1ff9443ad3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.lookup",
                "pt": "msg",
                "to": "{\"moduleName\":\"valid_negative\",\"program\":\"aies\",\"unit_type\":\"all\",\"params\":\"valid_negative_value\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 120,
        "wires": [
            [
                "8a019b7abd631568"
            ]
        ]
    },
    {
        "id": "8a019b7abd631568",
        "type": "subflow:0be109393cb5f28a",
        "z": "067b1d1ff9443ad3",
        "name": "",
        "x": 830,
        "y": 120,
        "wires": [
            [
                "6094d4bb7aa33b22"
            ]
        ]
    },
    {
        "id": "b93299e2e56af480",
        "type": "link in",
        "z": "69164b36a28c9eff",
        "name": "NAPCS M GOCO Link",
        "links": [
            "23110971cf0ed68c"
        ],
        "x": 435,
        "y": 80,
        "wires": [
            [
                "e0dc4f01a62685d7"
            ]
        ]
    },
    {
        "id": "2dcb1956c632490d",
        "type": "link out",
        "z": "69164b36a28c9eff",
        "name": "link out 90",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1"
        ],
        "x": 1185,
        "y": 80,
        "wires": []
    },
    {
        "id": "ff5aebd5d103af86",
        "type": "subflow:b576348e42469acf",
        "z": "69164b36a28c9eff",
        "name": "",
        "x": 1060,
        "y": 80,
        "wires": [
            [
                "2dcb1956c632490d"
            ]
        ]
    },
    {
        "id": "b135a26127969931",
        "type": "subflow:0be109393cb5f28a",
        "z": "69164b36a28c9eff",
        "name": "",
        "x": 850,
        "y": 80,
        "wires": [
            [
                "ff5aebd5d103af86"
            ]
        ]
    },
    {
        "id": "e0dc4f01a62685d7",
        "type": "change",
        "z": "69164b36a28c9eff",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.lookup",
                "pt": "msg",
                "to": "{\"moduleName\":\"napcs\",\"program\":\"aies\",\"unit_type\":\"all\",\"params\":\"naics_to_napcs_m_goco\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 80,
        "wires": [
            [
                "b135a26127969931"
            ]
        ]
    },
    {
        "id": "6de317f273718e08",
        "type": "link out",
        "z": "4afed9425459216e",
        "name": "link out classification",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 1175,
        "y": 80,
        "wires": []
    },
    {
        "id": "a9fa566fb3fb1f74",
        "type": "link in",
        "z": "4afed9425459216e",
        "name": "link in 48",
        "links": [
            "cede3264bdcd0a70",
            "36c4687d5f1bee6b",
            "43545e3b96e7f60c"
        ],
        "x": 395,
        "y": 80,
        "wires": [
            [
                "cb2c831fb6f66b80"
            ]
        ]
    },
    {
        "id": "3c5b06b90858059c",
        "type": "subflow:27c40a87c581e266",
        "z": "4afed9425459216e",
        "name": "",
        "x": 1040,
        "y": 80,
        "wires": [
            [
                "6de317f273718e08"
            ]
        ]
    },
    {
        "id": "cb2c831fb6f66b80",
        "type": "change",
        "z": "4afed9425459216e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.lookup",
                "pt": "msg",
                "to": "{\"moduleName\":\"completeness\",\"program\":\"aies\",\"unit_type\":\"estab\",\"params\":\"pay_ann_val\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 80,
        "wires": [
            [
                "5e8a2056aa1b8d56"
            ]
        ]
    },
    {
        "id": "5e8a2056aa1b8d56",
        "type": "subflow:0be109393cb5f28a",
        "z": "4afed9425459216e",
        "name": "",
        "x": 810,
        "y": 80,
        "wires": [
            [
                "3c5b06b90858059c"
            ]
        ]
    },
    {
        "id": "57c75bd58af75621",
        "type": "link in",
        "z": "475c4bbdee672833",
        "name": "link in 20",
        "links": [
            "4a50e74e63590ec7",
            "6cd6c27ee7f2bd7d"
        ],
        "x": 435,
        "y": 60,
        "wires": [
            [
                "b552d858621572e5"
            ]
        ]
    },
    {
        "id": "bad79e5ee645cc24",
        "type": "link out",
        "z": "475c4bbdee672833",
        "name": "link out 17",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 1175,
        "y": 60,
        "wires": []
    },
    {
        "id": "d90c284a67f6e1b7",
        "type": "subflow:b22812dba408ab8f",
        "z": "475c4bbdee672833",
        "name": "",
        "x": 1070,
        "y": 60,
        "wires": [
            [
                "bad79e5ee645cc24"
            ]
        ]
    },
    {
        "id": "b552d858621572e5",
        "type": "change",
        "z": "475c4bbdee672833",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.lookup",
                "pt": "msg",
                "to": "{\"moduleName\":\"geography\",\"program\":\"aies\",\"unit_type\":\"estab\",\"params\":\"geography\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 60,
        "wires": [
            [
                "57cb2ba29b5e996e"
            ]
        ]
    },
    {
        "id": "57cb2ba29b5e996e",
        "type": "subflow:0be109393cb5f28a",
        "z": "475c4bbdee672833",
        "name": "",
        "x": 850,
        "y": 60,
        "wires": [
            [
                "d90c284a67f6e1b7"
            ]
        ]
    },
    {
        "id": "dc4798b8a9034e10",
        "type": "subflow:20d530cc0b193752",
        "z": "8790b12c7efb6fa0",
        "name": "",
        "x": 420,
        "y": 760,
        "wires": [
            [
                "121f33ae272cb49a",
                "e6087333eb3ae6c9"
            ]
        ]
    },
    {
        "id": "35b9c800d42ff73a",
        "type": "subflow:42be4655fd3a8c84",
        "z": "8790b12c7efb6fa0",
        "name": "",
        "x": 650,
        "y": 880,
        "wires": [
            [
                "df590f50a626fa0c",
                "773badd332d18030"
            ]
        ]
    },
    {
        "id": "03236197db128bd1",
        "type": "subflow:b22812dba408ab8f",
        "z": "8790b12c7efb6fa0",
        "name": "",
        "x": 1470,
        "y": 1040,
        "wires": [
            [
                "bd80eaa4d3e0b069",
                "3d656d4e7d16c90d"
            ]
        ]
    },
    {
        "id": "bd80eaa4d3e0b069",
        "type": "subflow:aadaa91727c0d579",
        "z": "8790b12c7efb6fa0",
        "name": "",
        "x": 940,
        "y": 1160,
        "wires": [
            [
                "1b67e6657388118d",
                "9c4c1524319ca134"
            ]
        ]
    },
    {
        "id": "77dcf5b1e0afb3a9",
        "type": "subflow:998aa04bd1bb677d",
        "z": "8790b12c7efb6fa0",
        "name": "",
        "x": 1360,
        "y": 1160,
        "wires": [
            [
                "2a42027c1028f409",
                "18a3898311a7fbd5"
            ]
        ]
    },
    {
        "id": "1b67e6657388118d",
        "type": "subflow:c79b244779411ead",
        "z": "8790b12c7efb6fa0",
        "name": "",
        "x": 1180,
        "y": 1160,
        "wires": [
            [
                "77dcf5b1e0afb3a9",
                "a349c47148ce6a49"
            ]
        ]
    },
    {
        "id": "2a42027c1028f409",
        "type": "subflow:89f071f1deb9a1b1",
        "z": "8790b12c7efb6fa0",
        "name": "",
        "x": 1560,
        "y": 1160,
        "wires": [
            [
                "66fdc22c898d5af9",
                "ae1d3542805a6ef1"
            ]
        ]
    },
    {
        "id": "a3ef7d2c9f62b38b",
        "type": "subflow:f9a2a2262f95bae3",
        "z": "8790b12c7efb6fa0",
        "name": "",
        "x": 1100,
        "y": 920,
        "wires": [
            [
                "e1dd758b59c31f88",
                "fa6a99c77e9fa7b4"
            ]
        ]
    },
    {
        "id": "e1dd758b59c31f88",
        "type": "subflow:b93bf22bc3258992",
        "z": "8790b12c7efb6fa0",
        "name": "",
        "x": 1050,
        "y": 1040,
        "wires": [
            [
                "afd7588524439212",
                "c13d640ebfcaddf2"
            ]
        ]
    },
    {
        "id": "afd7588524439212",
        "type": "subflow:bfe1ab19e0cbe2cf",
        "z": "8790b12c7efb6fa0",
        "name": "",
        "x": 1270,
        "y": 1040,
        "wires": [
            [
                "03236197db128bd1",
                "72a8dd9ff04542e7"
            ]
        ]
    },
    {
        "id": "6c2616b9f8b16717",
        "type": "link out",
        "z": "8790b12c7efb6fa0",
        "name": "Output of Interactive mode",
        "mode": "link",
        "links": [
            "8ad2ab7c27d8d248"
        ],
        "x": 2245,
        "y": 740,
        "wires": []
    },
    {
        "id": "746909370ced9c62",
        "type": "link in",
        "z": "8790b12c7efb6fa0",
        "name": "link in gotQBES",
        "links": [
            "8eb6f6b4ca5cb88d",
            "35871e68a9f50691"
        ],
        "x": 315,
        "y": 500,
        "wires": [
            [
                "b29f65e4584b8767"
            ]
        ]
    },
    {
        "id": "b29f65e4584b8767",
        "type": "change",
        "z": "8790b12c7efb6fa0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "global",
                "to": "\"\"",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 500,
        "wires": [
            [
                "56807c0e8b3a451e"
            ]
        ]
    },
    {
        "id": "121f33ae272cb49a",
        "type": "switch",
        "z": "8790b12c7efb6fa0",
        "name": "Exit Check",
        "property": "action",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "Exit Edit",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "Exit Edit",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 840,
        "wires": [
            [
                "66fdc22c898d5af9"
            ],
            [
                "35b9c800d42ff73a"
            ]
        ]
    },
    {
        "id": "df590f50a626fa0c",
        "type": "switch",
        "z": "8790b12c7efb6fa0",
        "name": "Exit Check",
        "property": "action",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "Exit Edit",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "Exit Edit",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 870,
        "y": 860,
        "wires": [
            [
                "66fdc22c898d5af9"
            ],
            [
                "a3ef7d2c9f62b38b"
            ]
        ]
    },
    {
        "id": "4a7b9cb4a8c69f57",
        "type": "link in",
        "z": "8790b12c7efb6fa0",
        "name": "Interactive Mode Test UI Input",
        "links": [
            "6c8827ce7a4c83d8"
        ],
        "x": 235,
        "y": 200,
        "wires": [
            [
                "b29f65e4584b8767"
            ]
        ]
    },
    {
        "id": "66fdc22c898d5af9",
        "type": "function",
        "z": "8790b12c7efb6fa0",
        "name": "Merge calls",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2090,
        "y": 740,
        "wires": [
            [
                "6c2616b9f8b16717",
                "0422aeccc8321ad8"
            ]
        ]
    },
    {
        "id": "0422aeccc8321ad8",
        "type": "link out",
        "z": "8790b12c7efb6fa0",
        "name": "link out classification",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 2285,
        "y": 540,
        "wires": []
    },
    {
        "id": "e6087333eb3ae6c9",
        "type": "debug",
        "z": "8790b12c7efb6fa0",
        "name": "BR",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 920,
        "wires": []
    },
    {
        "id": "773badd332d18030",
        "type": "debug",
        "z": "8790b12c7efb6fa0",
        "name": "Critical Error",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 960,
        "wires": []
    },
    {
        "id": "fa6a99c77e9fa7b4",
        "type": "debug",
        "z": "8790b12c7efb6fa0",
        "name": "NonNORM Init Set ACTVMIO & OPSTATS",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 860,
        "wires": []
    },
    {
        "id": "c13d640ebfcaddf2",
        "type": "debug",
        "z": "8790b12c7efb6fa0",
        "name": "NONNORM Router",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 980,
        "wires": []
    },
    {
        "id": "72a8dd9ff04542e7",
        "type": "debug",
        "z": "8790b12c7efb6fa0",
        "name": "Classification",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 920,
        "wires": []
    },
    {
        "id": "3d656d4e7d16c90d",
        "type": "debug",
        "z": "8790b12c7efb6fa0",
        "name": "Geography",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1650,
        "y": 1000,
        "wires": []
    },
    {
        "id": "9c4c1524319ca134",
        "type": "debug",
        "z": "8790b12c7efb6fa0",
        "name": "Best admin receipts",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 1320,
        "wires": []
    },
    {
        "id": "a349c47148ce6a49",
        "type": "debug",
        "z": "8790b12c7efb6fa0",
        "name": "Valid negative",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 1300,
        "wires": []
    },
    {
        "id": "18a3898311a7fbd5",
        "type": "debug",
        "z": "8790b12c7efb6fa0",
        "name": "Valid Zero",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1600,
        "y": 1300,
        "wires": []
    },
    {
        "id": "ae1d3542805a6ef1",
        "type": "debug",
        "z": "8790b12c7efb6fa0",
        "name": "Completeness",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1780,
        "y": 1200,
        "wires": []
    },
    {
        "id": "dbaacd53577bf3a4",
        "type": "subflow:20d530cc0b193752",
        "z": "8790b12c7efb6fa0",
        "name": "",
        "x": 560,
        "y": 1380,
        "wires": [
            [
                "3f056fce77befeb6"
            ]
        ]
    },
    {
        "id": "3f056fce77befeb6",
        "type": "switch",
        "z": "8790b12c7efb6fa0",
        "name": "Exit Check",
        "property": "action",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "Exit Edit",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "Exit Edit",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1890,
        "y": 1440,
        "wires": [
            [
                "66fdc22c898d5af9"
            ],
            [
                "fd89669a0908b072"
            ]
        ]
    },
    {
        "id": "56807c0e8b3a451e",
        "type": "switch",
        "z": "8790b12c7efb6fa0",
        "name": "reporting_id_typ_txt",
        "property": "payload.csv[0].REPORTING_ID_TYP_TXT",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SU",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "MU",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "KAU",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ENT",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 180,
        "y": 780,
        "wires": [
            [
                "dc4798b8a9034e10"
            ],
            [
                "dc4798b8a9034e10"
            ],
            [
                "dbaacd53577bf3a4"
            ],
            [
                "b59063ee603e4b43"
            ],
            [
                "66fdc22c898d5af9"
            ]
        ]
    },
    {
        "id": "fd89669a0908b072",
        "type": "subflow:bfe1ab19e0cbe2cf",
        "z": "8790b12c7efb6fa0",
        "name": "",
        "x": 1390,
        "y": 1600,
        "wires": [
            [
                "c89db042ff61a895"
            ]
        ]
    },
    {
        "id": "c89db042ff61a895",
        "type": "subflow:c79b244779411ead",
        "z": "8790b12c7efb6fa0",
        "name": "",
        "x": 1620,
        "y": 1600,
        "wires": [
            [
                "bbd77d5e5517779e"
            ]
        ]
    },
    {
        "id": "bbd77d5e5517779e",
        "type": "subflow:998aa04bd1bb677d",
        "z": "8790b12c7efb6fa0",
        "name": "",
        "x": 1800,
        "y": 1600,
        "wires": [
            [
                "1b840bc520e7c89c"
            ]
        ]
    },
    {
        "id": "1b840bc520e7c89c",
        "type": "subflow:89f071f1deb9a1b1",
        "z": "8790b12c7efb6fa0",
        "name": "",
        "x": 2000,
        "y": 1600,
        "wires": [
            [
                "66fdc22c898d5af9"
            ]
        ]
    },
    {
        "id": "b59063ee603e4b43",
        "type": "subflow:20d530cc0b193752",
        "z": "8790b12c7efb6fa0",
        "name": "",
        "x": 540,
        "y": 1760,
        "wires": [
            [
                "c0ae812afe3b8630"
            ]
        ]
    },
    {
        "id": "c0ae812afe3b8630",
        "type": "switch",
        "z": "8790b12c7efb6fa0",
        "name": "Exit Check",
        "property": "action",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "Exit Edit",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "Exit Edit",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2130,
        "y": 1720,
        "wires": [
            [
                "66fdc22c898d5af9"
            ],
            [
                "66fdc22c898d5af9"
            ]
        ]
    },
    {
        "id": "a48bbfee066abb7a",
        "type": "function",
        "z": "8790b12c7efb6fa0",
        "name": "Fetch all params",
        "func": "msg.url = 'http://a301cb45559c445acaec11ab01bbbee1-2115632777.us-gov-east-1.elb.amazonaws.com/api/params/params'\n// msg.url = 'https://mc.edl-7529180-ite.ite.edl.census.gov/api/'\nmsg.backup = msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nlet msg = {}\nmsg.url = 'http://a301cb45559c445acaec11ab01bbbee1-2115632777.us-gov-east-1.elb.amazonaws.com/api/params/params'\n// msg.url = 'https://mc.edl-7529180-ite.ite.edl.census.gov/api/'\nmsg.backup = msg.payload\n// msg.payload.startTime = global.set(\"currentTime\", new Date())\n\nreturn msg;",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 620,
        "wires": [
            [
                "e75551794bd4e9c1"
            ]
        ]
    },
    {
        "id": "e75551794bd4e9c1",
        "type": "http request",
        "z": "8790b12c7efb6fa0",
        "name": "Lookup data API",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 930,
        "y": 620,
        "wires": [
            [
                "db960fa2db841295"
            ]
        ]
    },
    {
        "id": "db960fa2db841295",
        "type": "function",
        "z": "8790b12c7efb6fa0",
        "name": "cache result",
        "func": "let cache = global.get(\"lookupCache\");\ncache = Array.isArray(cache?.data) ? cache : { \"data\": [] }\nif (msg.payload.status === \"success\") {\n    cache.data = msg.payload.data\n    msg.payload.dataArr = cache.data\n}\nglobal.set(\"lookupCache\", cache)\n// msg.payload = {\n//     ...msg.payload,\n//     ...msg.backup\n// }\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "bc058c7d26276884",
        "type": "inject",
        "z": "8790b12c7efb6fa0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 530,
        "y": 620,
        "wires": [
            [
                "a48bbfee066abb7a"
            ]
        ]
    },
    {
        "id": "f2f56f84d002ec0f",
        "type": "link in",
        "z": "d416a739a235277c",
        "name": "link in 43",
        "links": [
            "89e7e315b3a8c30b"
        ],
        "x": 375,
        "y": 60,
        "wires": [
            [
                "ba808bf2520da70a"
            ]
        ]
    },
    {
        "id": "63e57e09491e405e",
        "type": "link out",
        "z": "d416a739a235277c",
        "name": "link out classification",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 1205,
        "y": 60,
        "wires": []
    },
    {
        "id": "071bb94d4092dc47",
        "type": "subflow:1159e6c8f76efda3",
        "z": "d416a739a235277c",
        "name": "",
        "x": 1060,
        "y": 60,
        "wires": [
            [
                "63e57e09491e405e"
            ]
        ]
    },
    {
        "id": "ba808bf2520da70a",
        "type": "change",
        "z": "d416a739a235277c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.lookup",
                "pt": "msg",
                "to": "{\"moduleName\":\"electric_energy\",\"program\":\"aies\",\"unit_type\":\"estab\",\"params\":\"electric_energy_module\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 60,
        "wires": [
            [
                "475236651a5b2d4f"
            ]
        ]
    },
    {
        "id": "475236651a5b2d4f",
        "type": "subflow:0be109393cb5f28a",
        "z": "d416a739a235277c",
        "name": "",
        "x": 810,
        "y": 60,
        "wires": [
            [
                "071bb94d4092dc47"
            ]
        ]
    },
    {
        "id": "d946e5bca62e02d1",
        "type": "link in",
        "z": "c54f3247808fdf7f",
        "name": "link in 44",
        "links": [
            "ba5d5bdad0bc957e"
        ],
        "x": 325,
        "y": 60,
        "wires": [
            [
                "1a26d214cba4c42b"
            ]
        ]
    },
    {
        "id": "d167c6cf7b89444d",
        "type": "link out",
        "z": "c54f3247808fdf7f",
        "name": "link out classification",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 1155,
        "y": 60,
        "wires": []
    },
    {
        "id": "3bae3318fcbf535f",
        "type": "subflow:aadd13b9b9077fc3",
        "z": "c54f3247808fdf7f",
        "name": "",
        "x": 1000,
        "y": 60,
        "wires": [
            [
                "d167c6cf7b89444d"
            ]
        ]
    },
    {
        "id": "1a26d214cba4c42b",
        "type": "change",
        "z": "c54f3247808fdf7f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.lookup",
                "pt": "msg",
                "to": "{\"moduleName\":\"electric_energy\",\"program\":\"aies\",\"unit_type\":\"estab\",\"params\":\"electric_energy_module\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 60,
        "wires": [
            [
                "0d8c91218e476015"
            ]
        ]
    },
    {
        "id": "0d8c91218e476015",
        "type": "subflow:0be109393cb5f28a",
        "z": "c54f3247808fdf7f",
        "name": "",
        "x": 750,
        "y": 60,
        "wires": [
            [
                "3bae3318fcbf535f"
            ]
        ]
    },
    {
        "id": "24fea5e6f5d0c6b0",
        "type": "link in",
        "z": "ed71400b88bb6305",
        "name": "Derived Naics Code Link",
        "links": [
            "039e4172b173ea18"
        ],
        "x": 345,
        "y": 60,
        "wires": [
            [
                "3ed8dcad8bf11749"
            ]
        ]
    },
    {
        "id": "2e4029be13b46163",
        "type": "link out",
        "z": "ed71400b88bb6305",
        "name": "link out classification",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 1125,
        "y": 60,
        "wires": []
    },
    {
        "id": "c003a5dafd8972d5",
        "type": "subflow:f07c9ae4084738fc",
        "z": "ed71400b88bb6305",
        "name": "",
        "x": 1000,
        "y": 60,
        "wires": [
            [
                "2e4029be13b46163"
            ]
        ]
    },
    {
        "id": "bddf89357662d3b1",
        "type": "subflow:0be109393cb5f28a",
        "z": "ed71400b88bb6305",
        "name": "",
        "x": 750,
        "y": 60,
        "wires": [
            [
                "c003a5dafd8972d5"
            ]
        ]
    },
    {
        "id": "3ed8dcad8bf11749",
        "type": "change",
        "z": "ed71400b88bb6305",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.lookup",
                "pt": "msg",
                "to": "{\"moduleName\":\"electric_energy\",\"program\":\"aies\",\"unit_type\":\"estab\",\"params\":\"electric_energy_module\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 60,
        "wires": [
            [
                "bddf89357662d3b1"
            ]
        ]
    },
    {
        "id": "3cd3e107ac0789b7",
        "type": "link in",
        "z": "1c6c32346fee9416",
        "name": "link in 45",
        "links": [
            "8434c6c16c1fbaaf",
            "cede3264bdcd0a70",
            "36c4687d5f1bee6b"
        ],
        "x": 335,
        "y": 80,
        "wires": [
            [
                "651b041f7e61e179"
            ]
        ]
    },
    {
        "id": "ca558b1ab669675d",
        "type": "link out",
        "z": "1c6c32346fee9416",
        "name": "link out classification",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 1205,
        "y": 80,
        "wires": []
    },
    {
        "id": "bf94fdbc220bc178",
        "type": "subflow:3ccae806a14cca8d",
        "z": "1c6c32346fee9416",
        "name": "",
        "x": 1040,
        "y": 80,
        "wires": [
            [
                "ca558b1ab669675d"
            ]
        ]
    },
    {
        "id": "651b041f7e61e179",
        "type": "change",
        "z": "1c6c32346fee9416",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.lookup",
                "pt": "msg",
                "to": "{\"moduleName\":\"electric_energy\",\"program\":\"aies\",\"unit_type\":\"estab\",\"params\":\"electric_energy_module\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 80,
        "wires": [
            [
                "51888bfbb37a0690"
            ]
        ]
    },
    {
        "id": "51888bfbb37a0690",
        "type": "subflow:0be109393cb5f28a",
        "z": "1c6c32346fee9416",
        "name": "",
        "x": 790,
        "y": 80,
        "wires": [
            [
                "bf94fdbc220bc178"
            ]
        ]
    },
    {
        "id": "d9650115f85479a9",
        "type": "link in",
        "z": "112a2e5b60c3f3a8",
        "name": "link in 18",
        "links": [
            "f14b49f36a5b83fc",
            "ae36b936ef8f7cc6"
        ],
        "x": 365,
        "y": 180,
        "wires": [
            [
                "f924038bf9ba3790"
            ]
        ]
    },
    {
        "id": "434436c270b7f283",
        "type": "link out",
        "z": "112a2e5b60c3f3a8",
        "name": "link out classification",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 1105,
        "y": 180,
        "wires": []
    },
    {
        "id": "bd4aeaec47bb4136",
        "type": "subflow:bfe1ab19e0cbe2cf",
        "z": "112a2e5b60c3f3a8",
        "name": "",
        "x": 990,
        "y": 180,
        "wires": [
            [
                "434436c270b7f283"
            ]
        ]
    },
    {
        "id": "f924038bf9ba3790",
        "type": "change",
        "z": "112a2e5b60c3f3a8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.lookup",
                "pt": "msg",
                "to": "{\"moduleName\":\"classification\",\"program\":\"aies\",\"unit_type\":\"estab\",\"params\":\"naics_alt,naics_validation\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 180,
        "wires": [
            [
                "9d7b5173ac8dfe70"
            ]
        ]
    },
    {
        "id": "9d7b5173ac8dfe70",
        "type": "subflow:0be109393cb5f28a",
        "z": "112a2e5b60c3f3a8",
        "name": "",
        "x": 790,
        "y": 180,
        "wires": [
            [
                "bd4aeaec47bb4136",
                "c42eeec0262ea39a"
            ]
        ]
    },
    {
        "id": "172d7af636acdeb4",
        "type": "debug",
        "z": "112a2e5b60c3f3a8",
        "name": "debug 119",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.cache",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 100,
        "wires": []
    },
    {
        "id": "c42eeec0262ea39a",
        "type": "function",
        "z": "112a2e5b60c3f3a8",
        "name": "function 40",
        "func": "msg.payload.cache = global.get(\"lookupCache\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 100,
        "wires": [
            [
                "172d7af636acdeb4"
            ]
        ]
    },
    {
        "id": "7558a42de6d00a48",
        "type": "subflow:0be109393cb5f28a",
        "z": "b03832cc4c2422fd",
        "name": "",
        "x": 670,
        "y": 260,
        "wires": [
            [
                "1c814e15cc421b32"
            ]
        ]
    },
    {
        "id": "a6bcbbea372ceeb1",
        "type": "change",
        "z": "b03832cc4c2422fd",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.lookup",
                "pt": "msg",
                "to": "{     \"moduleName\": \"flags\",     \"program\": \"aies\",     \"unit_type\": \"all\",     \"params\": \"load_referrals\" }",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 260,
        "wires": [
            [
                "7558a42de6d00a48"
            ]
        ]
    },
    {
        "id": "c0fb97b1232af4ac",
        "type": "link in",
        "z": "b03832cc4c2422fd",
        "name": "load_referrals_link",
        "links": [
            "f49fb32690ddbe1a"
        ],
        "x": 245,
        "y": 260,
        "wires": [
            [
                "a6bcbbea372ceeb1"
            ]
        ]
    },
    {
        "id": "1c814e15cc421b32",
        "type": "subflow:1a584bfe7f4a2458",
        "z": "b03832cc4c2422fd",
        "name": "",
        "x": 920,
        "y": 260,
        "wires": [
            [
                "f096483c422c4725"
            ]
        ]
    },
    {
        "id": "f096483c422c4725",
        "type": "link out",
        "z": "b03832cc4c2422fd",
        "name": "link out classification",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 1075,
        "y": 260,
        "wires": []
    },
    {
        "id": "523b46f795f0a997",
        "type": "ui_dropdown",
        "z": "dad88d9a3132fed6",
        "name": "select_modules",
        "label": "",
        "tooltip": "List of available modules",
        "place": "Select Option",
        "group": "96ded9aa7c8ec809",
        "order": 1,
        "width": "8",
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "BR Stat Evaluation",
                "value": "br_stat_evaluation",
                "type": "str"
            },
            {
                "label": "Derive NAICSCode",
                "value": "derive_NAICS_code",
                "type": "str"
            },
            {
                "label": "Classification",
                "value": "classification",
                "type": "str"
            },
            {
                "label": "Geography",
                "value": "geography",
                "type": "str"
            },
            {
                "label": "Calculate Best Admin Receipts",
                "value": "best_admin_receipts",
                "type": "str"
            },
            {
                "label": "Critical Error",
                "value": "critical_error",
                "type": "str"
            },
            {
                "label": "Completeness Check",
                "value": "completeness_check",
                "type": "str"
            },
            {
                "label": "NONNORM",
                "value": "nonnorm",
                "type": "str"
            },
            {
                "label": "Derived Items",
                "value": "derived",
                "type": "str"
            },
            {
                "label": "Logical Edit",
                "value": "logical",
                "type": "str"
            },
            {
                "label": "Post Edit",
                "value": "post_edit",
                "type": "str"
            },
            {
                "label": "Electric Energy Module",
                "value": "electric_energy_module",
                "type": "str"
            },
            {
                "label": "Electric Energy Module Cont",
                "value": "electric_energy_module_cont",
                "type": "str"
            },
            {
                "label": "Electric Impute Module",
                "value": "electric_impute_module",
                "type": "str"
            },
            {
                "label": "Completeness",
                "value": "completeness",
                "type": "str"
            },
            {
                "label": "RCPT_TOT_VAL",
                "value": "rcpt_tot_val",
                "type": "str"
            },
            {
                "label": "PAY_ANN_VAL",
                "value": "pay_ann_val",
                "type": "str"
            },
            {
                "label": "PAY_QTR1_VAL",
                "value": "pay_qtr1_val",
                "type": "str"
            },
            {
                "label": "Emp MAR12_NUM",
                "value": "emp_mar12_num",
                "type": "str"
            },
            {
                "label": "Q Flow",
                "value": "qflow",
                "type": "str"
            },
            {
                "label": "Post Edit Status Field",
                "value": "post_edit_status_field",
                "type": "str"
            },
            {
                "label": "Pre Db Write Back For Leased",
                "value": "pre_db_write_back_for_leased",
                "type": "str"
            },
            {
                "label": "Unit Balance",
                "value": "unit_balance",
                "type": "str"
            },
            {
                "label": "Valid Zero",
                "value": "valid_zero",
                "type": "str"
            },
            {
                "label": "Estab To KAU Addivity Prep and Check",
                "value": "estab_to_kau_addivity_prep_and_check",
                "type": "str"
            },
            {
                "label": "Valid Negative Value",
                "value": "valid_negative_value",
                "type": "str"
            },
            {
                "label": "KAU To Company Addivity_prep_and_check",
                "value": "kau_to_company_addivity_prep_and_check",
                "type": "str"
            },
            {
                "label": "Demo: Interactive Mode",
                "value": "interactive_mode",
                "type": "str"
            },
            {
                "label": "Demo: Batch Mode 1",
                "value": "batch_mode_1",
                "type": "str"
            },
            {
                "label": "Demo: Batch Mode 2",
                "value": "batch_mode_2",
                "type": "str"
            },
            {
                "label": "NONNORM: Init Set ACTVMIO & OPSTATS",
                "value": "nonorm_init_set",
                "type": "str"
            },
            {
                "label": "NONNORM: Router",
                "value": "nonorm_router",
                "type": "str"
            },
            {
                "label": "NONNORM: Set OPSTATS & ACTVMIO",
                "value": "nonorm_set_opstats_and_actvmio",
                "type": "str"
            },
            {
                "label": "NONNORM: Set NONORM",
                "value": "nonorm_set",
                "type": "str"
            },
            {
                "label": "NONNORM: Set Basic to 0",
                "value": "nonorm_set_basic_to_zero",
                "type": "str"
            },
            {
                "label": "NONNORM: Special Season final",
                "value": "nonorm_special_season_final",
                "type": "str"
            },
            {
                "label": "mfg_payqtr1",
                "value": "mfg_payqtr1",
                "type": "str"
            },
            {
                "label": "mfg_payann",
                "value": "mfg_payann",
                "type": "str"
            },
            {
                "label": "mfg_empq1",
                "value": "mfg_empq1",
                "type": "str"
            },
            {
                "label": "KAU To Company Additivity Check",
                "value": "kau_to_company_additivity_check",
                "type": "str"
            },
            {
                "label": "inventories_balance",
                "value": "inventories_balance",
                "type": "str"
            },
            {
                "label": "lifo_valuation_method",
                "value": "lifo_valuation_method",
                "type": "str"
            },
            {
                "label": "evaluate_lifo_reverse_module",
                "value": "evaluate_lifo_reverse_module",
                "type": "str"
            },
            {
                "label": "evaluate_lifo_module",
                "value": "evaluate_lifo_module",
                "type": "str"
            },
            {
                "label": "non_lifo_valuation_methods_module",
                "value": "non_lifo_valuation_methods_module",
                "type": "str"
            },
            {
                "label": "evaluatenon_lifo_valuation_methods_module",
                "value": "evaluatenon_lifo_valuation_methods_module",
                "type": "str"
            },
            {
                "label": "evaluate_detail_valuation_methods",
                "value": "evaluate_detail_valuation_methods",
                "type": "str"
            },
            {
                "label": " evaluate_non_lifo_valuation_method_module",
                "value": " evaluate_non_lifo_valuation_method_module",
                "type": "str"
            },
            {
                "label": "non_lifo_random_module",
                "value": "non_lifo_random_module",
                "type": "str"
            },
            {
                "label": "napcs_balance",
                "value": "napcs_balance",
                "type": "str"
            },
            {
                "label": "napcs_balancing",
                "value": "napcs_balance_balancing",
                "type": "str"
            },
            {
                "label": "napcs_hdicat",
                "value": "napcs_hdicat",
                "type": "str"
            },
            {
                "label": "napcs_m_goco",
                "value": "napcs_m_goco",
                "type": "str"
            },
            {
                "label": "napcs_no_donor",
                "value": "napcs_no_donor",
                "type": "str"
            },
            {
                "label": "napcs_recalculate_napcs_fields",
                "value": "napcs_recalculate_napcs_fields",
                "type": "str"
            },
            {
                "label": "napcs_bl_rounding",
                "value": "napcs_bl_rounding",
                "type": "str"
            },
            {
                "label": "load_referrals",
                "value": "load_referrals",
                "type": "str"
            },
            {
                "label": "napcs_prep",
                "value": "napcs_prep",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 100,
        "y": 340,
        "wires": [
            [
                "38960acd0c73918d"
            ]
        ]
    },
    {
        "id": "0695b3dc79291692",
        "type": "switch",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "",
        "property": "payload.selectModule",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "br_stat_evaluation",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "derive_NAICS_code",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "classification",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "geography",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "best_admin_receipts",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "critical_error",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "completeness",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "nonnorm",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "derived",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "logical",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "post_edit",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "electric_energy_module",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "electric_energy_module_cont",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "electric_impute_module",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "logical_edits",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "completeness",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pay_ann_val",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "rcpt_tot_val",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "emp_mar12_num",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pay_qtr1_val",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "qflow",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "post_edit_status_field",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pre_db_write_back_for_leased",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "unit_balance",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "derived_naics_code",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "valid_zero",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "kau_to_company_addivity_prep_and_check",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "estab_to_kau_addivity_prep_and_check",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "valid_negative_value",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "interactive_mode",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "batch_mode_1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "batch_mode_2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "nonorm_init_set",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "nonorm_router",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "nonorm_set_opstats_and_actvmio",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "nonorm_set",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "nonorm_set_basic_to_zero",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "nonorm_special_season_final",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "mfg_payqtr1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "mfg_payann",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "mfg_empq1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "kau_to_company_additivity_check",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "inventories_balance",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "lifo_valuation_method",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "evaluate_lifo_reverse_module",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "evaluate_lifo_module",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "non_lifo_valuation_methods_module",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "evaluatenon_lifo_valuation_methods_module",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "evaluate_detail_valuation_methods",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": " evaluate_non_lifo_valuation_method_module",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "non_lifo_random_module",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "napcs_balance",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "napcs_balance_balancing",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "napcs_bl_rounding",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "napcs_recalculate_napcs_fields",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "napcs_no_donor",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "napcs_m_goco",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "napcs_hdicat",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "m_k",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "load_referrals",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "napcs_prep",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 61,
        "x": 690,
        "y": 2920,
        "wires": [
            [
                "dc2a2ca809797dbd"
            ],
            [
                "a42aa429654aa772"
            ],
            [
                "f14b49f36a5b83fc"
            ],
            [
                "4a50e74e63590ec7"
            ],
            [
                "81f5d75ffbcd549e"
            ],
            [
                "b1540f3459d95049"
            ],
            [
                "32b24311da4a3220"
            ],
            [
                "cd8a05808eedb5f3"
            ],
            [
                "ff27924ce01b7894"
            ],
            [
                "3fd3586e01a6e2dc"
            ],
            [
                "1597f28db268d317"
            ],
            [
                "89e7e315b3a8c30b"
            ],
            [
                "ba5d5bdad0bc957e"
            ],
            [
                "8434c6c16c1fbaaf"
            ],
            [
                "24ae978c7feb5fc3"
            ],
            [
                "b9b9acc35bdd0b75"
            ],
            [
                "43545e3b96e7f60c"
            ],
            [
                "d5aac8a297ee6dd2"
            ],
            [
                "28494dbc74f30091"
            ],
            [
                "5d05b108e4e3f722"
            ],
            [
                "8272974b9a32a0ac"
            ],
            [
                "270941def4b7c8b6"
            ],
            [
                "fbcbf9510de0509c"
            ],
            [
                "05b67576d444bda4"
            ],
            [
                "039e4172b173ea18"
            ],
            [
                "45b768d58693d73d"
            ],
            [],
            [],
            [
                "854cd7a417cbbc6e"
            ],
            [
                "6c8827ce7a4c83d8"
            ],
            [
                "6386460ff91d3960"
            ],
            [
                "6982bc340b585149"
            ],
            [
                "48c2bbd321b77688"
            ],
            [
                "a0a9a69afb297619"
            ],
            [
                "879c5a04e7f7b3ba"
            ],
            [
                "601d06243349006e"
            ],
            [
                "9924458ebb7935cd"
            ],
            [
                "51d4f6e460537ff8"
            ],
            [
                "8cc4aec631b9f7ab"
            ],
            [
                "6e0891f1d9b0f50b"
            ],
            [
                "405380585cc28809"
            ],
            [
                "8ab5edfeddc79fdc"
            ],
            [
                "be79a45237eac5df"
            ],
            [
                "961d21f9c9d6935d"
            ],
            [
                "256113e429ce586b"
            ],
            [
                "6e4d6926b48c4bfc"
            ],
            [
                "6a7a578fbd272b1f"
            ],
            [
                "ac696618fbdb5b2b"
            ],
            [
                "ff930476a898868c"
            ],
            [
                "17eb7e821e3b7ea0"
            ],
            [
                "9a0ffed7eefbb31e"
            ],
            [
                "f2d1653b5ba3e5d2"
            ],
            [
                "03b4a30c8b73aaa1"
            ],
            [
                "184f643c8c0c9483"
            ],
            [
                "13026c6f9554fd48"
            ],
            [
                "628a357ebf92b85e"
            ],
            [
                "23110971cf0ed68c"
            ],
            [
                "f96645ae14ef8fb7"
            ],
            [
                "1b801f920c932ed1"
            ],
            [
                "f49fb32690ddbe1a"
            ],
            [
                "bf91ad9e062838cc"
            ]
        ]
    },
    {
        "id": "0f1620a9dfb42cf6",
        "type": "ui_button",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "",
        "group": "96ded9aa7c8ec809",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": true,
        "label": "Run Selected Module",
        "tooltip": "Run Module",
        "color": "blue",
        "bgcolor": "",
        "className": "",
        "icon": "send",
        "payload": "payload",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 320,
        "y": 2920,
        "wires": [
            [
                "2197046546278bb4"
            ]
        ]
    },
    {
        "id": "dc2a2ca809797dbd",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out br stat eval",
        "mode": "link",
        "links": [
            "3f936d74a59fd02d"
        ],
        "x": 1045,
        "y": 2420,
        "wires": []
    },
    {
        "id": "a42aa429654aa772",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out derive naics",
        "mode": "link",
        "links": [
            "66d215a5540f842d",
            "95217c8ed8e79881"
        ],
        "x": 1105,
        "y": 2440,
        "wires": []
    },
    {
        "id": "38960acd0c73918d",
        "type": "change",
        "z": "dad88d9a3132fed6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "selectModule",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "version",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 340,
        "wires": [
            [
                "33c11d41bc54bd5d",
                "d629ef47b7e7edbe"
            ]
        ]
    },
    {
        "id": "8fc8da4acdeb51a4",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "name": "link out 10",
        "mode": "link",
        "links": [
            "30c2b54a06202964",
            "617d768f3414b52e"
        ],
        "x": 1545,
        "y": 140,
        "wires": []
    },
    {
        "id": "33c11d41bc54bd5d",
        "type": "ui_template",
        "z": "dad88d9a3132fed6",
        "group": "22fec4fdabbf9dd8",
        "name": "",
        "order": 1,
        "width": 18,
        "height": 13,
        "format": "<div ng-switch=\"msg.payload\">\n        <div ng-switch-when=\"br_stat_evaluation\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/br_stat.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"critical_error\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/critical_error.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"logical\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/logical.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n        <div ng-switch-when=\"derive_NAICS_code\">\n             <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/derive_naics_code.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"classification\">\n             <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/classification.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"geography\">\n             <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/geography.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n     </div>\n    <div ng-switch-when=\"electric_energy_module\">\n             <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/electric_energy_module.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"electric_energy_module_cont\">\n             <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/electric_energy_module_cont.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"electric_impute_module\">\n             <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/electric_impute_module.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"best_admin_receipts\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/best_admin_receipt.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"emp_mar12_num\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/emp_mar12_num.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"pay_ann_val\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/pay_ann_val.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"pay_qtr1_val\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/pay_qtr1_val.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"rcpt_tot_val\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/rcpt_tot_val.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"qflow\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/qflow.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"post_edit_status_field\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/post_edit_status_field.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"pre_db_write_back_for_leased\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/pre_db_write_back_for_leased.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"unit_balance\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/unit_balance.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"derived_naics_code\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/derived_naics_code.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"valid_negative_value\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/valid_negative_value.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"valid_zero\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/valid_zero.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"estab_to_kau_addivity_prep_and_check\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/estab_to_kau_addivity_prep_and_check.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"kau_to_company_addivity_prep_and_check\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/kau_to_company_addivity_prep_and_check.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"interactive_mode\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/interactive_mode.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"batch_mode_1\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/batch_mode_1.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"batch_mode_2\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/batch_mode_2.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"nonorm_special_season_final\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/nonorm_special_season_final.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"nonorm_set\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/nonorm_set.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"nonorm_set_opstats_and_actvmio\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/nonorm_set_opstats_and_actvmio.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"nonorm_set_basic_to_zero\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/nonorm_set_basic_to_zero.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"nonorm_router\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/nonorm_router.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"nonorm_init_set\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/nonorm_init_set.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"mfg_payqtr1\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/mfg_payqtr1.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"mfg_payann\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/mfg_payann.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"mfg_empq1\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/mfg_empq1.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"kau_to_company_additivity_check\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/kau_to_company_additivity_check.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n\n    <div ng-switch-when=\"inventories_balance\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/inventories_balance.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"lifo_valuation_method\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/lifo_valuation_method.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"evaluate_lifo_reverse_module\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/evaluate_lifo_reverse_module.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"evaluate_lifo_module\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/evaluate_lifo_module.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"non_lifo_valuation_methods_module\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/non_lifo_valuation_methods_module.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"evaluatenon_lifo_valuation_methods_module\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/evaluatenon_lifo_valuation_methods_module.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"evaluate_detail_valuation_methods\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/evaluate_detail_valuation_methods.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\" evaluate_non_lifo_valuation_method_module\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/ evaluate_non_lifo_valuation_method_module.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"non_lifo_random_module\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/non_lifo_random_module.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"napcs_balance\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/napcs_balance.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"napcs_balance_balancing\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/napcs_balance_balancing.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n\n    <div ng-switch-when=\"napcs_hdicat\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/napcs_hdicat.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"napcs_m_goco\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/napcs_m_goco.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"napcs_no_donor\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/napcs_no_donor.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"napcs_recalculate_napcs_fields\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/napcs_recalculate_napcs_fields.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"napcs_bl_rounding\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/napcs_bl_rounding.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"load_referrals\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/load_referrals.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-when=\"napcs_prep\">\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/napcs_prep.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n    <div ng-switch-default>\n        <img src=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/completeness.png?version={{msg.version}}\" style=\"max-width: 100%; height: auto;\">\n    </div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 480,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "f14b49f36a5b83fc",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out classification",
        "mode": "link",
        "links": [
            "d9650115f85479a9",
            "af33a10fa21c5083"
        ],
        "x": 1155,
        "y": 2460,
        "wires": []
    },
    {
        "id": "4a50e74e63590ec7",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out geography",
        "mode": "link",
        "links": [
            "57c75bd58af75621"
        ],
        "x": 1215,
        "y": 2480,
        "wires": []
    },
    {
        "id": "81f5d75ffbcd549e",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out Best Admin Receipts",
        "mode": "link",
        "links": [
            "2eee0041d9d93424"
        ],
        "x": 1265,
        "y": 2500,
        "wires": []
    },
    {
        "id": "b1540f3459d95049",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out critical error",
        "mode": "link",
        "links": [
            "8feba05e91ff48f3"
        ],
        "x": 1305,
        "y": 2520,
        "wires": []
    },
    {
        "id": "32b24311da4a3220",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out completeness",
        "mode": "link",
        "links": [
            "49b8c4d94cef7ff7",
            "ef4348f935cbb1ca"
        ],
        "x": 1355,
        "y": 2540,
        "wires": []
    },
    {
        "id": "cd8a05808eedb5f3",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out nonnorm",
        "mode": "link",
        "links": [
            "8807ce2046dc8a32"
        ],
        "x": 1395,
        "y": 2560,
        "wires": []
    },
    {
        "id": "ff27924ce01b7894",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out derived items",
        "mode": "link",
        "links": [
            "7a7af6643c8cdc10"
        ],
        "x": 1435,
        "y": 2580,
        "wires": []
    },
    {
        "id": "3fd3586e01a6e2dc",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out logical edits",
        "mode": "link",
        "links": [
            "6a660fccf443bde2"
        ],
        "x": 1475,
        "y": 2600,
        "wires": []
    },
    {
        "id": "1597f28db268d317",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out post edit",
        "mode": "link",
        "links": [
            "60a8272cfde55a5e"
        ],
        "x": 1515,
        "y": 2620,
        "wires": []
    },
    {
        "id": "2197046546278bb4",
        "type": "function",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "setState",
        "func": "msg.payload = {\n    selectModule: flow.get('selectedModule'),\n    csv: global.get('moduleFacts')\n}\nmsg.topic = 'runModule'\nmsg.complete = true\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 2920,
        "wires": [
            [
                "0695b3dc79291692"
            ]
        ]
    },
    {
        "id": "d629ef47b7e7edbe",
        "type": "function",
        "z": "dad88d9a3132fed6",
        "name": "Set selectModule To flow ctx",
        "func": "flow.set('selectedModule', msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "12c94ce38056fc20",
        "type": "ui_text_input",
        "z": "dad88d9a3132fed6",
        "g": "302cb8040ecade52",
        "name": "File Name",
        "label": "Facts",
        "tooltip": "Enter the location of the parameters file",
        "group": "a5b67787a0857995",
        "order": 1,
        "width": 8,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1280,
        "y": 900,
        "wires": [
            [
                "a47c991027033263"
            ]
        ]
    },
    {
        "id": "499c2706ea3d919f",
        "type": "file in",
        "z": "dad88d9a3132fed6",
        "name": "Read File",
        "filename": "payload",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 580,
        "y": 280,
        "wires": [
            [
                "d9f955651664d4a8"
            ]
        ]
    },
    {
        "id": "d9f955651664d4a8",
        "type": "csv",
        "z": "dad88d9a3132fed6",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\r\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 710,
        "y": 260,
        "wires": [
            [
                "792badd055e46ded"
            ]
        ]
    },
    {
        "id": "792badd055e46ded",
        "type": "function",
        "z": "dad88d9a3132fed6",
        "name": "keysToUpperCase",
        "func": "function keysToUpperCase(obj) {\n    const output = {};\n    for (let key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            if (typeof obj[key] === 'object' && obj[key] !== null) {\n                output[key.toUpperCase()] = keysToUpperCase(obj[key]);\n            } else {\n                output[key.toUpperCase()] = obj[key];\n            }\n        }\n    }\n    return output;\n}\n\nlet p = msg.payload.map(keysToUpperCase);\nmsg.payload = p\n\nlet ptr = global.get(\"ptrModuleFacts\"); //HF\n\nflow.set('moduleFacts', p)\nglobal.set('moduleFacts', p)\nglobal.set('originalData', p[ptr]) //HF\n// global.set('originalData', p[0]) //NK\nmsg.topic = 'csv'\nmsg.ui_control = {\n    max: p.length // Assuming msg.payload contains the row count\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 220,
        "wires": [
            [
                "8fc8da4acdeb51a4",
                "8ff713c60410aa36"
            ]
        ]
    },
    {
        "id": "ca8be9e1afb53866",
        "type": "link in",
        "z": "dad88d9a3132fed6",
        "name": "link in 37",
        "links": [
            "60931347e15bc805"
        ],
        "x": 705,
        "y": 140,
        "wires": [
            [
                "792badd055e46ded"
            ]
        ]
    },
    {
        "id": "5f62bf825c6c1132",
        "type": "function",
        "z": "dad88d9a3132fed6",
        "name": "nullify moduleFacts and originalData",
        "func": "flow.set(\"moduleFacts\", [])\nflow.set(\"originalData\", [])\n//NK initialize global context\nglobal.set(\"originalData\", [])\nglobal.set(\"moduleFacts\", [])\nglobal.set(\"ptrModuleFacts\",0)\n\n\n// // Reset flow context variables\n// flow.keys().forEach(function (key) {\n//     flow.context().set(key, undefined);\n// });\n\n// // Reset global context variables\n// global.keys().forEach(function (key) {\n//     global.context().set(key, undefined);\n// });\n\n\n\n\nif(global.get(\"filename\")){\n    // msg.filename = global.get(\"filename\")\n    msg.payload = global.get(\"filename\")\n    return msg\n}\nelse return null;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 260,
        "wires": [
            [
                "499c2706ea3d919f"
            ]
        ]
    },
    {
        "id": "a47c991027033263",
        "type": "function",
        "z": "dad88d9a3132fed6",
        "g": "302cb8040ecade52",
        "name": "Set FileName",
        "func": "global.set(\"filename\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "aee5640ceffb474d",
        "type": "ui_text",
        "z": "dad88d9a3132fed6",
        "group": "1d1a43b7179c848f",
        "order": 3,
        "width": 8,
        "height": 1,
        "name": "Show Count",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1330,
        "y": 400,
        "wires": []
    },
    {
        "id": "8ff713c60410aa36",
        "type": "function",
        "z": "dad88d9a3132fed6",
        "name": "Get counts",
        "func": "let p = msg.payload.length\nmsg.payload = p \nmsg.ui_control = {\n    max: p// Assuming msg.payload contains the row count\n};\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 260,
        "wires": [
            [
                "aee5640ceffb474d",
                "3c92b89522e322f8"
            ]
        ]
    },
    {
        "id": "3c92b89522e322f8",
        "type": "ui_numeric",
        "z": "dad88d9a3132fed6",
        "name": "",
        "label": "Select Record",
        "tooltip": "",
        "group": "1d1a43b7179c848f",
        "order": 1,
        "width": 4,
        "height": 1,
        "wrap": true,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "1",
        "max": "",
        "step": 1,
        "className": "",
        "x": 860,
        "y": 80,
        "wires": [
            [
                "251d88e5cb4a68cb"
            ]
        ]
    },
    {
        "id": "251d88e5cb4a68cb",
        "type": "function",
        "z": "dad88d9a3132fed6",
        "name": "Select ptr in csv file",
        "func": "// Get the pointer from the ui which record in the csv is selected\n// set the value of the ptr to the count from the ui\nlet ptr = msg.payload - 1\nglobal.set(\"ptrModuleFacts\", ptr)\nmsg.payload = global.get(\"moduleFacts\")\nglobal.set('originalData', msg.payload[ptr])\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 80,
        "wires": [
            [
                "8fc8da4acdeb51a4"
            ]
        ]
    },
    {
        "id": "7992553925c479af",
        "type": "ui_button",
        "z": "dad88d9a3132fed6",
        "name": "Load CSV",
        "group": "a5b67787a0857995",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Load CSV",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 80,
        "y": 260,
        "wires": [
            [
                "5f62bf825c6c1132"
            ]
        ]
    },
    {
        "id": "7c30fb48.99cd2c",
        "type": "http in",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "",
        "url": "/upload_page",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 740,
        "wires": [
            [
                "3153fbd3.203a64"
            ]
        ]
    },
    {
        "id": "3153fbd3.203a64",
        "type": "template",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "html",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Upload CSV File</title>\n    <!-- Include Materialize CSS and JS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css\">\n    <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js\"></script>\n</head>\n<body>\n  <nav>\n    <div class=\"blue nav-wrapper\">\n      <a href=\"#\" data-target=\"mobile-demo\" class=\"sidenav-trigger\"><i class=\"material-icons\">menu</i></a>\n      <ul class=\"left hide-on-med-and-down\">\n        <li><a class=\"bold\" href=\"/update_params\">Params</a></li>\n        <li><a class=\"bold\" href=\"/upload_page\">Upload csv</a></li>\n        <li><a class=\"bold\" href=\"/ui_wrapper\">UI</a></li>\n        <li><a class=\"bold\" href=\"/test_ui\">Load DB</a></li>\n      </ul>\n    </div>\n  </nav>\n\n  <ul class=\"blue sidenav\" id=\"mobile-demo\">\n      <li><a class=\"bold\" href=\"/update_params\">Params</a></li>\n        <li><a class=\"bold\" href=\"/upload_page\">Upload csv</a></li>\n        <li><a class=\"bold\" href=\"/ui_wrapper\">UI</a></li>\n        <li><a class=\"bold\" href=\"/test_ui\">Load DB</a></li>\n  </ul>\n<div class=\"container\">\n    <h1 class=\"center-align\">Upload CSV File</h1>\n    \n    <div class=\"row\">\n        <form action=\"/upload\" method=\"POST\" enctype=\"multipart/form-data\" class=\"col s12\">\n            <div class=\"file-field input-field\">\n                <div class=\"btn\">\n                    <span>File</span>\n                    <input type=\"file\" name=\"myFile\">\n                </div>\n                <div class=\"file-path-wrapper\">\n                    <input class=\"file-path validate\" type=\"text\" placeholder=\"Upload a CSV file\">\n                </div>\n            </div>\n            <div class=\"input-field center-align\">\n                <button onclick=\"showToast()\" class=\"btn waves-effect waves-light\" type=\"submit\">Submit\n                    <i class=\"material-icons right\">send</i>\n                </button>\n            </div>\n        </form>\n    </div>\n</div>\n<div class=\"container\">\n  <h4> CSV Links </h4>\n  <table class=\"responsive-table\">\n        <thead>\n          <tr>\n              <th>Name</th>\n              <th>Link</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          <tr>\n            <td>rcpt_tot_val</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/rcpt_tot_val.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n          <tr>\n            <td>pay_qtr1_val</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/pay_qtr1_val.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n          <tr>\n            <td>pay_ann_val</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/pay_ann_val.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n          <tr>\n            <td>emp_mar12_num</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/emp_mar12_num.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n           <tr>\n            <td>post_edit_status_fields</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/post_edit_status_ields.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n           <tr>\n            <td>pre_db_writeback_for_leased</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/pre_db_writeback_for_leased.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n           <tr>\n            <td>unit_balance</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/unit_balance.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n           <tr>\n            <td>electricity</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/electricity.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n           <tr>\n            <td>derived_naics_code</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/derived_naics_code.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n          </tr>\n           <tr>\n            <td>classification</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/classification.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n            <tr>\n            <td>valid_zero</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/valid_zero.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n          <tr>\n            <td>best_admin_receipts</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/calculate_best_admin.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n          <tr>\n            <td>critical_error</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/critical_error.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n          <tr>\n            <td>completeness</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/completeness.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n          <tr>\n            <td>Interactive Mode</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/interactive_mode.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n          <tr>\n            <td>Geography</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/geography.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n           <tr>\n            <td>mfg_payqtr1</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/mfg_payroll_and_employment.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n           <tr>\n            <td>mfg_payann</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/mfg_payroll_and_employment.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n           <tr>\n            <td>mfg_empq1</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/mfg_payroll_and_employment.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n          <tr>\n            <td>valid_negative_value</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/valid_negative_value.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n            <tr>\n            <td>nonnorm_init_set_actvmio_opstats</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/nonnorm_init_set_actvmio_opstats.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n          <tr>\n            <td>set_basic_to_0</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/set_basic_to_0.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>Ï\n                    <tr>\n            <td>set_nonnorm</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/set_nonnorm.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n          <tr>\n            <td>nonnorm_set_opstats_actvmio</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/nonnorm_set_opstats_actvmio.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n            <tr>\n            <td>nonnorm_special_season_final</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/nonnorm_special_season_final.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n            <tr>\n            <td>nonnorm_router</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/nonnorm_router.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n\n           <tr>\n            <td>miv_lifo_valuation_method</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/miv_lifo_valuation_method.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n\n           <tr>\n            <td>evaluate_lifo_reserve</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/evaluate_lifo_reserve.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n\n           <tr>\n            <td>miv_evaluate_lifo_module</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/miv_evaluate_lifo_module.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n\n           <tr>\n            <td>miv_nonlifo_random</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/miv_nonlifo_random.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n\n           <tr>\n            <td>miv_evaluate_nonlifo_valuation_method</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/miv_evaluate_nonlifo_valuation_method.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n\n           <tr>\n            <td>miv_evaluate_detail_valuation_method</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/miv_evaluate_detail_valuation_method.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n\n           <tr>\n            <td>miv_evaluate_valuation_method_module</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/miv_evaluate_valuation_method_module.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n\n           <tr>\n            <td>miv_nonlifo_valuation_methods_module</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/miv_nonlifo_valuation_methods_module.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n\n           <tr>\n            <td>miv_inventories_balance</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/miv_inventories_balance.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n\n          <!-- -->\n            <tr>\n            <td>napcs_balance</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/napcs_balance.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n            <tr>\n            <td>napcs_balance_balancing</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/napcs_balance_balancing.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n            <tr>\n            <td>napcs_hdicat</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/napcs_hdicat.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n            <tr>\n            <td>napcs_m_goco</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/napcs_m_goco.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n            <tr>\n            <td>napcs_no_donor</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/napcs_no_donor.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n            <tr>\n            <td>napcs_recalculate_napcs_fields</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/napcs_recalculate_napcs_fields.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n            <tr>\n            <td>napcs_bl_rounding</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/napcs_bl_rounding.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n          <tr>\n            <td>load_referrals</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/load_referrals.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n          <tr>\n            <td>napcs_prep</td>\n            <td>\n              <a href=\"https://aies-qflow-modules.s3.us-gov-east-1.amazonaws.com/napcs_prep.csv?version={{msg.version}}\">\n                link\n              </a>\n            </td>\n          </tr>\n        </tbody>\n        \n      </table>\n</div>\n<!-- Initialize Materialize Components -->\n<script>\n    M.AutoInit();\n    function showToast() {\n        M.toast({html: 'Uploading...'});\n    }\n</script>\n\n</body>\n</html>\n",
        "output": "str",
        "x": 310,
        "y": 740,
        "wires": [
            [
                "737e44d2.373a64"
            ]
        ]
    },
    {
        "id": "737e44d2.373a64",
        "type": "http response",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 490,
        "y": 740,
        "wires": []
    },
    {
        "id": "7d8e179a.283e4",
        "type": "http response",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "",
        "x": 990,
        "y": 800,
        "wires": []
    },
    {
        "id": "25859a94.7d9976",
        "type": "http in",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "",
        "url": "/upload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 110,
        "y": 800,
        "wires": [
            [
                "d7e5df8b.97a4e8"
            ]
        ]
    },
    {
        "id": "e1643981.20d7c8",
        "type": "template",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "html",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Upload CSV File</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css\">\n    <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js\"></script>\n    <style>\n        /* Add custom styles for responsiveness */\n         .table-container {\n            width: 95%;\n            overflow-x: auto;\n            margin: 2%;\n        }\n        table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n\n        th, td {\n            border: 1px solid #dddddd;\n            text-align: left;\n            padding: 8px;\n        }\n\n        tr:nth-child(even) {\n            background-color: #f2f2f2;\n        }\n    </style>\n</head>\n<body>\n<nav>\n    <div class=\"blue nav-wrapper\">\n      <a href=\"#\" data-target=\"mobile-demo\" class=\"sidenav-trigger\"><i class=\"material-icons\">menu</i></a>\n      <ul class=\"left hide-on-med-and-down\">\n        <li><a class=\"bold\" href=\"/update_params\">Params</a></li>\n        <li><a class=\"bold\" href=\"/upload_page\">Upload csv</a></li>\n        <li><a class=\"bold\" href=\"/ui_wrapper\">UI</a></li>\n      </ul>\n    </div>\n  </nav>\n\n  <ul class=\"blue sidenav\" id=\"mobile-demo\">\n      <li><a class=\"bold\" href=\"/update_params\">Params</a></li>\n        <li><a class=\"bold\" href=\"/upload_page\">Upload csv</a></li>\n        <li><a class=\"bold\" href=\"/ui_wrapper\">UI</a></li>\n  </ul>\n\n  <div class=\"container\">\n    {{!-- <h1 class=\"center-align\">Uploaded</h1> --}}\n  </div>\n  <div id=\"hide_this_to_load\">{{payload}}</div>\n    <div class=\"table-container\">\n  <div id=\"load_table\"></div>\n  </div>\n  <p id=\"file_name\">{{name}}</p>\n    <div class=\"input-field center-align\">\n    <button onclick='saveCsv()' class=\"btn waves-effect waves-light\" type=\"submit\">Save\n    </button>\n     <a href='/ui_wrapper' class=\"btn waves-effect waves-light\" type=\"submit\">Go {{msg.filename}}\n    </a>\n  </div>\n<script>\n  let data = document.getElementById('hide_this_to_load').innerHTML\n  let file_name = document.getElementById('file_name').innerHTML\n  document.getElementById('hide_this_to_load').style.display = 'none';\n  document.getElementById('file_name').style.display = 'none';\n  data = JSON.parse(data);\n  let headers; \n  document.addEventListener('DOMContentLoaded', function() {\n    const loadTableDiv = document.getElementById('load_table');\n    const table = document.createElement('table');\n    table.classList.add('striped');\n    const tableHeader = document.createElement('thead');\n    const headerRow = document.createElement('tr');\n    headers = Object.keys(data[0]); // Set headers here\n    headers.forEach(headerText => {\n      const th = document.createElement('th');\n      th.textContent = headerText;\n      headerRow.appendChild(th);\n    });\n    tableHeader.appendChild(headerRow);\n    table.appendChild(tableHeader);\n    const tableBody = document.createElement('tbody');\n    data.forEach((item, index) => {\n      const row = document.createElement('tr');\n      headers.forEach(header => {\n        const cell = document.createElement('td');\n        if (index !== 0) { // Make fields editable for all rows except the header row\n          const input = document.createElement('input');\n          input.value = item[header];\n          input.addEventListener('input', function() {\n            item[header] = this.value;\n            const updatedJData = getUpdatedData();\n            // console.log(updatedJData);\n          });\n          cell.appendChild(input);\n        } else {\n          cell.textContent = item[header];\n        }\n        row.appendChild(cell);\n      });\n      tableBody.appendChild(row);\n    });\n    table.appendChild(tableBody);\n    loadTableDiv.appendChild(table);\n  });\n\n  function getUpdatedData() {\n    const updatedData = [];\n    const rows = document.querySelectorAll('#load_table tbody tr');\n    rows.forEach(row => {\n      const rowData = {};\n      const cells = row.querySelectorAll('td');\n      cells.forEach((cell, index) => {\n        const header = headers[index];\n        if (header) {\n          rowData[header] = cell.firstChild.value || cell.textContent;\n        }\n      });\n      updatedData.push(rowData);\n    });\n    return updatedData;\n  }\n  const jsonToCSV = (jsonArray) => {\n    const headers = Object.keys(jsonArray[0]);\n\n    let csv = headers.join(',') + '\\n';\n\n    jsonArray.forEach(obj => {\n        const values = headers.map(header => {\n            const escapedValue = obj[header].replace(/\"/g, '\\\\\"');\n            return `\"${escapedValue}\"`;\n        });\n        csv += values.join(',') + '\\n';\n    });\n\n    return csv;\n};\n  function saveCsv(){\n    console.log(JSON.stringify({filename: file_name, csvData:jsonToCSV(getUpdatedData())}))\n     fetch('/saveCsv', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({filename: file_name, csvData:jsonToCSV(getUpdatedData())})\n    })\n    .then(response => {\n      if (response.ok) {\n        console.log('Update successful!');\n      } else {\n        console.error('Error updating params:', response.status);\n      }\n    })\n    .catch(error => {\n      console.error('Error:', error);\n    });\n  }\n</script>\n\n\n</body>\n</html>\n",
        "output": "str",
        "x": 830,
        "y": 800,
        "wires": [
            [
                "7d8e179a.283e4"
            ]
        ]
    },
    {
        "id": "d7e5df8b.97a4e8",
        "type": "function",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "toBase64",
        "func": "msg.name = '/tmp/'+ msg.req.files[0].originalname;\nmsg.filename = msg.name;\n\nif (msg.req.files[0].mimetype.includes('image')) {\n    msg.payload = `<img src=\"data:image/gif;base64,${msg.req.files[0].buffer.toString('base64')}\">`;\n} else {\n    msg.payload = msg.req.files[0].buffer.toString();\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 800,
        "wires": [
            [
                "0464e4eb98976890",
                "81e3239593f9f1d1",
                "2319e5574f035f21"
            ]
        ]
    },
    {
        "id": "0464e4eb98976890",
        "type": "file",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "Write to /tmp on server",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 550,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "f5d8125e5f3946e2",
        "type": "ui_button",
        "z": "dad88d9a3132fed6",
        "d": true,
        "name": "Reset",
        "group": "a5b67787a0857995",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "9c2c34ae702579a8"
            ]
        ]
    },
    {
        "id": "9c2c34ae702579a8",
        "type": "function",
        "z": "dad88d9a3132fed6",
        "d": true,
        "name": "Reset all flow and global keys",
        "func": "// flow.set(\"moduleFacts\", [])\n// flow.set(\"originalData\", [])\n// //NK initialize global context\n// global.set(\"originalData\", [])\n// global.set(\"moduleFacts\", [])\n// global.set(\"ptrModuleFacts\",0)\n\n// global.set('filename', null)\n// // if(global.get(\"filename\")){\n// //     // msg.filename = global.get(\"filename\")\n// //     msg.payload = global.get(\"filename\")\n// //     return msg\n// // }\n// // else \n// msg.payload = null\n\n// Reset flow context variables\nflow.context().keys().forEach(function (key) {\n    flow.context().set(key, undefined);\n});\n\n// Reset global context variables\nglobal.context().keys().forEach(function (key) {\n    global.context().set(key, undefined);\n});\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "bf95042aa95f74b7",
        "type": "catch",
        "z": "dad88d9a3132fed6",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 460,
        "wires": [
            [
                "67218bea97f26dc5"
            ]
        ]
    },
    {
        "id": "67218bea97f26dc5",
        "type": "function",
        "z": "dad88d9a3132fed6",
        "name": "error message",
        "func": "msg.payload = msg.error.message\nglobal.set(\"ptrModuleFacts\",1)\n\nflow.set(\"moduleFacts\", [])\nflow.set(\"originalData\", [])\n//NK initialize global context\nglobal.set(\"originalData\", [])\nglobal.set(\"moduleFacts\", [])\nglobal.set(\"ptrModuleFacts\", 0)\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 460,
        "wires": [
            [
                "4345bc983bdc5ee2",
                "c7b88789c4731ee4"
            ]
        ]
    },
    {
        "id": "4345bc983bdc5ee2",
        "type": "ui_toast",
        "z": "dad88d9a3132fed6",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 590,
        "y": 460,
        "wires": []
    },
    {
        "id": "c7b88789c4731ee4",
        "type": "function",
        "z": "dad88d9a3132fed6",
        "name": "Reset counters",
        "func": "msg.ui_control = {\n    max: 1// Assuming msg.payload contains the row count\n};\n\nflow.set('moduleFacts', [])\nglobal.set('moduleFacts', [])\n\nglobal.set(\"ptrModuleFacts\", 1)\nglobal.set(\"originalData\", {})\n\n\nmsg.payload = 1\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 400,
        "wires": [
            [
                "3c92b89522e322f8",
                "aee5640ceffb474d"
            ]
        ]
    },
    {
        "id": "81e3239593f9f1d1",
        "type": "function",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "getFileName in payload",
        "func": "msg.payload=msg.filename\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 900,
        "wires": [
            [
                "12c94ce38056fc20"
            ]
        ]
    },
    {
        "id": "2b5207ce5d20fc0a",
        "type": "comment",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "Simple upload a file",
        "info": "",
        "x": 1390,
        "y": 780,
        "wires": []
    },
    {
        "id": "903ab3bdc5e84545",
        "type": "http in",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "",
        "url": "/update_params",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 2100,
        "wires": [
            [
                "070b2c6eb42b2ee1"
            ]
        ]
    },
    {
        "id": "26d5116b6bd90d58",
        "type": "template",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "html",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Update Params</title>\n   <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/jsoneditor/7.0.4/jsoneditor.css\" >\n   <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jsoneditor/7.0.4/jsoneditor.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.4/lodash.min.js\"></script>    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js\"></script>\n</head>\n  <style>\n  #jsoneditor {\n    max-width: 100%;\n    height: auto;\n  }\n  p {\n    max-width: 100%;\n    font-family: \"DejaVu Sans\", sans-serif;\n  }\n  .preload {\n    display: none;\n  }\n\n  @media screen and (max-width: 600px) {\n    #jsoneditor, p {\n      width: 100%;\n    }\n  }\n  .custom-border {\n  border: 1px solid #00F; /* Dark border color */\n}\n</style>\n\n<body>\n  <nav>\n    <div class=\"blue nav-wrapper\">\n      <a href=\"#\" data-target=\"mobile-demo\" class=\"sidenav-trigger\"><i class=\"material-icons\">menu</i></a>\n      <ul class=\"left hide-on-med-and-down\">\n        <li><a class=\"bold\" href=\"/update_params\">Params</a></li>\n        <li><a class=\"bold\" href=\"/upload_page\">Upload csv</a></li>\n        <li><a class=\"bold\" href=\"/ui_wrapper\">UI</a></li>\n        <li><a class=\"bold\" href=\"/test_ui\">Load DB</a></li>\n      </ul>\n    </div>\n  </nav>\n\n  <ul class=\"blue sidenav\" id=\"mobile-demo\">\n      <li><a class=\"bold\" href=\"/update_params\">Params</a></li>\n        <li><a class=\"bold\" href=\"/upload_page\">Upload csv</a></li>\n        <li><a class=\"bold\" href=\"/ui_wrapper\">UI</a></li>\n        <li><a class=\"bold\" href=\"/test_ui\">Load DB</a></li>\n  </ul>\n\n<div class=\"container\">\n    <h1 class=\"center-align\">Update Params</h1>\n      <select class=\"browser-default custom-border\">\n        <option value=\"\" disabled selected>Choose your option</option>\n    </select>\n    <br>\n      <div id=\"jsoneditor\"></div>\n      <div class=\"preload\" id=\"preload\">{{payload.payload}}</div>\n    <div class=\"row\">\n        <form action=\"/update_params\" method=\"GET\" enctype=\"multipart/form-data\" class=\"col s12\">\n            <div class=\"input-field center-align\">\n                <button class=\"btn waves-effect waves-light\" type=\"submit\">Update\n                </button>\n            </div>\n        </form>\n    </div>\n</div>\n\n<!-- Initialize Materialize Components -->\n<script>\n    M.AutoInit();\n    var elems = document.querySelectorAll('.sidenav');\n    var instances = M.Sidenav.init(elems);\n</script>\n\n</body>\n<script>\n  const container = document.getElementById(\"jsoneditor\");\n\nconst options = {\n  mode: \"tree\",\n  modes: [\"text\", \"tree\", \"view\", \"preview\"],\n  expandAll: true,\n  // example editable\n  onEditable: function(node) {\n    // node is an object like:\n    //   {\n    //     field: 'FIELD',\n    //     value: 'VALUE',\n    //     path: ['PATH', 'TO', 'NODE']\n    //   }\n    switch (node.field) {\n      case \"_id\":\n        return false;\n\n      case \"name\":\n        return {\n          field: false,\n          value: true\n        };\n\n      default:\n        return true;\n    }\n  },\n  //   on event example\n  onError: function(err) {\n    alert(err.toString());\n  },\n  onEvent: function(node, event) {\n    if (event.type === \"click\") {\n      let message = \"field: \" + node.field + \" | path: \" + node.path;\n      if (node.value) {\n        message += \" | value: \" + node.value;\n      }\n      console.log(message);\n      // console.log(node, event);\n      //       update json field position\n      const my_clipboard = \"{ x: -3755.9812, y: 140.43, z: -3287.19 }\";\n      let my_room;\n      let my_item;\n      let x_pos = 0.0;\n      let y_pos = 0.0;\n      let z_pos = 0.0;\n      let i_count = 1;\n      if (node.field === \"position\") {\n        // get x coordinate\n        const regex = /(?<=x:\\s{0,})(?<x_pos>\\-{0,1}\\d{0,}\\.{0,1}\\d{0,})|(?<=y:\\s{0,})(?<y_pos>\\-{0,1}\\d{0,}\\.{0,1}\\d{0,})|(?<=z:\\s{0,})(?<z_pos>\\-{0,1}\\d{0,}\\.{0,1}\\d{0,})/gm;\n        const str = my_clipboard;\n        let m;\n        // m = regex.exec(str);\n        // console.log('m:', m);\n        // todo? check if it is a string with coordinates x_pos is found\n\n        // // x_pos = parseFloat(m[2], 10);\n        // x_pos = Number(m[2]);\n        // console.log('regex:', m[0], '-', m[1], '-', m[2]);\n        // console.log('x_pos:', m.x_pos);\n\n                while ((m = regex.exec(str)) !== null) {\n                  // This is necessary to avoid infinite loops with zero-width matches\n                  console.log('i_count:', i_count, '|group 0:', m[0] );\n                  switch (i_count) {\n                    case 2:\n                      x_pos = Number(m[0]);\n                      console.log('x_pos:', x_pos);\n                      break;\n                    case 4:\n                      y_pos = Number(m[0]);\n                      break;\n                    case 6:\n                      z_pos = Number(m[0]);\n                      break;\n                  }\n                  if (m.index === regex.lastIndex) {\n                    regex.lastIndex++;\n                  }\n\n                  // The result can be accessed through the `m`-variable.\n                  m.forEach((match, groupIndex) => {\n                    console.log(`Found match, group ${groupIndex}: ${match}`);\n                  });\n                  i_count++;\n                };\n\n        my_room = node.path[1];\n        my_item = node.path[3];\n        console.log(\"node.path[3]: \", node.path[3]);\n        json[\"rooms\"][my_room][\"items\"][my_item][\"position\"][\"x\"] = x_pos;\n        json[\"rooms\"][my_room][\"items\"][my_item][\"position\"][\"y\"] = y_pos;\n        json[\"rooms\"][my_room][\"items\"][my_item][\"position\"][\"z\"] = z_pos;\n        console.log({json})\n        editor.update(json);\n        editor.getEditor('root.id').disable();\n        console.log(editor)\n      }\n    }\n\n    function prettyPrintPath(path) {\n      let str = \"\";\n      for (let i = 0; i < path.length; i++) {\n        const element = path[i];\n        if (typeof element === \"number\") {\n          str += \"[\" + element + \"]\";\n        } else {\n          if (str.length > 0) str += \",\";\n          str += element;\n        }\n      }\n      return str;\n    }\n  }\n};\nconst j = document.getElementById(\"preload\").innerHTML;\nconst parsedJson = JSON.parse(j)\n\nconst selectElement = document.querySelector('.browser-default');\n\nconst selectOptions = parsedJson.params.map(i=> {\n  return { value: i.id, text: i.module + ' - ' + i.param }\n})\n\nselectOptions.forEach(option => {\n    const optionElement = document.createElement('option');\n    optionElement.value = option.value;\n    optionElement.text = option.text;\n    optionElement.disabled = option.disabled;\n    optionElement.selected = option.selected;\n    selectElement.appendChild(optionElement);\n});\nlet editor = new JSONEditor(container, options, {})\nlet selectedValue\nselectElement.addEventListener('change', function() {\n    selectedValue = this.value;\n    // editor = new JSONEditor(container, options, parsedJson?.params.find(i => i.id == selectedValue));\n    //  let dataToUpdate = parsedJson?.params.find(i => i => i.id == selectedValue)\n    // console.log({selectedValue, parsedJson, dataToUpdate: parsedJson?.params.find(i => i => i.id == selectedValue)});\n    //  console.log({\n    //   id: dataToUpdate.id,\n    //   json_values: dataToUpdate.json_values,\n    //   values: dataToUpdate.values\n    //  })\n      console.log(parsedJson?.params.map(i => {\n        if(i.id == selectedValue){\n          return i\n        }else{\n          return null;\n        }\n      }).filter(Boolean)[0])\n     editor.update(parsedJson?.params.map(i => {\n        if(i.id == selectedValue){\n          return {\n            json_values: i.json_values,\n            values: i.values,\n            // id: i.id\n          }\n        }else{\n          return null;\n        }\n      }).filter(Boolean)[0])\n      editor.getEditor('root.id').disable();\n     });\n// });\n// editor = new JSONEditor(container, options, {\n//     json_values: parsedJson.json_values,\n//     values: parsedJson.values\n// });\n  document.querySelector('form').addEventListener('submit', function(e) {\n    e.preventDefault();\n    const updatedJson = editor.get(); \n    console.log(updatedJson); \n      fetch('https://mc.edl-7529180-ite.ite.edl.census.gov/api/params/' + selectedValue, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({updatedValues:updatedJson})\n    })\n    .then(response => {\n      if (response.ok) {\n        console.log('Update successful!');\n      } else {\n        console.error('Error updating params:', response.status);\n      }\n    })\n    .catch(error => {\n      console.error('Error:', error);\n    });\n  });\n  // });\n\n  </script>\n</html>",
        "output": "str",
        "x": 970,
        "y": 2100,
        "wires": [
            [
                "eec857548bfbe6b5"
            ]
        ]
    },
    {
        "id": "eec857548bfbe6b5",
        "type": "http response",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1110,
        "y": 2100,
        "wires": []
    },
    {
        "id": "193adf68b854c196",
        "type": "http request",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://ec2-18-252-7-95.us-gov-east-1.compute.amazonaws.com/api/params?module=classification&params=naics_alt,naics_validation&program=aies&unit_type=estab",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 130,
        "y": 1980,
        "wires": [
            [
                "2fd70cb03d1b3cb7"
            ]
        ]
    },
    {
        "id": "2fd70cb03d1b3cb7",
        "type": "function",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "function 29",
        "func": "msg.payload.payload = JSON.stringify({\n    values: msg.payload.data[0].values,\n    json_values: msg.payload.data[0].json_values,\n    id: msg.payload.data[0].id\n});\n// msg.payload.payload = JSON.stringify(msg.payload.data[0].json_values);\n// msg.payload.id = JSON.stringify(msg.payload.data[0].id);\n// msg.payload.values = JSON.stringify({\n//     values: msg.payload.data[0].values,\n//     json_values: msg.payload.data[0].json_values\n// });\n\n// msg.payload = msg.payload.data[0].json_values;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1980,
        "wires": [
            [
                "23ffb00caa077b23"
            ]
        ]
    },
    {
        "id": "399608507ce305d7",
        "type": "http request",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://mc.edl-7529180-ite.ite.edl.census.gov/api/params/params",
        "tls": "b7b0a64e307b71f5",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": true,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 2100,
        "wires": [
            [
                "62a7ab56c461f544"
            ]
        ]
    },
    {
        "id": "65738b3d68734570",
        "type": "http in",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "",
        "url": "/ui_wrapper",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 2040,
        "wires": [
            [
                "ea0778e9f5cd9498"
            ]
        ]
    },
    {
        "id": "62a7ab56c461f544",
        "type": "function",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "function 30",
        "func": "msg.payload.payload = JSON.stringify({params: msg.payload.data});\n// msg.payload.payload = JSON.stringify(msg.payload.data[0].json_values);\n// msg.payload.id = JSON.stringify(msg.payload.data[0].id);\n// msg.payload.values = JSON.stringify({\n//     values: msg.payload.data[0].values,\n//     json_values: msg.payload.data[0].json_values\n// });\n\n// msg.payload = msg.payload.data[0].json_values;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 2100,
        "wires": [
            [
                "26d5116b6bd90d58"
            ]
        ]
    },
    {
        "id": "23ffb00caa077b23",
        "type": "template",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "html",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Update Params</title>\n   <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/jsoneditor/7.0.4/jsoneditor.css\" >\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jsoneditor/7.0.4/jsoneditor.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.4/lodash.min.js\"></script>    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js\"></script>\n</head>\n  <style>\n  #jsoneditor {\n    max-width: 100%;\n    height: auto;\n  }\n  p {\n    max-width: 100%;\n    font-family: \"DejaVu Sans\", sans-serif;\n  }\n  .preload {\n    display: none;\n  }\n\n  @media screen and (max-width: 600px) {\n    #jsoneditor, p {\n      width: 100%;\n    }\n  }\n</style>\n\n<body>\n <nav>\n    <div class=\"nav-wrapper\">\n      <a href=\"#\" class=\"brand-logo ml-5\"> Cencus</a>\n      <ul id=\"nav-mobile\" class=\"right hide-on-med-and-down\">\n        <li><a href=\"/update_params\">Params</a></li>\n        <li><a href=\"/upload_page\">Upload csv</a></li>\n        <li><a href=\"/ui\">UI</a></li>\n        <li><a class=\"bold\" href=\"/test_ui\">Load DB</a></li>\n      </ul>\n    </div>\n  </nav>\n<div class=\"container\">\n    <h1 class=\"center-align\">Update Params</h1>\n      <select class=\"browser-default\">\n        <option value=\"\" disabled selected>Choose your option</option>\n        <option value=\"1\">Option 1</option>\n        <option value=\"2\">Option 2</option>\n        <option value=\"3\">Option 3</option>\n    </select>\n    <br>\n      <div id=\"jsoneditor\"></div>\n      <div class=\"preload\" id=\"preload\">{{payload.payload}}</div>\n    <div class=\"row\">\n        <form action=\"/update_params\" method=\"GET\" enctype=\"multipart/form-data\" class=\"col s12\">\n            <div class=\"input-field center-align\">\n                <button class=\"btn waves-effect waves-light\" type=\"submit\">Update\n                </button>\n            </div>\n        </form>\n    </div>\n</div>\n\n<!-- Initialize Materialize Components -->\n<script>\n    M.AutoInit();\n</script>\n\n</body>\n<script>\n  const container = document.getElementById(\"jsoneditor\");\n\nconst options = {\n  mode: \"tree\",\n  modes: [\"text\", \"tree\", \"view\", \"preview\"],\n  expandAll: true,\n  // example editable\n  onEditable: function(node) {\n    // node is an object like:\n    //   {\n    //     field: 'FIELD',\n    //     value: 'VALUE',\n    //     path: ['PATH', 'TO', 'NODE']\n    //   }\n    switch (node.field) {\n      case \"_id\":\n        return false;\n\n      case \"name\":\n        return {\n          field: false,\n          value: true\n        };\n\n      default:\n        return true;\n    }\n  },\n  //   on event example\n  onError: function(err) {\n    alert(err.toString());\n  },\n  onEvent: function(node, event) {\n    if (event.type === \"click\") {\n      let message = \"field: \" + node.field + \" | path: \" + node.path;\n      if (node.value) {\n        message += \" | value: \" + node.value;\n      }\n      console.log(message);\n      // console.log(node, event);\n      //       update json field position\n      const my_clipboard = \"{ x: -3755.9812, y: 140.43, z: -3287.19 }\";\n      let my_room;\n      let my_item;\n      let x_pos = 0.0;\n      let y_pos = 0.0;\n      let z_pos = 0.0;\n      let i_count = 1;\n      if (node.field === \"position\") {\n        // get x coordinate\n        const regex = /(?<=x:\\s{0,})(?<x_pos>\\-{0,1}\\d{0,}\\.{0,1}\\d{0,})|(?<=y:\\s{0,})(?<y_pos>\\-{0,1}\\d{0,}\\.{0,1}\\d{0,})|(?<=z:\\s{0,})(?<z_pos>\\-{0,1}\\d{0,}\\.{0,1}\\d{0,})/gm;\n        const str = my_clipboard;\n        let m;\n        // m = regex.exec(str);\n        // console.log('m:', m);\n        // todo? check if it is a string with coordinates x_pos is found\n\n        // // x_pos = parseFloat(m[2], 10);\n        // x_pos = Number(m[2]);\n        // console.log('regex:', m[0], '-', m[1], '-', m[2]);\n        // console.log('x_pos:', m.x_pos);\n\n                while ((m = regex.exec(str)) !== null) {\n                  // This is necessary to avoid infinite loops with zero-width matches\n                  console.log('i_count:', i_count, '|group 0:', m[0] );\n                  switch (i_count) {\n                    case 2:\n                      x_pos = Number(m[0]);\n                      console.log('x_pos:', x_pos);\n                      break;\n                    case 4:\n                      y_pos = Number(m[0]);\n                      break;\n                    case 6:\n                      z_pos = Number(m[0]);\n                      break;\n                  }\n                  if (m.index === regex.lastIndex) {\n                    regex.lastIndex++;\n                  }\n\n                  // The result can be accessed through the `m`-variable.\n                  m.forEach((match, groupIndex) => {\n                    console.log(`Found match, group ${groupIndex}: ${match}`);\n                  });\n                  i_count++;\n                };\n\n        my_room = node.path[1];\n        my_item = node.path[3];\n        console.log(\"node.path[3]: \", node.path[3]);\n        json[\"rooms\"][my_room][\"items\"][my_item][\"position\"][\"x\"] = x_pos;\n        json[\"rooms\"][my_room][\"items\"][my_item][\"position\"][\"y\"] = y_pos;\n        json[\"rooms\"][my_room][\"items\"][my_item][\"position\"][\"z\"] = z_pos;\n        console.log({json})\n        editor.update(json);\n        console.log(editor)\n      }\n    }\n\n    function prettyPrintPath(path) {\n      let str = \"\";\n      for (let i = 0; i < path.length; i++) {\n        const element = path[i];\n        if (typeof element === \"number\") {\n          str += \"[\" + element + \"]\";\n        } else {\n          if (str.length > 0) str += \",\";\n          str += element;\n        }\n      }\n      return str;\n    }\n  }\n};\nconst j = document.getElementById(\"preload\").innerHTML;\nconst parsedJson = JSON.parse(j)\nconst editor = new JSONEditor(container, options, {\n    json_values: parsedJson.json_values,\n    values: parsedJson.values\n});\n  document.querySelector('form').addEventListener('submit', function(e) {\n    e.preventDefault();\n    const updatedJson = editor.get(); \n    console.log(updatedJson); \n      fetch('http://localhost:3000/params/' + parsedJson.id, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({updatedValues:updatedJson})\n    })\n    .then(response => {\n      if (response.ok) {\n        console.log('Update successful!');\n      } else {\n        console.error('Error updating params:', response.status);\n      }\n    })\n    .catch(error => {\n      console.error('Error:', error);\n    });\n  });\n  // });\n\n  </script>\n</html>",
        "output": "str",
        "x": 530,
        "y": 1980,
        "wires": [
            [
                "6b05d518e4c1bc47"
            ]
        ]
    },
    {
        "id": "6b05d518e4c1bc47",
        "type": "http response",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 670,
        "y": 1980,
        "wires": []
    },
    {
        "id": "ea0778e9f5cd9498",
        "type": "template",
        "z": "dad88d9a3132fed6",
        "name": "html",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Update Params</title>\n   <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/jsoneditor/7.0.4/jsoneditor.css\" >\n   <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jsoneditor/7.0.4/jsoneditor.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.4/lodash.min.js\"></script>    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js\"></script>\n</head>\n  <style>\n        iframe {\n            width: 100%;\n            height: 100vh;\n            border: none;\n        }\n  #jsoneditor {\n    max-width: 100%;\n    height: auto;\n  }\n  p {\n    max-width: 100%;\n    font-family: \"DejaVu Sans\", sans-serif;\n  }\n  .preload {\n    display: none;\n  }\n\n  @media screen and (max-width: 600px) {\n    #jsoneditor, p {\n      width: 100%;\n    }\n  }\n</style>\n\n<body>\n  <nav>\n    <div class=\"blue nav-wrapper\">\n      <a href=\"#\" data-target=\"mobile-demo\" class=\"sidenav-trigger\"><i class=\"material-icons\">menu</i></a>\n      <ul class=\"left hide-on-med-and-down\">\n        <li><a class=\"bold\" href=\"/update_params\">Params</a></li>\n        <li><a class=\"bold\" href=\"/upload_page\">Upload csv</a></li>\n        <li><a class=\"bold\" href=\"/ui_wrapper\">UI</a></li>\n        <li><a class=\"bold\" href=\"/test_ui\">Load DB</a></li>\n      </ul>\n    </div>\n  </nav>\n\n  <ul class=\"blue sidenav\" id=\"mobile-demo\">\n      <li><a class=\"bold\" href=\"/update_params\">Params</a></li>\n        <li><a class=\"bold\" href=\"/upload_page\">Upload csv</a></li>\n        <li><a class=\"bold\" href=\"/ui_wrapper\">UI</a></li>\n        <li><a class=\"bold\" href=\"/test_ui\">Load DB</a></li>\n  </ul>\n\n\n    <iframe src=\"/ui\"></iframe>\n\n\n<!-- Initialize Materialize Components -->\n<script>\n    M.AutoInit();\n    var elems = document.querySelectorAll('.sidenav');\n    var instances = M.Sidenav.init(elems);\n</script>\n\n</body>\n</html>",
        "output": "str",
        "x": 310,
        "y": 2040,
        "wires": [
            [
                "74662df4569846c9"
            ]
        ]
    },
    {
        "id": "74662df4569846c9",
        "type": "http response",
        "z": "dad88d9a3132fed6",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 450,
        "y": 2040,
        "wires": []
    },
    {
        "id": "2319e5574f035f21",
        "type": "function",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "function 31",
        "func": "msg.payload.payload = JSON.stringify({params: msg.payload});\n\nconst csvToJSON = (csv) => {\n    const lines = csv.split('\\n');\n    const headers = lines[0].split(',');\n    const result = [];\n    for (let i = 1; i < lines.length; i++) {\n        const obj = {};\n        const currentLine = lines[i].split(',');\n        for (let j = 0; j < headers.length; j++) {\n            obj[headers[j]] = currentLine[j];\n        }\n        result.push(obj);\n    }\n    return result;\n};\n\nconst csvString = msg.payload;\n\nconst jsonData = csvToJSON(csvString);\nmsg.payload = JSON.stringify(jsonData, null, 2);\n\n// msg.payload.payload = JSON.stringify(msg.payload.data[0].json_values);\n// msg.payload.id = JSON.stringify(msg.payload.data[0].id);\n// msg.payload.values = JSON.stringify({\n//     values: msg.payload.data[0].values,\n//     json_values: msg.payload.data[0].json_values\n// });\n\n// msg.payload = msg.payload.data[0].json_values;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 800,
        "wires": [
            [
                "e1643981.20d7c8"
            ]
        ]
    },
    {
        "id": "2e210837e211c8be",
        "type": "http in",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "",
        "url": "/saveCsv",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 120,
        "y": 1020,
        "wires": [
            [
                "20ef4922bea8d7fd"
            ]
        ]
    },
    {
        "id": "20ef4922bea8d7fd",
        "type": "function",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "toBase64",
        "func": "// msg.name = '/tmp/'+ msg.payload.filename\nmsg.name = msg.payload.filename\nmsg.filename = msg.name;\nmsg.payload = msg.payload.csvData;\n// console.log(\"=====\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1020,
        "wires": [
            [
                "0464e4eb98976890"
            ]
        ]
    },
    {
        "id": "89e7e315b3a8c30b",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out post edit",
        "mode": "link",
        "links": [
            "f2f56f84d002ec0f"
        ],
        "x": 1565,
        "y": 2640,
        "wires": []
    },
    {
        "id": "ba5d5bdad0bc957e",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out post edit",
        "mode": "link",
        "links": [
            "d946e5bca62e02d1"
        ],
        "x": 1615,
        "y": 2660,
        "wires": []
    },
    {
        "id": "8434c6c16c1fbaaf",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out post edit",
        "mode": "link",
        "links": [
            "3cd3e107ac0789b7"
        ],
        "x": 1665,
        "y": 2680,
        "wires": []
    },
    {
        "id": "24ae978c7feb5fc3",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out post edit",
        "mode": "link",
        "links": [
            "affe73445eec8a4f"
        ],
        "x": 1715,
        "y": 2700,
        "wires": []
    },
    {
        "id": "b9b9acc35bdd0b75",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out post edit",
        "mode": "link",
        "links": [
            "1c611eb0c30a9863"
        ],
        "x": 1765,
        "y": 2720,
        "wires": []
    },
    {
        "id": "43545e3b96e7f60c",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out post edit",
        "mode": "link",
        "links": [
            "a9fa566fb3fb1f74"
        ],
        "x": 1805,
        "y": 2740,
        "wires": []
    },
    {
        "id": "d5aac8a297ee6dd2",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out post edit",
        "mode": "link",
        "links": [
            "b16c9d56493fb914"
        ],
        "x": 1845,
        "y": 2760,
        "wires": []
    },
    {
        "id": "5d05b108e4e3f722",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out post edit",
        "mode": "link",
        "links": [
            "b9aedad7e15bc0ed"
        ],
        "x": 1925,
        "y": 2800,
        "wires": []
    },
    {
        "id": "28494dbc74f30091",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out post edit",
        "mode": "link",
        "links": [
            "76691f5ac3362ba9"
        ],
        "x": 1885,
        "y": 2780,
        "wires": []
    },
    {
        "id": "8272974b9a32a0ac",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out post edit",
        "mode": "link",
        "links": [
            "8eacd61d364bbafe"
        ],
        "x": 1965,
        "y": 2820,
        "wires": []
    },
    {
        "id": "819f7cf369712137",
        "type": "ui_button",
        "z": "dad88d9a3132fed6",
        "d": true,
        "name": "Load DB",
        "group": "a5b67787a0857995",
        "order": 3,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Load DB",
        "tooltip": "",
        "color": "#FFF",
        "bgcolor": "#2196F3",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 80,
        "y": 220,
        "wires": [
            [
                "44e2b4944a4b9567"
            ]
        ]
    },
    {
        "id": "44e2b4944a4b9567",
        "type": "postgresql",
        "z": "dad88d9a3132fed6",
        "d": true,
        "name": "SELECT",
        "query": "SELECT * FROM product_aies.item_estabs_2023a1 limit 10;\n",
        "postgreSQLConfig": "481a641c4005d1c8",
        "split": false,
        "rowsPerMsg": "1",
        "outputs": 1,
        "x": 220,
        "y": 220,
        "wires": [
            [
                "31926946d13b83fa"
            ]
        ]
    },
    {
        "id": "31926946d13b83fa",
        "type": "function",
        "z": "dad88d9a3132fed6",
        "name": "toUpperCaseDBCols",
        "func": "flow.set(\"moduleFacts\", [])\nflow.set(\"originalData\", [])\n//NK initialize global context\nglobal.set(\"originalData\", [])\nglobal.set(\"moduleFacts\", [])\nglobal.set(\"ptrModuleFacts\",0)\n\n\n\nconst result = msg.payload.map(obj => Object.fromEntries(Object.entries(obj).map(([key, val]) => [key.toUpperCase(), val])));\nmsg.payload.csv = result;\nmsg.payload.length = msg.pgsql.rowCount\n// console.log(msg.payload.csv)\n\nlet p = msg.payload.csv;\nmsg.payload = p;\n\nlet ptr = global.get(\"ptrModuleFacts\"); //HF\n\nflow.set('moduleFacts', p)\nglobal.set('moduleFacts', p)\nglobal.set('originalData', p[ptr]) //HF\n// global.set('originalData', p[0]) //NK\nmsg.topic = 'csv'\nmsg.ui_control = {\n    max: p.length // Assuming msg.payload contains the row count\n};\nmsg.payload.name = \"p\"\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 220,
        "wires": [
            [
                "8ff713c60410aa36",
                "8fc8da4acdeb51a4"
            ]
        ]
    },
    {
        "id": "08daf4161eddc269",
        "type": "http response",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 490,
        "y": 2280,
        "wires": []
    },
    {
        "id": "d990e40c5e545d4e",
        "type": "http in",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "",
        "url": "/test_ui",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 2280,
        "wires": [
            [
                "733a9e511bb97033"
            ]
        ]
    },
    {
        "id": "733a9e511bb97033",
        "type": "template",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "html",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Upload CSV File</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css\">\n    <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js\"></script>\n    <style>\n        /* Add custom styles for responsiveness */\n         .table-container {\n            width: 95%;\n            overflow-x: auto;\n            margin: 2%;\n        }\n        table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n\n        th, td {\n            border: 1px solid #dddddd;\n            text-align: left;\n            padding: 8px;\n        }\n\n        tr:nth-child(even) {\n            background-color: #f2f2f2;\n        }\n    </style>\n</head>\n<body>\n<nav>\n    <div class=\"blue nav-wrapper\">\n      <a href=\"#\" data-target=\"mobile-demo\" class=\"sidenav-trigger\"><i class=\"material-icons\">menu</i></a>\n      <ul class=\"left hide-on-med-and-down\">\n        <li><a class=\"bold\" href=\"/update_params\">Params</a></li>\n        <li><a class=\"bold\" href=\"/upload_page\">Upload csv</a></li>\n        <li><a class=\"bold\" href=\"/ui_wrapper\">UI</a></li>\n        <li><a class=\"bold\" href=\"/test_ui\">Load DB</a></li>\n      </ul>\n    </div>\n  </nav>\n\n  <ul class=\"blue sidenav\" id=\"mobile-demo\">\n      <li><a class=\"bold\" href=\"/update_params\">Params</a></li>\n        <li><a class=\"bold\" href=\"/upload_page\">Upload csv</a></li>\n        <li><a class=\"bold\" href=\"/ui_wrapper\">UI</a></li>\n        <li><a class=\"bold\" href=\"/test_ui\">Load DB</a></li>\n  </ul>\n\n<div class=\"container mt-4 pt-4\">\n    <form id=\"dynamicForm\" action=\"/ui_test_post\" method=\"POST\">\n        <div id=\"inputContainer\"></div>\n        <button type=\"button\" class=\"btn blue waves-effect waves-light\" onclick=\"addInputField()\">Add Field\n            <i class=\"material-icons right\">add</i>\n        </button>\n        <button type=\"submit\" class=\"btn blue waves-effect waves-light\" onclick=\"getValues()\">Get Values\n            <i class=\"material-icons right\">send</i>\n        </button>\n    </form>\n</div>\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js\"></script>\n<script>\n    let inputCounter = 1;\n\n    function addInputField() {\n        const inputContainer = document.getElementById('inputContainer');\n        const newDiv = document.createElement('div');\n        newDiv.className = 'input-field';\n        const newInput = document.createElement('input');\n        newInput.type = 'text';\n        newInput.name = 'input' + inputCounter;\n        newInput.id = 'input' + inputCounter;\n        newDiv.appendChild(newInput);\n        inputContainer.appendChild(newDiv);\n        inputCounter++;\n    }\n\n    function getValues() {\n        const form = document.getElementById('dynamicForm');\n        form.submit();\n    }\n</script>\n\n</body>\n</html>\n",
        "output": "str",
        "x": 330,
        "y": 2280,
        "wires": [
            [
                "08daf4161eddc269"
            ]
        ]
    },
    {
        "id": "3a09eefeb46e3070",
        "type": "template",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "html",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Upload CSV File</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css\">\n    <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js\"></script>\n    <style>\n        /* Add custom styles for responsiveness */\n         .table-container {\n            width: 95%;\n            overflow-x: auto;\n            margin: 2%;\n        }\n        table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n\n        th, td {\n            border: 1px solid #dddddd;\n            text-align: left;\n            padding: 8px;\n        }\n\n        tr:nth-child(even) {\n            background-color: #f2f2f2;\n        }\n    </style>\n</head>\n<body>\n<nav>\n    <div class=\"blue nav-wrapper\">\n      <a href=\"#\" data-target=\"mobile-demo\" class=\"sidenav-trigger\"><i class=\"material-icons\">menu</i></a>\n      <ul class=\"left hide-on-med-and-down\">\n        <li><a class=\"bold\" href=\"/update_params\">Params</a></li>\n        <li><a class=\"bold\" href=\"/upload_page\">Upload csv</a></li>\n        <li><a class=\"bold\" href=\"/ui_wrapper\">UI</a></li>\n        <li><a class=\"bold\" href=\"/test_ui\">Load DB</a></li>\n      </ul>\n    </div>\n  </nav>\n\n  <ul class=\"blue sidenav\" id=\"mobile-demo\">\n      <li><a class=\"bold\" href=\"/update_params\">Params</a></li>\n        <li><a class=\"bold\" href=\"/upload_page\">Upload csv</a></li>\n        <li><a class=\"bold\" href=\"/ui_wrapper\">UI</a></li>\n        <li><a class=\"bold\" href=\"/test_ui\">Load DB</a></li>\n  </ul>\n\n  <div class=\"container\">\n    {{!-- <h1 class=\"center-align\">Uploaded</h1> --}}\n  </div>\n  <div id=\"hide_this_to_load\">{{payload}}</div>\n    <div class=\"table-container\">\n  <div id=\"load_table\"></div>\n  </div>\n  <p id=\"file_name\">{{name}}</p>\n   <p id=\"new_vars\">{{newVars}}</p>\n    <div class=\"input-field center-align\">\n    <button onclick='saveCsv()' class=\"btn waves-effect waves-light\" type=\"submit\">Save\n    </button>\n     <a href='/ui_wrapper' class=\"btn waves-effect waves-light\" type=\"submit\">Go {{name}}\n    </a>\n  </div>\n<script>\n  let data = document.getElementById('hide_this_to_load').innerHTML\n  let file_name = document.getElementById('file_name').innerHTML\n  let new_vars = document.getElementById('new_vars').innerHTML\n  \n  document.getElementById('new_vars').style.display = 'none';\n  document.getElementById('hide_this_to_load').style.display = 'none';\n  document.getElementById('file_name').style.display = 'none';\n  data = JSON.parse(data);\n  new_vars = JSON.parse(new_vars);\n  let headers; \n  document.addEventListener('DOMContentLoaded', function() {\n    const loadTableDiv = document.getElementById('load_table');\n    const table = document.createElement('table');\n    table.classList.add('striped');\n    const tableHeader = document.createElement('thead');\n    const headerRow = document.createElement('tr');\n    headers = [...new_vars.newVars.map(i=>i.toUpperCase()), ...(Object.keys(data[0]))]; // Set headers here\n    headers.forEach(headerText => {\n      const th = document.createElement('th');\n      th.textContent = headerText;\n      headerRow.appendChild(th);\n    });\n    tableHeader.appendChild(headerRow);\n    table.appendChild(tableHeader);\n    const tableBody = document.createElement('tbody');\n    data.forEach((item, index) => {\n      const row = document.createElement('tr');\n      headers.forEach(header => {\n        const cell = document.createElement('td');\n        cell.style.minWidth = '200px';\n        if (index !== -1) { // Make fields editable for all rows except the header row\n          const input = document.createElement('input');\n          input.value = item[header] == undefined ? 'NULL': item[header];\n          input.addEventListener('input', function() {\n            item[header] = this.value;\n            const updatedJData = getUpdatedData();\n            // console.log(updatedJData);\n          });\n          cell.appendChild(input);\n        } else {\n          cell.textContent = item[header];\n        }\n        row.appendChild(cell);\n      });\n      tableBody.appendChild(row);\n    });\n    table.appendChild(tableBody);\n    loadTableDiv.appendChild(table);\n  });\n\n  function getUpdatedData() {\n    const updatedData = [];\n    const rows = document.querySelectorAll('#load_table tbody tr');\n    rows.forEach(row => {\n      const rowData = {};\n      const cells = row.querySelectorAll('td');\n      cells.forEach((cell, index) => {\n        const header = headers[index];\n        if (header) {\n          rowData[header] = cell.firstChild.value || cell.textContent;\n        }\n      });\n      updatedData.push(rowData);\n    });\n    return updatedData;\n  }\n  const jsonToCSV = (jsonArray) => {\n    const headers = Object.keys(jsonArray[0]);\n\n    let csv = headers.join(',') + '\\n';\n\n    jsonArray.forEach(obj => {\n        const values = headers.map(header => {\n            const escapedValue = obj[header].replace(/\"/g, '\\\\\"');\n            return `\"${escapedValue}\"`;\n        });\n        csv += values.join(',') + '\\n';\n    });\n\n    return csv;\n};\n\n  function saveCsv(){\n    console.log(JSON.stringify({filename: file_name, csvData:jsonToCSV(getUpdatedData())}))\n     fetch('/saveCsv', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({filename: '/tmp/' + file_name, csvData:jsonToCSV(getUpdatedData())})\n    })\n    .then(response => {\n      if (response.ok) {\n        console.log('Update successful!');\n      } else {\n        console.error('Error updating params:', response.status);\n      }\n    })\n    .catch(error => {\n      console.error('Error:', error);\n    });\n  }\n</script>\n\n\n</body>\n</html>\n",
        "output": "str",
        "x": 1110,
        "y": 2360,
        "wires": [
            [
                "9ff082949b495698"
            ]
        ]
    },
    {
        "id": "76ae33256827ae89",
        "type": "http in",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "",
        "url": "/ui_test_post",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 230,
        "y": 2360,
        "wires": [
            [
                "f192e59528bfd677"
            ]
        ]
    },
    {
        "id": "f192e59528bfd677",
        "type": "function",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "Get Body",
        "func": "msg.newVars = Object.values(msg.payload)\nmsg.name = 'DB_DATA.csv'\nflow.set(\"moduleFacts\", [])\nflow.set(\"originalData\", [])\n//NK initialize global context\nglobal.set(\"originalData\", [])\nglobal.set(\"moduleFacts\", [])\nglobal.set(\"ptrModuleFacts\", 0)\nglobal.set(\"filename\", '/tmp/DB_DATA.csv')\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 2360,
        "wires": [
            [
                "9e0c70dcbb4236fd"
            ]
        ]
    },
    {
        "id": "9ff082949b495698",
        "type": "http response",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1290,
        "y": 2360,
        "wires": []
    },
    {
        "id": "aecaf71d99c7d88b",
        "type": "function",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "toUpperCaseDBCols",
        "func": "flow.set(\"moduleFacts\", [])\nflow.set(\"originalData\", [])\nglobal.set(\"originalData\", [])\nglobal.set(\"moduleFacts\", [])\nglobal.set(\"ptrModuleFacts\",0)\nglobal.set(\"filename\", '/tmp/DB_DATA.csv')\n\n\n// .map(obj => Object.fromEntries(Object.entries(obj).map(([key, val]) => [key.toUpperCase(), val])));\n// // \nmsg.payload.csv = msg.payload.data.map(obj => Object.fromEntries(Object.entries(obj).map(([key, val]) => [key.toUpperCase(), val])));\nmsg.payload.length = msg.payload.data.length\n\nlet p = msg.payload.csv;\nmsg.payload = p;\n\nlet ptr = global.get(\"ptrModuleFacts\"); //HF\n\nflow.set('moduleFacts', p)\nglobal.set('moduleFacts', p)\nglobal.set('originalData', p[ptr]) //HF\nmsg.topic = 'csv'\nmsg.ui_control = {\n    max: p.length // Assuming msg.payload contains the row count\n};\nmsg.payload = JSON.stringify(msg.payload, null, 2);\n\nmsg.newVars = JSON.stringify({newVars: msg.newVars}, null, 2);\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 2360,
        "wires": [
            [
                "3a09eefeb46e3070",
                "3243d670e9d24a2d"
            ]
        ]
    },
    {
        "id": "270941def4b7c8b6",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out post edit",
        "mode": "link",
        "links": [
            "3a3f1620dbce8bb0"
        ],
        "x": 2005,
        "y": 2840,
        "wires": []
    },
    {
        "id": "fbcbf9510de0509c",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out post edit",
        "mode": "link",
        "links": [
            "384ea40a25aa8e76",
            "75f86abbfa78b4ab"
        ],
        "x": 2035,
        "y": 2860,
        "wires": []
    },
    {
        "id": "5bf7f51448d5e055",
        "type": "Kafka Admin",
        "z": "dad88d9a3132fed6",
        "name": "",
        "x": 630,
        "y": 2220,
        "wires": [
            [
                "7b578c41f67e5310"
            ],
            [
                "7b578c41f67e5310"
            ]
        ]
    },
    {
        "id": "395ec4e45f0e2746",
        "type": "http in",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "",
        "url": "/kafka_ui_test_post",
        "method": "get",
        "upload": true,
        "swaggerDoc": "",
        "x": 170,
        "y": 2220,
        "wires": [
            [
                "e04eedac58c69ed1"
            ]
        ]
    },
    {
        "id": "e04eedac58c69ed1",
        "type": "function",
        "z": "dad88d9a3132fed6",
        "name": "Get Body",
        "func": "msg.newVars = Object.values(msg.payload)\nmsg.name = 'DB_DATA.csv'\nflow.set(\"moduleFacts\", [])\nflow.set(\"originalData\", [])\n//NK initialize global context\nglobal.set(\"originalData\", [])\nglobal.set(\"moduleFacts\", [])\nglobal.set(\"ptrModuleFacts\", 0)\nglobal.set(\"filename\", '/tmp/DB_DATA.csv')\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 2220,
        "wires": [
            [
                "5bf7f51448d5e055"
            ]
        ]
    },
    {
        "id": "7b578c41f67e5310",
        "type": "function",
        "z": "dad88d9a3132fed6",
        "name": "Get Kafka Records",
        "func": "// flow.set(\"moduleFacts\", [])\n// flow.set(\"originalData\", [])\n// //NK initialize global context\n// global.set(\"originalData\", [])\n// global.set(\"moduleFacts\", [])\n// global.set(\"ptrModuleFacts\",0)\n// global.set(\"filename\", '/tmp/DB_DATA.csv')\n\n\n// const result = msg.payload.map(obj => Object.fromEntries(Object.entries(obj).map(([key, val]) => [key.toUpperCase(), val])));\n// msg.payload.csv = result;\n// msg.payload.length = msg.pgsql.rowCount\n// // console.log(msg.payload.csv)\n\n// let p = msg.payload.csv;\n// msg.payload = p;\n\n// let ptr = global.get(\"ptrModuleFacts\"); //HF\n\n// flow.set('moduleFacts', p)\n// global.set('moduleFacts', p)\n// global.set('originalData', p[ptr]) //HF\n// // global.set('originalData', p[0]) //NK\n// msg.topic = 'csv'\n// msg.ui_control = {\n//     max: p.length // Assuming msg.payload contains the row count\n// };\n// msg.payload = JSON.stringify(msg.payload, null, 2);\n\n// msg.newVars = JSON.stringify({newVars: msg.newVars}, null, 2);\n\n// // console.log({getD: msg.newVars, postD: JSON.stringify({j: msg.newVars}), postDD: msg.newVars})\nconsole.log({\n    msg: msg.payload\n})\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 2220,
        "wires": [
            [
                "614849ea184b04aa"
            ]
        ]
    },
    {
        "id": "614849ea184b04aa",
        "type": "template",
        "z": "dad88d9a3132fed6",
        "name": "html",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Upload CSV File</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css\">\n    <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js\"></script>\n    <style>\n        /* Add custom styles for responsiveness */\n         .table-container {\n            width: 95%;\n            overflow-x: auto;\n            margin: 2%;\n        }\n        table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n\n        th, td {\n            border: 1px solid #dddddd;\n            text-align: left;\n            padding: 8px;\n        }\n\n        tr:nth-child(even) {\n            background-color: #f2f2f2;\n        }\n    </style>\n</head>\n<body>\n<nav>\n    <div class=\"blue nav-wrapper\">\n      <a href=\"#\" data-target=\"mobile-demo\" class=\"sidenav-trigger\"><i class=\"material-icons\">menu</i></a>\n      <ul class=\"left hide-on-med-and-down\">\n        <li><a class=\"bold\" href=\"/update_params\">Params</a></li>\n        <li><a class=\"bold\" href=\"/upload_page\">Upload csv</a></li>\n        <li><a class=\"bold\" href=\"/ui_wrapper\">UI</a></li>\n        <li><a class=\"bold\" href=\"/test_ui\">Load DB</a></li>\n      </ul>\n    </div>\n  </nav>\n\n  <ul class=\"blue sidenav\" id=\"mobile-demo\">\n      <li><a class=\"bold\" href=\"/update_params\">Params</a></li>\n        <li><a class=\"bold\" href=\"/upload_page\">Upload csv</a></li>\n        <li><a class=\"bold\" href=\"/ui_wrapper\">UI</a></li>\n        <li><a class=\"bold\" href=\"/test_ui\">Load DB</a></li>\n  </ul>\n\n  <div class=\"container\">\n    {{!-- <h1 class=\"center-align\">Uploaded</h1> --}}\n  </div>\n  <div id=\"hide_this_to_load\">{{payload}}</div>\n    <div class=\"table-container\">\n  <div id=\"load_table\"></div>\n  </div>\n  <p id=\"file_name\">{{name}}</p>\n   <p id=\"new_vars\">{{newVars}}</p>\n    <div class=\"input-field center-align\">\n    <button onclick='saveCsv()' class=\"btn waves-effect waves-light\" type=\"submit\">Save\n    </button>\n     <a href='/ui_wrapper' class=\"btn waves-effect waves-light\" type=\"submit\">Go {{name}}\n    </a>\n  </div>\n<script>\n  let data = document.getElementById('hide_this_to_load').innerHTML\n  let file_name = document.getElementById('file_name').innerHTML\n  let new_vars = document.getElementById('new_vars').innerHTML\n  \n  document.getElementById('new_vars').style.display = 'none';\n  document.getElementById('hide_this_to_load').style.display = 'none';\n  document.getElementById('file_name').style.display = 'none';\n  data = JSON.parse(data);\n  new_vars = JSON.parse(new_vars);\n  let headers; \n  document.addEventListener('DOMContentLoaded', function() {\n    const loadTableDiv = document.getElementById('load_table');\n    const table = document.createElement('table');\n    table.classList.add('striped');\n    const tableHeader = document.createElement('thead');\n    const headerRow = document.createElement('tr');\n    headers = [...new_vars.newVars.map(i=>i.toUpperCase()), ...(Object.keys(data[0]))]; // Set headers here\n    headers.forEach(headerText => {\n      const th = document.createElement('th');\n      th.textContent = headerText;\n      headerRow.appendChild(th);\n    });\n    tableHeader.appendChild(headerRow);\n    table.appendChild(tableHeader);\n    const tableBody = document.createElement('tbody');\n    data.forEach((item, index) => {\n      const row = document.createElement('tr');\n      headers.forEach(header => {\n        const cell = document.createElement('td');\n        cell.style.minWidth = '200px';\n        if (index !== -1) { // Make fields editable for all rows except the header row\n          const input = document.createElement('input');\n          input.value = item[header] == undefined ? 'NULL': item[header];\n          input.addEventListener('input', function() {\n            item[header] = this.value;\n            const updatedJData = getUpdatedData();\n            // console.log(updatedJData);\n          });\n          cell.appendChild(input);\n        } else {\n          cell.textContent = item[header];\n        }\n        row.appendChild(cell);\n      });\n      tableBody.appendChild(row);\n    });\n    table.appendChild(tableBody);\n    loadTableDiv.appendChild(table);\n  });\n\n  function getUpdatedData() {\n    const updatedData = [];\n    const rows = document.querySelectorAll('#load_table tbody tr');\n    rows.forEach(row => {\n      const rowData = {};\n      const cells = row.querySelectorAll('td');\n      cells.forEach((cell, index) => {\n        const header = headers[index];\n        if (header) {\n          rowData[header] = cell.firstChild.value || cell.textContent;\n        }\n      });\n      updatedData.push(rowData);\n    });\n    return updatedData;\n  }\n  const jsonToCSV = (jsonArray) => {\n    const headers = Object.keys(jsonArray[0]);\n\n    let csv = headers.join(',') + '\\n';\n\n    jsonArray.forEach(obj => {\n        const values = headers.map(header => {\n            const escapedValue = obj[header].replace(/\"/g, '\\\\\"');\n            return `\"${escapedValue}\"`;\n        });\n        csv += values.join(',') + '\\n';\n    });\n\n    return csv;\n};\n\n  function saveCsv(){\n    console.log(JSON.stringify({filename: file_name, csvData:jsonToCSV(getUpdatedData())}))\n     fetch('/saveCsv', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({filename: '/tmp/' + file_name, csvData:jsonToCSV(getUpdatedData())})\n    })\n    .then(response => {\n      if (response.ok) {\n        console.log('Update successful!');\n      } else {\n        console.error('Error updating params:', response.status);\n      }\n    })\n    .catch(error => {\n      console.error('Error:', error);\n    });\n  }\n</script>\n\n\n</body>\n</html>\n",
        "output": "str",
        "x": 1050,
        "y": 2220,
        "wires": [
            [
                "bf57c5e0dbaa9486"
            ]
        ]
    },
    {
        "id": "bf57c5e0dbaa9486",
        "type": "http response",
        "z": "dad88d9a3132fed6",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1210,
        "y": 2220,
        "wires": []
    },
    {
        "id": "05b67576d444bda4",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out post edit",
        "mode": "link",
        "links": [
            "df20d97837fa1d09"
        ],
        "x": 2075,
        "y": 2880,
        "wires": []
    },
    {
        "id": "039e4172b173ea18",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out post edit",
        "mode": "link",
        "links": [
            "24fea5e6f5d0c6b0"
        ],
        "x": 2105,
        "y": 2900,
        "wires": []
    },
    {
        "id": "45b768d58693d73d",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out post edit",
        "mode": "link",
        "links": [
            "c8919561eea2a059",
            "b0b456eac2b51685"
        ],
        "x": 2145,
        "y": 2920,
        "wires": []
    },
    {
        "id": "854cd7a417cbbc6e",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out post edit",
        "mode": "link",
        "links": [
            "8671a6e9c3be6ad6"
        ],
        "x": 2185,
        "y": 2960,
        "wires": []
    },
    {
        "id": "6c8827ce7a4c83d8",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out InteractiveMode",
        "mode": "link",
        "links": [
            "d389bc5bbb58e3cb",
            "4a7b9cb4a8c69f57"
        ],
        "x": 2225,
        "y": 2980,
        "wires": []
    },
    {
        "id": "6386460ff91d3960",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out batchMode1",
        "mode": "link",
        "links": [
            "a7f0c8bc56765c6a"
        ],
        "x": 2185,
        "y": 3000,
        "wires": []
    },
    {
        "id": "6982bc340b585149",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out batchMode2",
        "mode": "link",
        "links": [
            "f0c5660583e686c0"
        ],
        "x": 2145,
        "y": 3020,
        "wires": []
    },
    {
        "id": "48c2bbd321b77688",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out NONNORM: Init Set ACTVMIO & OPSTATS",
        "mode": "link",
        "links": [
            "447f05b7589104a7"
        ],
        "x": 2105,
        "y": 3040,
        "wires": []
    },
    {
        "id": "a0a9a69afb297619",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out NONNORM: Router",
        "mode": "link",
        "links": [
            "918d1db8979aef15"
        ],
        "x": 2065,
        "y": 3060,
        "wires": []
    },
    {
        "id": "879c5a04e7f7b3ba",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out NONNORM: Set OPSTATS & ACTVMIO",
        "mode": "link",
        "links": [
            "7439226c767a87a3"
        ],
        "x": 2015,
        "y": 3080,
        "wires": []
    },
    {
        "id": "601d06243349006e",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out NONNORM: Set NONORM",
        "mode": "link",
        "links": [
            "bc67815db9dee1e7"
        ],
        "x": 1955,
        "y": 3100,
        "wires": []
    },
    {
        "id": "9924458ebb7935cd",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out NONNORM: Set Basic to 0",
        "mode": "link",
        "links": [
            "b7d9dea2a407d5ab"
        ],
        "x": 1895,
        "y": 3120,
        "wires": []
    },
    {
        "id": "51d4f6e460537ff8",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "link out NONNORM: Special Season final",
        "mode": "link",
        "links": [
            "7191fc9544f07b32"
        ],
        "x": 1845,
        "y": 3140,
        "wires": []
    },
    {
        "id": "8cc4aec631b9f7ab",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "mfg_payqtr1",
        "mode": "link",
        "links": [
            "7fd7c15cd9b5a645"
        ],
        "x": 1795,
        "y": 3160,
        "wires": []
    },
    {
        "id": "6e0891f1d9b0f50b",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "mfg_payann",
        "mode": "link",
        "links": [
            "d638deea262939f1"
        ],
        "x": 1735,
        "y": 3180,
        "wires": []
    },
    {
        "id": "405380585cc28809",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "mfg_empq1",
        "mode": "link",
        "links": [
            "c6e825877bca50ae"
        ],
        "x": 1685,
        "y": 3200,
        "wires": []
    },
    {
        "id": "8ab5edfeddc79fdc",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "kau_to_company_additivity_check_link",
        "mode": "link",
        "links": [
            "cd68a9923d85636d"
        ],
        "x": 1635,
        "y": 3220,
        "wires": []
    },
    {
        "id": "be79a45237eac5df",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "inventories_balance_link",
        "mode": "link",
        "links": [
            "b2b244030212674a"
        ],
        "x": 1575,
        "y": 3240,
        "wires": []
    },
    {
        "id": "961d21f9c9d6935d",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "lifo_valuation_method_link",
        "mode": "link",
        "links": [
            "0e055cc10b2d1df5"
        ],
        "x": 1515,
        "y": 3260,
        "wires": []
    },
    {
        "id": "256113e429ce586b",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "evaluate_lifo_reverse_module_link",
        "mode": "link",
        "links": [
            "62eb4cacd21b3528"
        ],
        "x": 1465,
        "y": 3280,
        "wires": []
    },
    {
        "id": "6e4d6926b48c4bfc",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "evaluate_lifo_module_link",
        "mode": "link",
        "links": [
            "f64b690f11b0f463"
        ],
        "x": 1405,
        "y": 3300,
        "wires": []
    },
    {
        "id": "6a7a578fbd272b1f",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "non_lifo_valuation_methods_module_link",
        "mode": "link",
        "links": [
            "b55a0bc87142a940"
        ],
        "x": 1345,
        "y": 3320,
        "wires": []
    },
    {
        "id": "ac696618fbdb5b2b",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "evaluatenon_lifo_valuation_methods_module_link",
        "mode": "link",
        "links": [
            "c72b098afa64f560"
        ],
        "x": 1285,
        "y": 3340,
        "wires": []
    },
    {
        "id": "ff930476a898868c",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "evaluate_detail_valuation_methods_link",
        "mode": "link",
        "links": [
            "e0fccd45e6604bda"
        ],
        "x": 1245,
        "y": 3360,
        "wires": []
    },
    {
        "id": "17eb7e821e3b7ea0",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": " evaluate_non_lifo_valuation_method_module_link",
        "mode": "link",
        "links": [
            "d81c18d7166b9e59"
        ],
        "x": 1195,
        "y": 3380,
        "wires": []
    },
    {
        "id": "9a0ffed7eefbb31e",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "non_lifo_random_module_link",
        "mode": "link",
        "links": [
            "61e767d06ab72a43"
        ],
        "x": 1135,
        "y": 3400,
        "wires": []
    },
    {
        "id": "f2d1653b5ba3e5d2",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "napcs_balance",
        "mode": "link",
        "links": [
            "2e8dc577c6d85be5"
        ],
        "x": 1085,
        "y": 3420,
        "wires": []
    },
    {
        "id": "03b4a30c8b73aaa1",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "napcs_balance",
        "mode": "link",
        "links": [
            "5749501cd685bc0c"
        ],
        "x": 1035,
        "y": 3440,
        "wires": []
    },
    {
        "id": "184f643c8c0c9483",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "napcs_balance",
        "mode": "link",
        "links": [
            "aca56c4b68c05d08"
        ],
        "x": 995,
        "y": 3460,
        "wires": []
    },
    {
        "id": "13026c6f9554fd48",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "napcs_recalculate_napcs_fields",
        "mode": "link",
        "links": [
            "ebd6fd2b33dd0765"
        ],
        "x": 955,
        "y": 3480,
        "wires": []
    },
    {
        "id": "628a357ebf92b85e",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "napcs_no_donor",
        "mode": "link",
        "links": [
            "23a30ef7226c1c9c"
        ],
        "x": 915,
        "y": 3500,
        "wires": []
    },
    {
        "id": "23110971cf0ed68c",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "napcs_m_goco",
        "mode": "link",
        "links": [
            "b93299e2e56af480"
        ],
        "x": 875,
        "y": 3520,
        "wires": []
    },
    {
        "id": "f96645ae14ef8fb7",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "napcs_hdicat_link",
        "mode": "link",
        "links": [
            "8bc3b4ce5f96ef53"
        ],
        "x": 835,
        "y": 3540,
        "wires": []
    },
    {
        "id": "1b801f920c932ed1",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "mk_link",
        "mode": "link",
        "links": [
            "f81fcc6d468aec4e"
        ],
        "x": 825,
        "y": 3580,
        "wires": []
    },
    {
        "id": "9e0c70dcbb4236fd",
        "type": "subflow:e28cd8ccfbe21b33",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "",
        "x": 640,
        "y": 2360,
        "wires": [
            [
                "aecaf71d99c7d88b",
                "4009a991edd2db54"
            ]
        ]
    },
    {
        "id": "4009a991edd2db54",
        "type": "debug",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "DB DEBUG",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 2280,
        "wires": []
    },
    {
        "id": "3243d670e9d24a2d",
        "type": "debug",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "DB AFTER CAHANGE",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 2300,
        "wires": []
    },
    {
        "id": "070b2c6eb42b2ee1",
        "type": "function",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "GetENV",
        "func": "// msg.payload.url = env.get('CENSUS_API')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 2100,
        "wires": [
            [
                "399608507ce305d7"
            ]
        ]
    },
    {
        "id": "f49fb32690ddbe1a",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "load_referrals_link",
        "mode": "link",
        "links": [
            "c0fb97b1232af4ac"
        ],
        "x": 805,
        "y": 3620,
        "wires": []
    },
    {
        "id": "bf91ad9e062838cc",
        "type": "link out",
        "z": "dad88d9a3132fed6",
        "g": "4099bf03141f3710",
        "name": "napcs_prep_link",
        "mode": "link",
        "links": [
            "43159eefde8b9ec7"
        ],
        "x": 765,
        "y": 3640,
        "wires": []
    },
    {
        "id": "24782a2dd1c62950",
        "type": "subflow:e7b7501b29427db9",
        "z": "d85ecef9a21f8c9c",
        "name": "",
        "x": 1140,
        "y": 140,
        "wires": [
            [
                "7f9f9ce1831e7eba"
            ]
        ]
    },
    {
        "id": "58074eed293851bb",
        "type": "change",
        "z": "d85ecef9a21f8c9c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.lookup",
                "pt": "msg",
                "to": "{\"moduleName\":\"napcs\",\"program\":\"aies\",\"unit_type\":\"all\",\"params\":\"napcs_prep\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 140,
        "wires": [
            [
                "a46833e13dc1cb98"
            ]
        ]
    },
    {
        "id": "a46833e13dc1cb98",
        "type": "subflow:0be109393cb5f28a",
        "z": "d85ecef9a21f8c9c",
        "name": "",
        "x": 910,
        "y": 140,
        "wires": [
            [
                "24782a2dd1c62950"
            ]
        ]
    },
    {
        "id": "7f9f9ce1831e7eba",
        "type": "link out",
        "z": "d85ecef9a21f8c9c",
        "name": "link out classification",
        "mode": "link",
        "links": [
            "7d91540d69ac16c1",
            "688a39b3e0070fe9"
        ],
        "x": 1275,
        "y": 140,
        "wires": []
    },
    {
        "id": "43159eefde8b9ec7",
        "type": "link in",
        "z": "d85ecef9a21f8c9c",
        "name": "load_referrals_link",
        "links": [
            "bf91ad9e062838cc"
        ],
        "x": 475,
        "y": 140,
        "wires": [
            [
                "58074eed293851bb"
            ]
        ]
    }
]